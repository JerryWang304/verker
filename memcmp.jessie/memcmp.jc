
axiomatic Padding {

  logic type padding
  
}

axiomatic Jessie_memory_reinterpretation_predicates {

  predicate uint8_as_uint8(uint8 d0, uint8 a0) =
  ((d0 == a0) && \uint8_as_uint8(d0, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate uint8_as_int8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \uint8_as_int8(d0, a0))
   
  predicate int8_as_uint8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \int8_as_uint8(d0, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = voidP with {
  uint8 unsigned_charM: 8;
}

axiomatic Mem {

  logic integer memcmp(charP[..] cs, charP[..] ct, integer count)
   
  lemma eq{L} :
  (_C_1 : (\forall integer i_1;
            (\forall charP[..] cs_0;
              (\forall charP[..] ct_0;
                (((((0 <= i_1) &&
                     \at((if (\at(0,L) <= \at(i_1,L)) then (((\offset_min(
                                                               \at(cs_0,L)) <=
                                                               \at(0,L)) &&
                                                              (\offset_max(
                                                                \at(cs_0,L)) >=
                                                                \at(i_1,L))) &&
                                                             (\forall integer __framac_tmp2;
                                                               (((\at(0,L) <=
                                                                   __framac_tmp2) &&
                                                                  (__framac_tmp2 <=
                                                                    \at(i_1,L))) ==>
                                                                 true))) else true),L)) &&
                    \at((if (\at(0,L) <= \at(i_1,L)) then (((\offset_min(
                                                              \at(ct_0,L)) <=
                                                              \at(0,L)) &&
                                                             (\offset_max(
                                                               \at(ct_0,L)) >=
                                                               \at(i_1,L))) &&
                                                            (\forall integer __framac_tmp1;
                                                              (((\at(0,L) <=
                                                                  __framac_tmp1) &&
                                                                 (__framac_tmp1 <=
                                                                   \at(i_1,L))) ==>
                                                                true))) else true),L)) &&
                   ((cs_0 + i_1).charM == (ct_0 + i_1).charM)) <==>
                  (memcmp(cs_0, ct_0, i_1) == 0))))))
   
  lemma lt{L} :
  (_C_2 : (\exists integer i_2;
            (\exists charP[..] cs_1;
              (\exists charP[..] ct_1;
                ((((((0 <= i_2) &&
                      \at((if (\at(0,L) <= \at(i_2,L)) then (((\offset_min(
                                                                \at(cs_1,L)) <=
                                                                \at(0,L)) &&
                                                               (\offset_max(
                                                                 \at(cs_1,L)) >=
                                                                 \at(i_2,L))) &&
                                                              (\forall integer __framac_tmp4;
                                                                (((\at(0,L) <=
                                                                    __framac_tmp4) &&
                                                                   (__framac_tmp4 <=
                                                                    \at(i_2,L))) ==>
                                                                  true))) else true),L)) &&
                     \at((if (\at(0,L) <= \at(i_2,L)) then (((\offset_min(
                                                               \at(ct_1,L)) <=
                                                               \at(0,L)) &&
                                                              (\offset_max(
                                                                \at(ct_1,L)) >=
                                                                \at(i_2,L))) &&
                                                             (\forall integer __framac_tmp3;
                                                               (((\at(0,L) <=
                                                                   __framac_tmp3) &&
                                                                  (__framac_tmp3 <=
                                                                    \at(i_2,L))) ==>
                                                                 true))) else true),L)) &&
                    (\forall integer j_0;
                      (((0 <= j_0) && (j_0 < i_2)) ==>
                        ((cs_1 + j_0).charM == (ct_1 + j_0).charM)))) &&
                   ((cs_1 + i_2).charM < (ct_1 + i_2).charM)) <==>
                  (memcmp(cs_1, ct_1, i_2) < 0))))))
   
  lemma gt{L} :
  (_C_3 : (\exists integer i_3;
            (\exists charP[..] cs_2;
              (\exists charP[..] ct_2;
                ((((((0 <= i_3) &&
                      \at((if (\at(0,L) <= \at(i_3,L)) then (((\offset_min(
                                                                \at(cs_2,L)) <=
                                                                \at(0,L)) &&
                                                               (\offset_max(
                                                                 \at(cs_2,L)) >=
                                                                 \at(i_3,L))) &&
                                                              (\forall integer __framac_tmp6;
                                                                (((\at(0,L) <=
                                                                    __framac_tmp6) &&
                                                                   (__framac_tmp6 <=
                                                                    \at(i_3,L))) ==>
                                                                  true))) else true),L)) &&
                     \at((if (\at(0,L) <= \at(i_3,L)) then (((\offset_min(
                                                               \at(ct_2,L)) <=
                                                               \at(0,L)) &&
                                                              (\offset_max(
                                                                \at(ct_2,L)) >=
                                                                \at(i_3,L))) &&
                                                             (\forall integer __framac_tmp5;
                                                               (((\at(0,L) <=
                                                                   __framac_tmp5) &&
                                                                  (__framac_tmp5 <=
                                                                    \at(i_3,L))) ==>
                                                                 true))) else true),L)) &&
                    (\forall integer j_1;
                      (((0 <= j_1) && (j_1 < i_3)) ==>
                        ((cs_2 + j_1).charM == (ct_2 + j_1).charM)))) &&
                   ((cs_2 + i_3).charM > (ct_2 + i_3).charM)) <==>
                  (memcmp(cs_2, ct_2, i_3) > 0))))))
  
}

int32 memcmp(voidP[..] cs, voidP[..] ct, uint64 count)
  requires ((_C_61 : (cs <: unsigned_charP)) &&
             ((_C_62 : (ct <: unsigned_charP)) &&
               ((_C_63 : \at((if (\at(0,Here) <=
                                   \at(((count :> integer) - 1),Here)) then 
                             (((\offset_min(\at((cs :> unsigned_charP[..]),Here)) <=
                                 \at(0,Here)) &&
                                (\offset_max(\at((cs :> unsigned_charP[..]),Here)) >=
                                  \at(((count :> integer) - 1),Here))) &&
                               (\forall integer __framac_tmp7;
                                 (((\at(0,Here) <= __framac_tmp7) &&
                                    (__framac_tmp7 <=
                                      \at(((count :> integer) - 1),Here))) ==>
                                   true))) else true),Here)) &&
                 ((_C_64 : \at((if (\at(0,Here) <=
                                     \at(((count :> integer) - 1),Here)) then 
                               (((\offset_min(\at((ct :> unsigned_charP[..]),Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at((ct :> unsigned_charP[..]),Here)) >=
                                    \at(((count :> integer) - 1),Here))) &&
                                 (\forall integer __framac_tmp8;
                                   (((\at(0,Here) <= __framac_tmp8) &&
                                      (__framac_tmp8 <=
                                        \at(((count :> integer) - 1),Here))) ==>
                                     true))) else true),Here)) &&
                   (_C_65 : (((\base_block((cs :> unsigned_charP[..])) ==
                                \base_block((ct :> unsigned_charP[..]))) &&
                               (! (\base_block((cs :> unsigned_charP[..])) !=
                                    \base_block((ct :> unsigned_charP[..]))))) ||
                              ((\base_block((cs :> unsigned_charP[..])) !=
                                 \base_block((ct :> unsigned_charP[..]))) &&
                                (! (\base_block((cs :> unsigned_charP[..])) ==
                                     \base_block((ct :> unsigned_charP[..])))))))))));
behavior default:
  assigns \nothing;
  ensures (_C_52 : ((_C_53 : ((\result == (0 :> int32)) <==>
                               (memcmp((\at(cs,Old) :> charP[..]),
                                       (\at(ct,Old) :> charP[..]),
                                       (\at(count,Old) :> integer)) ==
                                 0))) &&
                     ((_C_55 : ((\result < (0 :> int32)) <==>
                                 (memcmp((\at(cs,Old) :> charP[..]),
                                         (\at(ct,Old) :> charP[..]),
                                         (\at(count,Old) :> integer)) <
                                   0))) &&
                       (_C_56 : ((\result > (0 :> int32)) <==>
                                  (memcmp((\at(cs,Old) :> charP[..]),
                                          (\at(ct,Old) :> charP[..]),
                                          (\at(count,Old) :> integer)) >
                                    0))))));
behavior equal:
  assumes (\forall integer i_7;
            (((0 <= i_7) && (i_7 < (count :> integer))) ==>
              (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                ((ct :> unsigned_charP[..]) + i_7).unsigned_charM)));
  ensures (_C_57 : (\result == (0 :> int32)));
behavior diff:
  assumes (\exists integer i_5;
            (((0 <= i_5) && (i_5 < (count :> integer))) &&
              (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                ((ct :> unsigned_charP[..]) + i_5).unsigned_charM)));
  ensures (_C_58 : (\exists integer i_6;
                     (((((0 <= i_6) && (i_6 < (\at(count,Old) :> integer))) &&
                         (\forall integer j_2;
                           (((0 <= j_2) && (j_2 < i_6)) ==>
                             (((\at(cs,Old) :> unsigned_charP[..]) + j_2).unsigned_charM ==
                               ((\at(ct,Old) :> unsigned_charP[..]) + j_2).unsigned_charM)))) &&
                        (((\at(cs,Old) :> unsigned_charP[..]) + i_6).unsigned_charM !=
                          ((\at(ct,Old) :> unsigned_charP[..]) + i_6).unsigned_charM)) &&
                       ((\result :> integer) ==
                         ((((\at(cs,Old) :> unsigned_charP[..]) + i_6).unsigned_charM :> integer) -
                           (((\at(ct,Old) :> unsigned_charP[..]) + i_6).unsigned_charM :> integer))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_7;
                                      (((0 <= i_7) &&
                                         (i_7 < (count :> integer))) ==>
                                        (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                                          ((ct :> unsigned_charP[..]) + i_7).unsigned_charM))) &&
                                     (\exists integer i_5;
                                       (((0 <= i_5) &&
                                          (i_5 < (count :> integer))) &&
                                         (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                                           ((ct :> unsigned_charP[..]) + i_5).unsigned_charM)))))));
   
   (check (complete_behaviors : ((\exists integer i_5;
                                   (((0 <= i_5) &&
                                      (i_5 < (count :> integer))) &&
                                     (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                                       ((ct :> unsigned_charP[..]) + i_5).unsigned_charM))) ||
                                  (\forall integer i_7;
                                    (((0 <= i_7) &&
                                       (i_7 < (count :> integer))) ==>
                                      (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                                        ((ct :> unsigned_charP[..]) + i_7).unsigned_charM))))));
   
   (var unsigned_charP[..] su1);
   
   (var unsigned_charP[..] su2);
   
   (var int32 res);
   
   (var int32 __retres);
   
   {  (_C_4 : (res = (0 :> int32)));
      (_C_6 : (su1 = (_C_5 : (cs :> unsigned_charP[..]))));
      (_C_8 : (su2 = (_C_7 : (ct :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_30 : ((_C_31 : ((0 :> uint64) <= count)) &&
                             (_C_32 : (count <= \at(count,Pre)))));
      behavior default:
        invariant (_C_23 : (((_C_25 : (\base_block((cs :> unsigned_charP[..])) ==
                                        \base_block(su1))) &&
                              (_C_26 : (((cs :> unsigned_charP[..]) - su1) <=
                                         0))) &&
                             ((_C_28 : (\base_block(su1) ==
                                         \base_block(((cs :> unsigned_charP[..]) +
                                                       (\at(count,Pre) :> integer))))) &&
                               (_C_29 : ((su1 -
                                           ((cs :> unsigned_charP[..]) +
                                             (\at(count,Pre) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_16 : (((_C_18 : (\base_block((ct :> unsigned_charP[..])) ==
                                        \base_block(su2))) &&
                              (_C_19 : (((ct :> unsigned_charP[..]) - su2) <=
                                         0))) &&
                             ((_C_21 : (\base_block(su2) ==
                                         \base_block(((ct :> unsigned_charP[..]) +
                                                       (\at(count,Pre) :> integer))))) &&
                               (_C_22 : ((su2 -
                                           ((ct :> unsigned_charP[..]) +
                                             (\at(count,Pre) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_13 : ((_C_14 : ((su1 - (cs :> unsigned_charP[..])) ==
                                       (su2 - (ct :> unsigned_charP[..])))) &&
                             (_C_15 : ((su2 - (ct :> unsigned_charP[..])) ==
                                        ((\at(count,Pre) :> integer) -
                                          (count :> integer))))));
      behavior default:
        invariant (_C_12 : (\forall integer i_4;
                             (((0 <= i_4) &&
                                (i_4 <
                                  ((\at(count,Pre) :> integer) -
                                    (count :> integer)))) ==>
                               (((cs :> unsigned_charP[..]) + i_4).unsigned_charM ==
                                 ((ct :> unsigned_charP[..]) + i_4).unsigned_charM))));
      behavior default:
        invariant (_C_11 : (memcmp((cs :> charP[..]), (ct :> charP[..]),
                                   (\at(count,Pre) :> integer)) ==
                             memcmp((su1 :> charP[..]), (su2 :> charP[..]),
                                    (count :> integer))));
      behavior default:
        invariant (_C_10 : (res == (0 :> int32)));
      behavior default:
        
        assigns res;
      variant (_C_9 : count);
      while (true)
      {  
         {  (if (_C_34 : ((_C_33 : ((0 :> int32) :> uint64)) < count)) then () else 
            (goto while_0_break));
            (_C_41 : (res = (_C_40 : ((_C_39 : ((_C_38 : ((_C_37 : su1.unsigned_charM) :> int32)) -
                                                 (_C_36 : ((_C_35 : su2.unsigned_charM) :> int32)))) :> int32))));
            (if (_C_42 : (res != (0 :> int32))) then 
            (goto while_0_break) else ());
            (_C_44 : (su1 = (_C_43 : (su1 + (1 :> int32)))));
            (_C_46 : (su2 = (_C_45 : (su2 + (1 :> int32)))));
            (_C_49 : (count = (_C_48 : ((_C_47 : (count - (1 :> uint64))) :> uint64))))
         }
      };
      (while_0_break : ());
      (_C_51 : (__retres = (_C_50 : (res :> int32))));
      
      (return __retres)
   }
}
