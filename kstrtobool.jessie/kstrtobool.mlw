
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

theory Enum__bool_aux

  use why3.Bool.Bool 
  
  function max  : int = (1)
  
  function min  : int = (0)
  
end

theory Enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool_aux 
  
  clone export enum.Enum with constant min = min, constant max = max
  
end

module Unsafe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root__BoolP_safe

  use why3.Bool.Bool 
  
end

module Root__BoolP_unsafe

  use why3.Bool.Bool 
  
end

theory Root__BoolP

  use why3.Bool.Bool 
  
  type _BoolP 
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_switch_0_break_exc unit
  
  exception Goto_switch_1_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Function_kstrtobool_safety
#"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
"expl:kstrtobool, safety"

  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool_of_Safe_int32 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_eq_pointer_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import core.Jessie_acc_offset_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, safety" =
  fun
   (s_2 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_6 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_6_alloc_table : (alloc_table
   _BoolP)) (voidP_s_5_alloc_table : (alloc_table voidP))
   (voidP_s_5_tag_table : (tag_table voidP)) (charP_charM_s_5 : (memory voidP
   Int8.t)) 
   requires {
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_2 null) \/
    (((<=) (offset_min voidP_s_5_alloc_table s_2) (0)) /\
    (((>=) (offset_max voidP_s_5_alloc_table s_2) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((<=) (offset_min _BoolP_res_6_alloc_table res) (0)))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((>=) (offset_max _BoolP_res_6_alloc_table res) (0)))
   /\ (#"kstrtobool.jc" 44 12 435# ((=) true true)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres = ref (Safe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb 
        (#"kstrtobool.jc" 79 22 31#
        (neq_pointer  voidP_s_5_alloc_table voidP_s_5_alloc_table s_2
         (null  ) )) ))
       then
        begin
        (__retres :=
         (let _jessie_95 =
         (#"kstrtobool.jc" 80 29 43# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 6 2 13#
         "expl:Pointer index bounds" true) }); _jessie_95 end));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_6 =
        (let _jessie_96 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Safe_int32_of_Safe_int8.cast 
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
         "expl:Pointer dereference"
         (acc  voidP_s_5_alloc_table charP_charM_s_5 s_2 )) )) in
        begin (assert { ("expl:Pointer index bounds" true) }); _jessie_96 end)
        in
        (if
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
         (Safe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Safe_int32.of_int (49))) ))
        ||
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
         (Safe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Safe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
        (Safe_int32.(=)  _jessie_6
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Safe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_118 =
         (let _jessie_117 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Safe_enum__bool_of_Safe_int32.cast 
          (#"kstrtobool.jc" 89 51 63# "expl:Integer cast"
          (Safe_int32.of_int (1))) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 2 13#
         "expl:Pointer index bounds" true) }); _jessie_117 end) in
         (let _jessie_119 = res in
         (let _jessie_120 = (0) in
         (let _jessie_121 = _jessie_119 in
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 2 13#
         "expl:Pointer dereference"
         (upd  _BoolP_res_6_alloc_table _BoolP__BoolM_res_6 _jessie_119
          _jessie_118 ))))));
          begin
          (__retres :=
           (let _jessie_116 =
           (#"kstrtobool.jc" 90 31 43# "expl:Integer cast"
           (Safe_int32.of_int (0))) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 13 2 11#
           "expl:Pointer index bounds" true) }); _jessie_116 end));
           (raise (Return_label_exc ())) end end
        else
         (if
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
          (Safe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Safe_int32.of_int (48))) ))
         ||
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
          (Safe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Safe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
         (Safe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Safe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_112 =
          (let _jessie_111 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Safe_enum__bool_of_Safe_int32.cast 
           (#"kstrtobool.jc" 97 54 66# "expl:Integer cast"
           (Safe_int32.of_int (0))) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 2 14#
          "expl:Pointer index bounds" true) }); _jessie_111 end) in
          (let _jessie_113 = res in
          (let _jessie_114 = (0) in
          (let _jessie_115 = _jessie_113 in
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 2 14#
          "expl:Pointer dereference"
          (upd  _BoolP_res_6_alloc_table _BoolP__BoolM_res_6 _jessie_113
           _jessie_112 ))))));
           begin
           (__retres :=
            (let _jessie_110 =
            (#"kstrtobool.jc" 98 32 44# "expl:Integer cast"
            (Safe_int32.of_int (0))) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 18 2 11#
            "expl:Pointer index bounds" true) }); _jessie_110 end));
            (raise (Return_label_exc ())) end end
         else
          begin
          (if
          (#"kstrtobool.jc" 85 14 79#
          ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
           (Safe_int32.(=)  _jessie_6
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Safe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
          (Safe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Safe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_4 =
             (let _jessie_97 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
              "expl:Pointer dereference"
              (acc_offset_typesafe  voidP_s_5_alloc_table charP_charM_s_5 s_2
               (1) )) )) in
             begin
             (assert { ("expl:Pointer index bounds" true) }); _jessie_97 end)
             in
             (if
             (#"kstrtobool.jc" 106 19 84#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
              (Safe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Safe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
             (Safe_int32.(=)  _jessie_4
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Safe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_106 =
              (let _jessie_105 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
              "expl:Integer cast"
              (Safe_enum__bool_of_Safe_int32.cast 
               (#"kstrtobool.jc" 109 59 71# "expl:Integer cast"
               (Safe_int32.of_int (1))) )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 3 14#
              "expl:Pointer index bounds" true) }); _jessie_105 end) in
              (let _jessie_107 = res in
              (let _jessie_108 = (0) in
              (let _jessie_109 = _jessie_107 in
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 3 14#
              "expl:Pointer dereference"
              (upd  _BoolP_res_6_alloc_table _BoolP__BoolM_res_6 _jessie_107
               _jessie_106 ))))));
               begin
               (__retres :=
                (let _jessie_104 =
                (#"kstrtobool.jc" 110 37 49# "expl:Integer cast"
                (Safe_int32.of_int (0))) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 25 3 12#
                "expl:Pointer index bounds" true) }); _jessie_104 end));
                (raise (Return_label_exc ())) end end
             else
              (if
              (#"kstrtobool.jc" 106 19 84#
              ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
               (Safe_int32.(=)  _jessie_4
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Safe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
              (Safe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Safe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_100 =
               (let _jessie_99 =
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
               "expl:Integer cast"
               (Safe_enum__bool_of_Safe_int32.cast 
                (#"kstrtobool.jc" 116 59 71# "expl:Integer cast"
                (Safe_int32.of_int (0))) )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 3 15#
               "expl:Pointer index bounds" true) }); _jessie_99 end) in
               (let _jessie_101 = res in
               (let _jessie_102 = (0) in
               (let _jessie_103 = _jessie_101 in
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 3 15#
               "expl:Pointer dereference"
               (upd  _BoolP_res_6_alloc_table _BoolP__BoolM_res_6 _jessie_101
                _jessie_100 ))))));
                begin
                (__retres :=
                 (let _jessie_98 =
                 (#"kstrtobool.jc" 117 37 49# "expl:Integer cast"
                 (Safe_int32.of_int (0))) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 29 3 12#
                 "expl:Pointer index bounds" true) }); _jessie_98 end));
                 (raise (Return_label_exc ())) end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_1 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_2 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres :=
         (let _jessie_122 =
         (#"kstrtobool.jc" 134 27 41# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 37 1 12#
         "expl:Pointer index bounds" true) }); _jessie_122 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_123 = !__retres in
       begin
       (assert {
       (#"kstrtobool.jc" 136 7 22# "expl:Pointer index bounds" true) });
        _jessie_123 end)); (raise Return) end end); absurd  end with Return
    -> !return end)
  
end

theory Logic_kstrtobool_fmt_true

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_true (s_0 : (pointer voidP))
  (charP_charM_s_0_3_at_L : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
      (#"kstrtobool.jc" 32 27 39# "expl:Integer cast" (Int8.of_int (89))))
     \/
     ((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
      (#"kstrtobool.jc" 33 28 41# "expl:Integer cast" (Int8.of_int (121))))
     \/
     ((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
      (#"kstrtobool.jc" 34 27 39# "expl:Integer cast" (Int8.of_int (49))))
     \/
     (((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
       (#"kstrtobool.jc" 35 28 41# "expl:Integer cast" (Int8.of_int (111))))
      \/
      (Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
      (#"kstrtobool.jc" 36 29 41# "expl:Integer cast" (Int8.of_int (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (1)))
      (#"kstrtobool.jc" 37 29 41# "expl:Integer cast" (Int8.of_int (78))))
     \/
     (Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (1)))
     (#"kstrtobool.jc" 38 30 43# "expl:Integer cast" (Int8.of_int (110)))))))))
  
  
end

theory Logic_kstrtobool_fmt_false

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_false (s : (pointer voidP)) (charP_charM_s_2_at_L
  : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
      (#"kstrtobool.jc" 26 25 37# "expl:Integer cast" (Int8.of_int (78))))
     \/
     ((Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
      (#"kstrtobool.jc" 26 60 73# "expl:Integer cast" (Int8.of_int (110))))
     \/
     ((Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
      (#"kstrtobool.jc" 27 25 37# "expl:Integer cast" (Int8.of_int (48))))
     \/
     (((Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
       (#"kstrtobool.jc" 28 26 39# "expl:Integer cast" (Int8.of_int (111))))
      \/
      (Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
      (#"kstrtobool.jc" 28 62 74# "expl:Integer cast" (Int8.of_int (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_2_at_L (shift s (1)))
      (#"kstrtobool.jc" 29 27 39# "expl:Integer cast" (Int8.of_int (70))))
     \/
     (Int8.(=) (select charP_charM_s_2_at_L (shift s (1)))
     (#"kstrtobool.jc" 29 62 75# "expl:Integer cast" (Int8.of_int (102)))))))))
  
  
end

theory Logic_kstrtobool_fmt

  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt (s_1 : (pointer voidP)) (charP_charM_s_1_4_at_L :
  (memory voidP Int8.t))
  =
     ((kstrtobool_fmt_true s_1 charP_charM_s_1_4_at_L) \/
     (kstrtobool_fmt_false s_1 charP_charM_s_1_4_at_L))
  
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Function_kstrtobool_behaviors
#"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
"expl:kstrtobool, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool_of_Unsafe_int32 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool_ensures_CORRECT
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior CORRECT" =
  fun
   (s_2 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_6 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_6_alloc_table : (alloc_table
   _BoolP)) (voidP_s_5_alloc_table : (alloc_table voidP))
   (voidP_s_5_tag_table : (tag_table voidP)) (charP_charM_s_5 : (memory voidP
   Int8.t)) 
   requires {
   ((((<>) s_2 null) /\ (kstrtobool_fmt s_2 charP_charM_s_5)) /\
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_2 null) \/
    (((<=) (offset_min voidP_s_5_alloc_table s_2) (0)) /\
    (((>=) (offset_max voidP_s_5_alloc_table s_2) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((<=) (offset_min _BoolP_res_6_alloc_table res) (0)))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((>=) (offset_max _BoolP_res_6_alloc_table res) (0)))
   /\ (#"kstrtobool.jc" 44 12 435# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"kstrtobool.jc" 62 10 20# "expl:Assigns clause"
      (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table (old
      !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6 (pset_singleton res)))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_true s_2 charP_charM_s_5) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
       (#"kstrtobool.jc" 64 55 67# "expl:Integer cast"
       (Enum__bool.of_int (1))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_false s_2 charP_charM_s_5) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
       (#"kstrtobool.jc" 66 57 69# "expl:Integer cast"
       (Enum__bool.of_int (0))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"kstrtobool.jc" 67 44 56# "expl:Integer cast"
     (Int32.of_int (0)))))))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_2 (null  ) ) ))
       then
        begin
        (__retres :=
         (#"kstrtobool.jc" 80 29 43# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_6 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_5
          (shift_  s_2
           (Unsafe_int32.to_int 
            (#"kstrtobool.jc" 85 47 59# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_6
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_89 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"kstrtobool.jc" 89 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_90 = res in
         (let _jessie_91 = (0) in
         (let _jessie_92 = _jessie_90 in
         (upd  _BoolP__BoolM_res_6 _jessie_92 _jessie_89 )))));
          begin
          (__retres :=
           (#"kstrtobool.jc" 90 31 43# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else
         (if
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_83 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"kstrtobool.jc" 97 54 66# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_84 = res in
          (let _jessie_85 = (0) in
          (let _jessie_86 = _jessie_84 in
          (upd  _BoolP__BoolM_res_6 _jessie_86 _jessie_83 )))));
           begin
           (__retres :=
            (#"kstrtobool.jc" 98 32 44# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end
         else
          begin
          (if
          (#"kstrtobool.jc" 85 14 79#
          ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_6
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_4 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5
               (shift_  s_2
                (Unsafe_int32.to_int 
                 (#"kstrtobool.jc" 106 52 64# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"kstrtobool.jc" 106 19 84#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_4
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_77 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"kstrtobool.jc" 109 59 71# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) )) in
              (let _jessie_78 = res in
              (let _jessie_79 = (0) in
              (let _jessie_80 = _jessie_78 in
              (upd  _BoolP__BoolM_res_6 _jessie_80 _jessie_77 )))));
               begin
               (__retres :=
                (#"kstrtobool.jc" 110 37 49# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end
             else
              (if
              (#"kstrtobool.jc" 106 19 84#
              ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_4
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_71 =
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
               "expl:Integer cast"
               (Unsafe_enum__bool_of_Unsafe_int32.cast 
                (#"kstrtobool.jc" 116 59 71# "expl:Integer cast"
                (Unsafe_int32.of_int (0))) )) in
               (let _jessie_72 = res in
               (let _jessie_73 = (0) in
               (let _jessie_74 = _jessie_72 in
               (upd  _BoolP__BoolM_res_6 _jessie_74 _jessie_71 )))));
                begin
                (__retres :=
                 (#"kstrtobool.jc" 117 37 49# "expl:Integer cast"
                 (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
                end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_1 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_2 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres :=
         (#"kstrtobool.jc" 134 27 41# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_INVAL
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior INVAL" =
  fun
   (s_2 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_6 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_6_alloc_table : (alloc_table
   _BoolP)) (voidP_s_5_alloc_table : (alloc_table voidP))
   (voidP_s_5_tag_table : (tag_table voidP)) (charP_charM_s_5 : (memory voidP
   Int8.t)) 
   requires {
   ((((=) s_2 null) \/ (not (kstrtobool_fmt s_2 charP_charM_s_5))) /\
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_2 null) \/
    (((<=) (offset_min voidP_s_5_alloc_table s_2) (0)) /\
    (((>=) (offset_max voidP_s_5_alloc_table s_2) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((<=) (offset_min _BoolP_res_6_alloc_table res) (0)))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((>=) (offset_max _BoolP_res_6_alloc_table res) (0)))
   /\ (#"kstrtobool.jc" 44 12 435# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"kstrtobool.jc" 58 10 18# "expl:Assigns clause"
      (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table (old
      !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6 pset_empty))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
     "expl:Ensures clause"
     (Int32.(=) result (#"kstrtobool.jc" 59 31 48# "expl:Integer cast"
     (Int32.of_int (Int.(-_) (22)))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_2 (null  ) ) ))
       then
        begin
        (__retres :=
         (#"kstrtobool.jc" 80 29 43# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_6 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_5
          (shift_  s_2
           (Unsafe_int32.to_int 
            (#"kstrtobool.jc" 85 47 59# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_6
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_60 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"kstrtobool.jc" 89 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_61 = res in
         (let _jessie_62 = (0) in
         (let _jessie_63 = _jessie_61 in
         (upd  _BoolP__BoolM_res_6 _jessie_63 _jessie_60 )))));
          begin
          (__retres :=
           (#"kstrtobool.jc" 90 31 43# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else
         (if
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_54 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"kstrtobool.jc" 97 54 66# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_55 = res in
          (let _jessie_56 = (0) in
          (let _jessie_57 = _jessie_55 in
          (upd  _BoolP__BoolM_res_6 _jessie_57 _jessie_54 )))));
           begin
           (__retres :=
            (#"kstrtobool.jc" 98 32 44# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end
         else
          begin
          (if
          (#"kstrtobool.jc" 85 14 79#
          ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_6
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_4 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5
               (shift_  s_2
                (Unsafe_int32.to_int 
                 (#"kstrtobool.jc" 106 52 64# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"kstrtobool.jc" 106 19 84#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_4
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_48 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"kstrtobool.jc" 109 59 71# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) )) in
              (let _jessie_49 = res in
              (let _jessie_50 = (0) in
              (let _jessie_51 = _jessie_49 in
              (upd  _BoolP__BoolM_res_6 _jessie_51 _jessie_48 )))));
               begin
               (__retres :=
                (#"kstrtobool.jc" 110 37 49# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end
             else
              (if
              (#"kstrtobool.jc" 106 19 84#
              ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_4
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_42 =
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
               "expl:Integer cast"
               (Unsafe_enum__bool_of_Unsafe_int32.cast 
                (#"kstrtobool.jc" 116 59 71# "expl:Integer cast"
                (Unsafe_int32.of_int (0))) )) in
               (let _jessie_43 = res in
               (let _jessie_44 = (0) in
               (let _jessie_45 = _jessie_43 in
               (upd  _BoolP__BoolM_res_6 _jessie_45 _jessie_42 )))));
                begin
                (__retres :=
                 (#"kstrtobool.jc" 117 37 49# "expl:Integer cast"
                 (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
                end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_1 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_2 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres :=
         (#"kstrtobool.jc" 134 27 41# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_default
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, default behavior" =
  fun
   (s_2 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_6 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_6_alloc_table : (alloc_table
   _BoolP)) (voidP_s_5_alloc_table : (alloc_table voidP))
   (voidP_s_5_tag_table : (tag_table voidP)) (charP_charM_s_5 : (memory voidP
   Int8.t)) 
   requires {
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_2 null) \/
    (((<=) (offset_min voidP_s_5_alloc_table s_2) (0)) /\
    (((>=) (offset_max voidP_s_5_alloc_table s_2) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((<=) (offset_min _BoolP_res_6_alloc_table res) (0)))
   /\
   (#"kstrtobool.jc" 44 12 435#
   ((#"kstrtobool.jc" 44 12 435#
    ((>=) (offset_max _BoolP_res_6_alloc_table res) (0)))
   /\ (#"kstrtobool.jc" 44 12 435# ((=) true true)))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
      "expl:Ensures clause"
      ((Int32.(=) result (#"kstrtobool.jc" 52 42 54# "expl:Integer cast"
       (Int32.of_int (0))))
      \/
      (Int32.(=) result (#"kstrtobool.jc" 53 43 60# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22)))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
     "expl:Ensures clause"
     ((Int32.(=) result (#"kstrtobool.jc" 54 43 60# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22))))) -> ((=) res res))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"kstrtobool.jc" 69 10 202# "expl:Behavior disjointness check"
    (not
    ((((=) s_2 null) \/ (not (kstrtobool_fmt s_2 charP_charM_s_5))) /\
    (((<>) s_2 null) /\ (kstrtobool_fmt s_2 charP_charM_s_5))))) });
     (check {
     (#"kstrtobool.jc" 73 10 193# "expl:Behavior completeness check"
     ((((<>) s_2 null) /\ (kstrtobool_fmt s_2 charP_charM_s_5)) \/
     (((=) s_2 null) \/ (not (kstrtobool_fmt s_2 charP_charM_s_5))))) });
     (let __retres = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_2 (null  ) ) ))
       then
        begin
        (__retres :=
         (#"kstrtobool.jc" 80 29 43# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_6 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_5
          (shift_  s_2
           (Unsafe_int32.to_int 
            (#"kstrtobool.jc" 85 47 59# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"kstrtobool.jc" 85 14 79#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_6
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_31 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"kstrtobool.jc" 89 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_32 = res in
         (let _jessie_33 = (0) in
         (let _jessie_34 = _jessie_32 in
         (upd  _BoolP__BoolM_res_6 _jessie_34 _jessie_31 )))));
          begin
          (__retres :=
           (#"kstrtobool.jc" 90 31 43# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else
         (if
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"kstrtobool.jc" 85 14 79#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_6
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_25 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"kstrtobool.jc" 97 54 66# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_26 = res in
          (let _jessie_27 = (0) in
          (let _jessie_28 = _jessie_26 in
          (upd  _BoolP__BoolM_res_6 _jessie_28 _jessie_25 )))));
           begin
           (__retres :=
            (#"kstrtobool.jc" 98 32 44# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end
         else
          begin
          (if
          (#"kstrtobool.jc" 85 14 79#
          ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_6
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_6
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_4 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5
               (shift_  s_2
                (Unsafe_int32.to_int 
                 (#"kstrtobool.jc" 106 52 64# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"kstrtobool.jc" 106 19 84#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_4
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_19 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"kstrtobool.jc" 109 59 71# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) )) in
              (let _jessie_20 = res in
              (let _jessie_21 = (0) in
              (let _jessie_22 = _jessie_20 in
              (upd  _BoolP__BoolM_res_6 _jessie_22 _jessie_19 )))));
               begin
               (__retres :=
                (#"kstrtobool.jc" 110 37 49# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end
             else
              (if
              (#"kstrtobool.jc" 106 19 84#
              ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_4
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_4
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_13 =
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
               "expl:Integer cast"
               (Unsafe_enum__bool_of_Unsafe_int32.cast 
                (#"kstrtobool.jc" 116 59 71# "expl:Integer cast"
                (Unsafe_int32.of_int (0))) )) in
               (let _jessie_14 = res in
               (let _jessie_15 = (0) in
               (let _jessie_16 = _jessie_14 in
               (upd  _BoolP__BoolM_res_6 _jessie_16 _jessie_13 )))));
                begin
                (__retres :=
                 (#"kstrtobool.jc" 117 37 49# "expl:Integer cast"
                 (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
                end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_1 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_2 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres :=
         (#"kstrtobool.jc" 134 27 41# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end);
     absurd  end with Return -> !return end)
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct__BoolP

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function _BoolP_tag  : (tag_id _BoolP)
  
  axiom U__BoolP_parenttag_bottom :
  (parenttag _BoolP_tag bottom_tag)
  
  axiom U__BoolP_is_final :
  (forall _BoolP_tag_table : (tag_table _BoolP).
   (forall p : (pointer _BoolP).
    ((instanceof _BoolP_tag_table p _BoolP_tag) ->
     ((=) (typeof _BoolP_tag_table p) _BoolP_tag))))
  
  predicate frame_tag_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_tag_table : (tag_table _BoolP)) (_BoolP_tag_table : (tag_table
  _BoolP))
  =
     ((tag_extends old__BoolP_tag_table _BoolP_tag_table) /\
     (alloc_tag_block old__BoolP_tag_table _BoolP_tag_table p))
  
  predicate frame_free_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((free_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (free_block old__BoolP_alloc_table _BoolP_alloc_table p))
  
  predicate frame_alloc_struct__BoolP (p : (pointer _BoolP)) (n : int)
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((alloc_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (alloc_block old__BoolP_alloc_table _BoolP_alloc_table p n))
  
  predicate fresh_tag_struct__BoolP (p : (pointer _BoolP)) (_BoolP_tag_table
  : (tag_table _BoolP)) = (tag_fresh _BoolP_tag_table p)
  
  predicate fresh_alloc_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = (alloc_fresh _BoolP_alloc_table p)
  
  predicate container_of_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate container_of_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate typeof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = ((=) (typeof _BoolP_tag_table p) _BoolP_tag)
  
  predicate typeof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r : int)
  (_BoolP_tag_table : (tag_table _BoolP))
  =
     (((=) (typeof _BoolP_tag_table p) _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof _BoolP_tag_table (shift p i)) _BoolP_tag))))
  
  predicate instanceof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = (instanceof _BoolP_tag_table p _BoolP_tag)
  
  predicate instanceof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP))
  =
     ((instanceof _BoolP_tag_table p _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof _BoolP_tag_table (shift p i) _BoolP_tag))))
  
  predicate right_valid_struct__BoolP (p : (pointer _BoolP)) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((>=) (offset_max _BoolP_alloc_table p) b)
  
  predicate left_valid_struct__BoolP (p : (pointer _BoolP)) (a : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((<=) (offset_min _BoolP_alloc_table p) a)
  
  predicate valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((<=) (offset_min _BoolP_alloc_table p) a) /\
     ((>=) (offset_max _BoolP_alloc_table p) b))
  
  predicate strict_valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b :
  int) (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((=) (offset_min _BoolP_alloc_table p) a) /\
     ((=) (offset_max _BoolP_alloc_table p) b))
  
  axiom U__BoolP_int : ((=) (int_of_tag _BoolP_tag) (4))
  
end

module Struct__BoolP_unsafe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !_BoolP_alloc_table p)) }
    writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP_requires
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { ((>=) n (0)) } writes { _BoolP_alloc_table, _BoolP_tag_table
     }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
end

module Struct__BoolP_safe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires { true } writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
  val allocate_singleton_struct__BoolP
  (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
   (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
    requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
    ensures {
      ((strict_valid_struct__BoolP result (0) (0) !_BoolP_alloc_table) /\
      ((frame_alloc_struct__BoolP result (1) (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\
      ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
       !_BoolP_tag_table)
      /\
      ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
      ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
      ((typeof_singleton_struct__BoolP result !_BoolP_tag_table) /\
      (container_of_singleton_struct__BoolP result !_BoolP_tag_table))))))) }
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

theory Enum__bool_of_Uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint8.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

theory Enum__bool_of_Uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint64.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

theory Enum__bool_of_Uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint32.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

theory Enum__bool_of_Uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint16.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

theory Enum__bool_of_Int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Enum__bool.t
  = (Enum__bool.of_int (Int8.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

theory Enum__bool_of_Int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Enum__bool.t
  = (Enum__bool.of_int (Int64.to_int n))
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

theory Enum__bool_of_Int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Enum__bool.t
  = (Enum__bool.of_int (Int32.to_int n))
  
end

module Safe_enum__bool_of_Safe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

theory Enum__bool_of_Int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Enum__bool.t
  = (Enum__bool.of_int (Int16.to_int n))
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint8_of_Safe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint8_of_Enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint8.t
  = (Uint8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint64_of_Safe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint64_of_Enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint64.t
  = (Uint64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint32_of_Safe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint32_of_Enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint32.t
  = (Uint32.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint16_of_Safe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint16_of_Enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint16.t
  = (Uint16.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_int8_of_Safe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int8_of_Enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int8.t
  = (Int8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_int64_of_Safe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int64_of_Enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int64.t
  = (Int64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Safe_int32_of_Safe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int32_of_Enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int32.t
  = (Int32.of_int (Enum__bool.to_int n))
  
end

module Safe_int16_of_Safe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int16_of_Enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int16.t
  = (Int16.of_int (Enum__bool.to_int n))
  
end

module Function_kstrtobool

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_2 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_6 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_5_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_6_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_5_tag_table : (tag_table voidP)) 
        (charP_charM_s_5 : (memory voidP Int8.t)) : Int32.t
         requires { true } reads { _BoolP__BoolM_res_6 } writes {
         _BoolP__BoolM_res_6 }
         ensures {
           (((((<>) s_2 null) /\ (kstrtobool_fmt s_2 charP_charM_s_5)) ->
             ((#"kstrtobool.jc" 62 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table
              (old !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6
              (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_2 charP_charM_s_5) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
               (#"kstrtobool.jc" 64 55 67# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_2 charP_charM_s_5) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
               (#"kstrtobool.jc" 66 57 69# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"kstrtobool.jc" 67 44 56#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_2 null) \/ (not (kstrtobool_fmt s_2 charP_charM_s_5)))
             ->
             ((#"kstrtobool.jc" 58 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table
              (old !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6 pset_empty))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"kstrtobool.jc" 59 31 48#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"kstrtobool.jc" 52 42 54#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"kstrtobool.jc" 53 43 60# "expl:Integer cast"
            (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"kstrtobool.jc" 54 43 60# "expl:Integer cast"
            (Int32.of_int (Int.(-_) (22))))) -> ((=) res res)))))))) }
  
end

module Function_kstrtobool_safe

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_2 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_6 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_5_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_6_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_5_tag_table : (tag_table voidP)) 
        (charP_charM_s_5 : (memory voidP Int8.t)) : Int32.t
         requires {
           ("expl:Internal"
           (#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
            "expl:Requires clause"
            (((=) s_2 null) \/
            (((<=) (offset_min voidP_s_5_alloc_table s_2) (0)) /\
            (((>=) (offset_max voidP_s_5_alloc_table s_2) (1)) /\
            (((=) true true) /\ ((=) true true))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
           "expl:Requires clause"
           (#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
           ((#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
            ((<=) (offset_min _BoolP_res_6_alloc_table res) (0)))
           /\
           (#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
           ((#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
            ((>=) (offset_max _BoolP_res_6_alloc_table res) (0)))
           /\
           (#"kstrtobool.jc" 44 12 435# "expl:Requires clause"
           ((=) true true)))))))))) }
         reads { _BoolP__BoolM_res_6 } writes { _BoolP__BoolM_res_6 }
         ensures {
           (((((<>) s_2 null) /\ (kstrtobool_fmt s_2 charP_charM_s_5)) ->
             ((#"kstrtobool.jc" 62 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table
              (old !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6
              (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_2 charP_charM_s_5) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
               (#"kstrtobool.jc" 64 55 67# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_2 charP_charM_s_5) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_6 res)
               (#"kstrtobool.jc" 66 57 69# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"kstrtobool.jc" 67 44 56#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_2 null) \/ (not (kstrtobool_fmt s_2 charP_charM_s_5)))
             ->
             ((#"kstrtobool.jc" 58 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_6_alloc_table _BoolP_res_6_alloc_table
              (old !_BoolP__BoolM_res_6) !_BoolP__BoolM_res_6 pset_empty))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"kstrtobool.jc" 59 31 48#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"kstrtobool.jc" 52 42 54#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"kstrtobool.jc" 53 43 60# "expl:Integer cast"
            (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"kstrtobool.jc" 54 43 60# "expl:Integer cast"
            (Int32.of_int (Int.(-_) (22))))) -> ((=) res res)))))))) }
  
end
