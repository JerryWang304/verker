
axiomatic Padding {

  logic type padding
  
}

type _bool = 0..1

axiomatic Jessie_memory_reinterpretation_predicates {

  predicate uint8_as_uint8(uint8 d0, uint8 a0) =
  ((d0 == a0) && \uint8_as_uint8(d0, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate uint8_as_int8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \uint8_as_int8(d0, a0))
   
  predicate int8_as_uint8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \int8_as_uint8(d0, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = voidP with {
  uint8 unsigned_charM: 8;
}

tag char_xP = {
  charP[..] char_xM: 64;
}

type char_xP = [char_xP]

tag _BoolP = {
  _bool _BoolM: 8;
}

type _BoolP = [_BoolP]

tag unsigned_intP = {
  uint32 unsigned_intM: 32;
}

type unsigned_intP = [unsigned_intP]

axiomatic CheckBytes8 {

  logic unsigned_charP[..] check_bytes8{L}(unsigned_charP[..] start,
                                           uint8 value, integer bytes) =
  \at((if (bytes == 0) then null else (if (start.unsigned_charM != value) then start else check_bytes8{L}(
                                      (start + 1), value, (bytes - 1)))),L)
   
  lemma check_bytes8_shift1{L} :
  (_C_1 : (\forall unsigned_charP[..] start_0;
            (\forall uint8 value_0;
              (\forall integer bytes_0;
                ((((bytes_0 > 0) &&
                    \at((if (\at(0,L) <= \at((bytes_0 - 1),L)) then (((\offset_min(
                                                                    \at(start_0,L)) <=
                                                                    \at(0,L)) &&
                                                                    (\offset_max(
                                                                    \at(start_0,L)) >=
                                                                    \at(
                                                                    (bytes_0 -
                                                                    1),L))) &&
                                                                    (\forall integer __framac_tmp1;
                                                                    (((\at(0,L) <=
                                                                    __framac_tmp1) &&
                                                                    (__framac_tmp1 <=
                                                                    \at(
                                                                    (bytes_0 -
                                                                    1),L))) ==>
                                                                    true))) else true),L)) &&
                   (start_0.unsigned_charM == value_0)) ==>
                  (check_bytes8{L}(start_0, value_0, bytes_0) ==
                    check_bytes8{L}((start_0 + 1), value_0, (bytes_0 - 1))))))))
   
  lemma check_bytes8_stop{L} :
  (_C_2 : (\forall unsigned_charP[..] start_1;
            (\forall uint8 value_1;
              (\forall integer bytes_1;
                ((((bytes_1 > 0) &&
                    \at((if (\at(0,L) <= \at((bytes_1 - 1),L)) then (((\offset_min(
                                                                    \at(start_1,L)) <=
                                                                    \at(0,L)) &&
                                                                    (\offset_max(
                                                                    \at(start_1,L)) >=
                                                                    \at(
                                                                    (bytes_1 -
                                                                    1),L))) &&
                                                                    (\forall integer __framac_tmp2;
                                                                    (((\at(0,L) <=
                                                                    __framac_tmp2) &&
                                                                    (__framac_tmp2 <=
                                                                    \at(
                                                                    (bytes_1 -
                                                                    1),L))) ==>
                                                                    true))) else true),L)) &&
                   (start_1.unsigned_charM != value_1)) ==>
                  (check_bytes8{L}(start_1, value_1, bytes_1) == start_1))))))
   
  lemma check_bytes8_stop_bytes_zero{L} :
  (_C_3 : (\forall unsigned_charP[..] start_2;
            (\forall uint8 value_2;
              (check_bytes8{L}(start_2, value_2, 0) == null))))
  
}

voidP[..] check_bytes8(unsigned_charP[..] start, uint8 value, uint32 bytes)
  requires (_C_50 : \at((if (\at(0,Here) <=
                              \at(((bytes :> integer) - 1),Here)) then 
                        (((\offset_min(\at(start,Here)) <= \at(0,Here)) &&
                           (\offset_max(\at(start,Here)) >=
                             \at(((bytes :> integer) - 1),Here))) &&
                          (\forall integer __framac_tmp3;
                            (((\at(0,Here) <= __framac_tmp3) &&
                               (__framac_tmp3 <=
                                 \at(((bytes :> integer) - 1),Here))) ==>
                              true))) else true),Here));
behavior default:
  assigns \nothing;
  ensures (_C_35 : (\result ==
                     check_bytes8{Here}(\at(start,Old), \at(value,Old),
                                        (\at(bytes,Old) :> integer))));
behavior found:
  assumes (\exists unsigned_charP[..] i_3;
            ((((\base_block(start) == \base_block(i_3)) &&
                ((start - i_3) <= 0)) &&
               ((\base_block(i_3) ==
                  \base_block((start + (bytes :> integer)))) &&
                 ((i_3 - (start + (bytes :> integer))) < 0))) &&
              (i_3.unsigned_charM != value)));
  ensures (_C_36 : ((((_C_39 : (\base_block(\at(start,Old)) ==
                                 \base_block((\result :> unsigned_charP[..])))) &&
                       (_C_40 : ((\at(start,Old) -
                                   (\result :> unsigned_charP[..])) <=
                                  0))) &&
                      ((_C_42 : (\base_block((\result :> unsigned_charP[..])) ==
                                  \base_block((\at(start,Old) +
                                                (\at(bytes,Old) :> integer))))) &&
                        (_C_43 : (((\result :> unsigned_charP[..]) -
                                    (\at(start,Old) +
                                      (\at(bytes,Old) :> integer))) <
                                   0)))) &&
                     ((_C_45 : ((\result :> unsigned_charP[..]).unsigned_charM !=
                                 \at(value,Old))) &&
                       (_C_46 : (\forall unsigned_charP[..] j_0;
                                  ((((\base_block(\at(start,Old)) ==
                                       \base_block(j_0)) &&
                                      ((\at(start,Old) - j_0) <= 0)) &&
                                     ((\base_block(j_0) ==
                                        \base_block((\result :> unsigned_charP[..]))) &&
                                       ((j_0 -
                                          (\result :> unsigned_charP[..])) <
                                         0))) ==>
                                    (j_0.unsigned_charM == \at(value,Old))))))));
behavior not_exists:
  assumes (\forall unsigned_charP[..] i_2;
            ((((\base_block(start) == \base_block(i_2)) &&
                ((start - i_2) <= 0)) &&
               ((\base_block(i_2) ==
                  \base_block((start + (bytes :> integer)))) &&
                 ((i_2 - (start + (bytes :> integer))) < 0))) ==>
              (i_2.unsigned_charM == value)));
  ensures (_C_47 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists unsigned_charP[..] i_3;
                                      ((((\base_block(start) ==
                                           \base_block(i_3)) &&
                                          ((start - i_3) <= 0)) &&
                                         ((\base_block(i_3) ==
                                            \base_block((start +
                                                          (bytes :> integer)))) &&
                                           ((i_3 -
                                              (start + (bytes :> integer))) <
                                             0))) &&
                                        (i_3.unsigned_charM != value))) &&
                                     (\forall unsigned_charP[..] i_2;
                                       ((((\base_block(start) ==
                                            \base_block(i_2)) &&
                                           ((start - i_2) <= 0)) &&
                                          ((\base_block(i_2) ==
                                             \base_block((start +
                                                           (bytes :> integer)))) &&
                                            ((i_2 -
                                               (start + (bytes :> integer))) <
                                              0))) ==>
                                         (i_2.unsigned_charM == value)))))));
   
   (check (complete_behaviors : ((\forall unsigned_charP[..] i_2;
                                   ((((\base_block(start) ==
                                        \base_block(i_2)) &&
                                       ((start - i_2) <= 0)) &&
                                      ((\base_block(i_2) ==
                                         \base_block((start +
                                                       (bytes :> integer)))) &&
                                        ((i_2 - (start + (bytes :> integer))) <
                                          0))) ==>
                                     (i_2.unsigned_charM == value))) ||
                                  (\exists unsigned_charP[..] i_3;
                                    ((((\base_block(start) ==
                                         \base_block(i_3)) &&
                                        ((start - i_3) <= 0)) &&
                                       ((\base_block(i_3) ==
                                          \base_block((start +
                                                        (bytes :> integer)))) &&
                                         ((i_3 -
                                            (start + (bytes :> integer))) <
                                           0))) &&
                                      (i_3.unsigned_charM != value))))));
   
   (var unsigned_charP[..] ostart);
   
   (var uint32 obytes);
   
   (var voidP[..] __retres);
   
   {  (_C_4 : (ostart = start));
      (_C_5 : (obytes = bytes));
      
      loop 
      behavior default:
        invariant (_C_17 : ((_C_18 : ((0 :> uint32) <= bytes)) &&
                             (_C_19 : (bytes <= obytes))));
      behavior default:
        invariant (_C_10 : (((_C_12 : (\base_block(ostart) ==
                                        \base_block(start))) &&
                              (_C_13 : ((ostart - start) <= 0))) &&
                             ((_C_15 : (\base_block(start) ==
                                         \base_block((ostart +
                                                       (obytes :> integer))))) &&
                               (_C_16 : ((start -
                                           (ostart + (obytes :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_9 : ((start - ostart) ==
                            ((obytes :> integer) - (bytes :> integer))));
      behavior default:
        invariant (_C_8 : (\forall unsigned_charP[..] i_1;
                            ((((\base_block(ostart) == \base_block(i_1)) &&
                                ((ostart - i_1) <= 0)) &&
                               ((\base_block(i_1) == \base_block(start)) &&
                                 ((i_1 - start) < 0))) ==>
                              (i_1.unsigned_charM == value))));
      behavior default:
        invariant (_C_7 : (check_bytes8{Here}(ostart, value,
                                              (obytes :> integer)) ==
                            check_bytes8{Here}(start, value,
                                               (bytes :> integer))));
      variant (_C_6 : bytes);
      while (true)
      {  
         {  (if (_C_20 : ((bytes :> uint32) != (0 :> uint32))) then () else 
            (goto while_0_break));
            
            {  (if (_C_26 : ((_C_25 : ((_C_24 : start.unsigned_charM) :> int32)) !=
                              (_C_23 : (value :> int32)))) then 
               {  (_C_22 : (__retres = (_C_21 : (start :> voidP[..]))));
                  
                  (goto return_label)
               } else ());
               (_C_28 : (start = (_C_27 : (start + (1 :> int32)))));
               (_C_31 : (bytes = (_C_30 : ((_C_29 : (bytes - (1 :> uint32))) :> uint32))))
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_32 : (jessie : (bytes == (0 :> uint32)))));
         ()
      };
      
      {  
         (assert for default: (_C_33 : (jessie : (check_bytes8{Here}(
                                                   ostart, value,
                                                   (obytes :> integer)) ==
                                                   null))));
         ()
      };
      (_C_34 : (__retres = null));
      (return_label : 
      (return __retres))
   }
}

voidP[..] memchr(voidP[..] s_1, int32 c_11, uint64 n_1)
  requires ((_C_99 : (s_1 <: unsigned_charP)) &&
             (_C_100 : \at((if (\at(0,Here) <=
                                 \at(((n_1 :> integer) - 1),Here)) then 
                           (((\offset_min(\at((s_1 :> unsigned_charP[..]),Here)) <=
                               \at(0,Here)) &&
                              (\offset_max(\at((s_1 :> unsigned_charP[..]),Here)) >=
                                \at(((n_1 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp4;
                               (((\at(0,Here) <= __framac_tmp4) &&
                                  (__framac_tmp4 <=
                                    \at(((n_1 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)));
behavior default:
  assigns \nothing;
  ensures true;
behavior found:
  assumes (\exists unsigned_charP[..] p_0;
            ((((\base_block((s_1 :> unsigned_charP[..])) == \base_block(p_0)) &&
                (((s_1 :> unsigned_charP[..]) - p_0) <= 0)) &&
               ((\base_block(p_0) ==
                  \base_block(((s_1 :> unsigned_charP[..]) +
                                (n_1 :> integer)))) &&
                 ((p_0 - ((s_1 :> unsigned_charP[..]) + (n_1 :> integer))) <
                   0))) &&
              (p_0.unsigned_charM == (c_11 :%> uint8))));
  ensures (_C_85 : ((((_C_88 : (\base_block(\at(s_1,Old)) ==
                                 \base_block(\result))) &&
                       (_C_89 : ((\at(s_1,Old) - \result) <= 0))) &&
                      ((_C_91 : (\base_block(\result) ==
                                  \base_block((\at(s_1,Old) +
                                                (\at(n_1,Old) :> integer))))) &&
                        (_C_92 : ((\result -
                                    (\at(s_1,Old) +
                                      (\at(n_1,Old) :> integer))) <=
                                   0)))) &&
                     ((_C_94 : (\forall unsigned_charP[..] p_1;
                                 ((((\base_block((\at(s_1,Old) :> unsigned_charP[..])) ==
                                      \base_block(p_1)) &&
                                     (((\at(s_1,Old) :> unsigned_charP[..]) -
                                        p_1) <=
                                       0)) &&
                                    ((\base_block(p_1) ==
                                       \base_block((\result :> unsigned_charP[..]))) &&
                                      ((p_1 -
                                         (\result :> unsigned_charP[..])) <
                                        0))) ==>
                                   (p_1.unsigned_charM !=
                                     (\at(c_11,Old) :%> uint8))))) &&
                       (_C_95 : ((\result :> unsigned_charP[..]).unsigned_charM ==
                                  (\at(c_11,Old) :%> uint8))))));
behavior not_exists:
  assumes (\forall unsigned_charP[..] p;
            ((((\base_block((s_1 :> unsigned_charP[..])) == \base_block(p)) &&
                (((s_1 :> unsigned_charP[..]) - p) <= 0)) &&
               ((\base_block(p) ==
                  \base_block(((s_1 :> unsigned_charP[..]) +
                                (n_1 :> integer)))) &&
                 ((p - ((s_1 :> unsigned_charP[..]) + (n_1 :> integer))) < 0))) ==>
              (p.unsigned_charM != (c_11 :%> uint8))));
  ensures (_C_96 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists unsigned_charP[..] p_0;
                                      ((((\base_block((s_1 :> unsigned_charP[..])) ==
                                           \base_block(p_0)) &&
                                          (((s_1 :> unsigned_charP[..]) -
                                             p_0) <=
                                            0)) &&
                                         ((\base_block(p_0) ==
                                            \base_block(((s_1 :> unsigned_charP[..]) +
                                                          (n_1 :> integer)))) &&
                                           ((p_0 -
                                              ((s_1 :> unsigned_charP[..]) +
                                                (n_1 :> integer))) <
                                             0))) &&
                                        (p_0.unsigned_charM ==
                                          (c_11 :%> uint8)))) &&
                                     (\forall unsigned_charP[..] p;
                                       ((((\base_block((s_1 :> unsigned_charP[..])) ==
                                            \base_block(p)) &&
                                           (((s_1 :> unsigned_charP[..]) - p) <=
                                             0)) &&
                                          ((\base_block(p) ==
                                             \base_block(((s_1 :> unsigned_charP[..]) +
                                                           (n_1 :> integer)))) &&
                                            ((p -
                                               ((s_1 :> unsigned_charP[..]) +
                                                 (n_1 :> integer))) <
                                              0))) ==>
                                         (p.unsigned_charM !=
                                           (c_11 :%> uint8))))))));
   
   (check (complete_behaviors : ((\forall unsigned_charP[..] p;
                                   ((((\base_block((s_1 :> unsigned_charP[..])) ==
                                        \base_block(p)) &&
                                       (((s_1 :> unsigned_charP[..]) - p) <=
                                         0)) &&
                                      ((\base_block(p) ==
                                         \base_block(((s_1 :> unsigned_charP[..]) +
                                                       (n_1 :> integer)))) &&
                                        ((p -
                                           ((s_1 :> unsigned_charP[..]) +
                                             (n_1 :> integer))) <
                                          0))) ==>
                                     (p.unsigned_charM != (c_11 :%> uint8)))) ||
                                  (\exists unsigned_charP[..] p_0;
                                    ((((\base_block((s_1 :> unsigned_charP[..])) ==
                                         \base_block(p_0)) &&
                                        (((s_1 :> unsigned_charP[..]) - p_0) <=
                                          0)) &&
                                       ((\base_block(p_0) ==
                                          \base_block(((s_1 :> unsigned_charP[..]) +
                                                        (n_1 :> integer)))) &&
                                         ((p_0 -
                                            ((s_1 :> unsigned_charP[..]) +
                                              (n_1 :> integer))) <
                                           0))) &&
                                      (p_0.unsigned_charM ==
                                        (c_11 :%> uint8)))))));
   
   (var unsigned_charP[..] p);
   
   (var unsigned_charP[..] tmp);
   
   (var uint64 tmp_0);
   
   (var voidP[..] __retres_0);
   
   {  (_C_52 : (p = (_C_51 : (s_1 :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_63 : ((_C_64 : ((0 :> uint64) <= n_1)) &&
                             (_C_65 : (n_1 <= \at(n_1,Pre)))));
      behavior default:
        invariant (_C_56 : (((_C_58 : (\base_block((s_1 :> unsigned_charP[..])) ==
                                        \base_block(p))) &&
                              (_C_59 : (((s_1 :> unsigned_charP[..]) - p) <=
                                         0))) &&
                             ((_C_61 : (\base_block(p) ==
                                         \base_block(((s_1 :> unsigned_charP[..]) +
                                                       (\at(n_1,Pre) :> integer))))) &&
                               (_C_62 : ((p -
                                           ((s_1 :> unsigned_charP[..]) +
                                             (\at(n_1,Pre) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_55 : ((p - (s_1 :> unsigned_charP[..])) ==
                             ((\at(n_1,Pre) :> integer) - (n_1 :> integer))));
      behavior default:
        invariant (_C_54 : (\forall unsigned_charP[..] k_1;
                             ((((\base_block((s_1 :> unsigned_charP[..])) ==
                                  \base_block(k_1)) &&
                                 (((s_1 :> unsigned_charP[..]) - k_1) <= 0)) &&
                                ((\base_block(k_1) == \base_block(p)) &&
                                  ((k_1 - p) < 0))) ==>
                               (k_1.unsigned_charM != (c_11 :%> uint8)))));
      variant (_C_53 : n_1);
      while (true)
      {  
         {  
            {  (_C_66 : (tmp_0 = n_1));
               (_C_69 : (n_1 = (_C_68 : ((_C_67 : (n_1 -% (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_71 : (tmp_0 != (_C_70 : ((0 :> int32) :> uint64)))) then () else 
            (goto while_0_break));
            
            {  
               {  (_C_72 : (tmp = p));
                  (_C_74 : (p = (_C_73 : (p + (1 :> int32)))));
                  ()
               };
               (if (_C_82 : ((_C_81 : ((_C_80 : (c_11 :%> uint8)) :> int32)) ==
                              (_C_79 : ((_C_78 : tmp.unsigned_charM) :> int32)))) then 
               {  (_C_77 : (__retres_0 = (_C_76 : ((_C_75 : (p -
                                                              (1 :> int32))) :> voidP[..]))));
                  
                  (goto return_label)
               } else ())
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_83 : (jessie : (n_1 == ((- 1) :%> uint64)))));
         ()
      };
      (_C_84 : (__retres_0 = null));
      (return_label : 
      (return __retres_0))
   }
}

int32 memcmp(voidP[..] cs, voidP[..] ct, uint64 count)
  requires ((_C_152 : (cs <: unsigned_charP)) &&
             ((_C_153 : (ct <: unsigned_charP)) &&
               ((_C_154 : \at((if (\at(0,Here) <=
                                    \at(((count :> integer) - 1),Here)) then 
                              (((\offset_min(\at((cs :> unsigned_charP[..]),Here)) <=
                                  \at(0,Here)) &&
                                 (\offset_max(\at((cs :> unsigned_charP[..]),Here)) >=
                                   \at(((count :> integer) - 1),Here))) &&
                                (\forall integer __framac_tmp5;
                                  (((\at(0,Here) <= __framac_tmp5) &&
                                     (__framac_tmp5 <=
                                       \at(((count :> integer) - 1),Here))) ==>
                                    true))) else true),Here)) &&
                 ((_C_155 : \at((if (\at(0,Here) <=
                                      \at(((count :> integer) - 1),Here)) then 
                                (((\offset_min(\at((ct :> unsigned_charP[..]),Here)) <=
                                    \at(0,Here)) &&
                                   (\offset_max(\at((ct :> unsigned_charP[..]),Here)) >=
                                     \at(((count :> integer) - 1),Here))) &&
                                  (\forall integer __framac_tmp6;
                                    (((\at(0,Here) <= __framac_tmp6) &&
                                       (__framac_tmp6 <=
                                         \at(((count :> integer) - 1),Here))) ==>
                                      true))) else true),Here)) &&
                   (_C_156 : (((\base_block((cs :> unsigned_charP[..])) ==
                                 \base_block((ct :> unsigned_charP[..]))) &&
                                (! (\base_block((cs :> unsigned_charP[..])) !=
                                     \base_block((ct :> unsigned_charP[..]))))) ||
                               ((\base_block((cs :> unsigned_charP[..])) !=
                                  \base_block((ct :> unsigned_charP[..]))) &&
                                 (! (\base_block((cs :> unsigned_charP[..])) ==
                                      \base_block((ct :> unsigned_charP[..])))))))))));
behavior default:
  assigns \nothing;
  ensures true;
behavior equal:
  assumes (\forall integer i_7;
            (((0 <= i_7) && (i_7 < (count :> integer))) ==>
              (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                ((ct :> unsigned_charP[..]) + i_7).unsigned_charM)));
  ensures (_C_148 : (\result == (0 :> int32)));
behavior diff:
  assumes (\exists integer i_5;
            (((0 <= i_5) && (i_5 < (count :> integer))) &&
              (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                ((ct :> unsigned_charP[..]) + i_5).unsigned_charM)));
  ensures (_C_149 : (\exists integer i_6;
                      (((((0 <= i_6) && (i_6 < (\at(count,Old) :> integer))) &&
                          (\forall integer j_1;
                            (((0 <= j_1) && (j_1 < i_6)) ==>
                              (((\at(cs,Old) :> unsigned_charP[..]) + j_1).unsigned_charM ==
                                ((\at(ct,Old) :> unsigned_charP[..]) + j_1).unsigned_charM)))) &&
                         (((\at(cs,Old) :> unsigned_charP[..]) + i_6).unsigned_charM !=
                           ((\at(ct,Old) :> unsigned_charP[..]) + i_6).unsigned_charM)) &&
                        ((\result :> integer) ==
                          ((((\at(cs,Old) :> unsigned_charP[..]) + i_6).unsigned_charM :> integer) -
                            (((\at(ct,Old) :> unsigned_charP[..]) + i_6).unsigned_charM :> integer))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_7;
                                      (((0 <= i_7) &&
                                         (i_7 < (count :> integer))) ==>
                                        (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                                          ((ct :> unsigned_charP[..]) + i_7).unsigned_charM))) &&
                                     (\exists integer i_5;
                                       (((0 <= i_5) &&
                                          (i_5 < (count :> integer))) &&
                                         (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                                           ((ct :> unsigned_charP[..]) + i_5).unsigned_charM)))))));
   
   (check (complete_behaviors : ((\exists integer i_5;
                                   (((0 <= i_5) &&
                                      (i_5 < (count :> integer))) &&
                                     (((cs :> unsigned_charP[..]) + i_5).unsigned_charM !=
                                       ((ct :> unsigned_charP[..]) + i_5).unsigned_charM))) ||
                                  (\forall integer i_7;
                                    (((0 <= i_7) &&
                                       (i_7 < (count :> integer))) ==>
                                      (((cs :> unsigned_charP[..]) + i_7).unsigned_charM ==
                                        ((ct :> unsigned_charP[..]) + i_7).unsigned_charM))))));
   
   (var unsigned_charP[..] su1);
   
   (var unsigned_charP[..] su2);
   
   (var int32 res_0);
   
   (var int32 __retres_1);
   
   {  (_C_101 : (res_0 = (0 :> int32)));
      (_C_103 : (su1 = (_C_102 : (cs :> unsigned_charP[..]))));
      (_C_105 : (su2 = (_C_104 : (ct :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_126 : ((_C_127 : ((0 :> uint64) <= count)) &&
                              (_C_128 : (count <= \at(count,Pre)))));
      behavior default:
        invariant (_C_119 : (((_C_121 : (\base_block((cs :> unsigned_charP[..])) ==
                                          \base_block(su1))) &&
                               (_C_122 : (((cs :> unsigned_charP[..]) - su1) <=
                                           0))) &&
                              ((_C_124 : (\base_block(su1) ==
                                           \base_block(((cs :> unsigned_charP[..]) +
                                                         (\at(count,Pre) :> integer))))) &&
                                (_C_125 : ((su1 -
                                             ((cs :> unsigned_charP[..]) +
                                               (\at(count,Pre) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_112 : (((_C_114 : (\base_block((ct :> unsigned_charP[..])) ==
                                          \base_block(su2))) &&
                               (_C_115 : (((ct :> unsigned_charP[..]) - su2) <=
                                           0))) &&
                              ((_C_117 : (\base_block(su2) ==
                                           \base_block(((ct :> unsigned_charP[..]) +
                                                         (\at(count,Pre) :> integer))))) &&
                                (_C_118 : ((su2 -
                                             ((ct :> unsigned_charP[..]) +
                                               (\at(count,Pre) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_109 : ((_C_110 : ((su1 - (cs :> unsigned_charP[..])) ==
                                         (su2 - (ct :> unsigned_charP[..])))) &&
                              (_C_111 : ((su2 - (ct :> unsigned_charP[..])) ==
                                          ((\at(count,Pre) :> integer) -
                                            (count :> integer))))));
      behavior default:
        invariant (_C_108 : (\forall integer i_4;
                              (((0 <= i_4) &&
                                 (i_4 <
                                   ((\at(count,Pre) :> integer) -
                                     (count :> integer)))) ==>
                                (((cs :> unsigned_charP[..]) + i_4).unsigned_charM ==
                                  ((ct :> unsigned_charP[..]) + i_4).unsigned_charM))));
      behavior default:
        invariant (_C_107 : (res_0 == (0 :> int32)));
      behavior default:
        
        assigns res_0;
      variant (_C_106 : count);
      while (true)
      {  
         {  (if (_C_130 : ((_C_129 : ((0 :> int32) :> uint64)) < count)) then () else 
            (goto while_0_break));
            (_C_137 : (res_0 = (_C_136 : ((_C_135 : ((_C_134 : ((_C_133 : su1.unsigned_charM) :> int32)) -
                                                      (_C_132 : ((_C_131 : su2.unsigned_charM) :> int32)))) :> int32))));
            (if (_C_138 : (res_0 != (0 :> int32))) then 
            (goto while_0_break) else ());
            (_C_140 : (su1 = (_C_139 : (su1 + (1 :> int32)))));
            (_C_142 : (su2 = (_C_141 : (su2 + (1 :> int32)))));
            (_C_145 : (count = (_C_144 : ((_C_143 : (count - (1 :> uint64))) :> uint64))))
         }
      };
      (while_0_break : ());
      (_C_147 : (__retres_1 = (_C_146 : (res_0 :> int32))));
      
      (return __retres_1)
   }
}

voidP[..] memscan(voidP[..] addr, int32 c_12, uint64 size_2)
  requires ((_C_199 : (addr <: unsigned_charP)) &&
             (_C_200 : \at((if (\at(0,Here) <=
                                 \at(((size_2 :> integer) - 1),Here)) then 
                           (((\offset_min(\at((addr :> unsigned_charP[..]),Here)) <=
                               \at(0,Here)) &&
                              (\offset_max(\at((addr :> unsigned_charP[..]),Here)) >=
                                \at(((size_2 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp7;
                               (((\at(0,Here) <= __framac_tmp7) &&
                                  (__framac_tmp7 <=
                                    \at(((size_2 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)));
behavior default:
  assigns \nothing;
  ensures (_C_186 : ((_C_187 : (\base_block(\at(addr,Old)) ==
                                 \base_block(\result))) &&
                      (((_C_190 : (\base_block(\at(addr,Old)) ==
                                    \base_block(\result))) &&
                         (_C_191 : ((\at(addr,Old) - \result) <= 0))) &&
                        ((_C_193 : (\base_block(\result) ==
                                     \base_block((\at(addr,Old) +
                                                   (\at(size_2,Old) :> integer))))) &&
                          (_C_194 : ((\result -
                                       (\at(addr,Old) +
                                         (\at(size_2,Old) :> integer))) <=
                                      0))))));
behavior found:
  assumes (\exists integer i_10;
            (((0 <= i_10) && (i_10 < (size_2 :> integer))) &&
              ((((addr :> unsigned_charP[..]) + i_10).unsigned_charM :> integer) ==
                (c_12 :> integer))));
  ensures (_C_195 : (\exists integer i_11;
                      (((((0 <= i_11) &&
                           (i_11 < (\at(size_2,Old) :> integer))) &&
                          (\forall integer j_2;
                            (((0 <= j_2) && (j_2 < i_11)) ==>
                              ((((\at(addr,Old) :> unsigned_charP[..]) + j_2).unsigned_charM :> integer) !=
                                (\at(c_12,Old) :> integer))))) &&
                         ((((\at(addr,Old) :> unsigned_charP[..]) + i_11).unsigned_charM :> integer) ==
                           (\at(c_12,Old) :> integer))) &&
                        (\result == (\at(addr,Old) + i_11)))));
behavior not_exists:
  assumes (\forall integer i_9;
            (((0 <= i_9) && (i_9 < (size_2 :> integer))) ==>
              ((((addr :> unsigned_charP[..]) + i_9).unsigned_charM :> integer) !=
                (c_12 :> integer))));
  ensures (_C_196 : (\result ==
                      (\at(addr,Old) + (\at(size_2,Old) :> integer))));
{  
   (check (disjoint_behaviors : (! ((\exists integer i_10;
                                      (((0 <= i_10) &&
                                         (i_10 < (size_2 :> integer))) &&
                                        ((((addr :> unsigned_charP[..]) +
                                            i_10).unsigned_charM :> integer) ==
                                          (c_12 :> integer)))) &&
                                     (\forall integer i_9;
                                       (((0 <= i_9) &&
                                          (i_9 < (size_2 :> integer))) ==>
                                         ((((addr :> unsigned_charP[..]) +
                                             i_9).unsigned_charM :> integer) !=
                                           (c_12 :> integer))))))));
   
   (check (complete_behaviors : ((\forall integer i_9;
                                   (((0 <= i_9) &&
                                      (i_9 < (size_2 :> integer))) ==>
                                     ((((addr :> unsigned_charP[..]) + i_9).unsigned_charM :> integer) !=
                                       (c_12 :> integer)))) ||
                                  (\exists integer i_10;
                                    (((0 <= i_10) &&
                                       (i_10 < (size_2 :> integer))) &&
                                      ((((addr :> unsigned_charP[..]) + i_10).unsigned_charM :> integer) ==
                                        (c_12 :> integer)))))));
   
   (var unsigned_charP[..] p_0);
   
   (var voidP[..] __retres_2);
   
   {  (_C_158 : (p_0 = (_C_157 : (addr :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_170 : ((_C_171 : ((0 :> uint64) <= size_2)) &&
                              (_C_172 : (size_2 <= \at(size_2,Pre)))));
      behavior default:
        invariant (_C_169 : ((p_0 - (addr :> unsigned_charP[..])) ==
                              ((\at(size_2,Pre) :> integer) -
                                (size_2 :> integer))));
      behavior default:
        invariant (_C_168 : (\base_block(p_0) ==
                              \base_block((addr :> unsigned_charP[..]))));
      behavior default:
        invariant (_C_161 : (((_C_163 : (\base_block((addr :> unsigned_charP[..])) ==
                                          \base_block(p_0))) &&
                               (_C_164 : (((addr :> unsigned_charP[..]) -
                                            p_0) <=
                                           0))) &&
                              ((_C_166 : (\base_block(p_0) ==
                                           \base_block(((addr :> unsigned_charP[..]) +
                                                         (\at(size_2,Pre) :> integer))))) &&
                                (_C_167 : ((p_0 -
                                             ((addr :> unsigned_charP[..]) +
                                               (\at(size_2,Pre) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_160 : (\forall integer i_8;
                              (((0 <= i_8) &&
                                 (i_8 <
                                   ((\at(size_2,Pre) :> integer) -
                                     (size_2 :> integer)))) ==>
                                ((((addr :> unsigned_charP[..]) + i_8).unsigned_charM :> integer) !=
                                  (c_12 :> integer)))));
      variant (_C_159 : size_2);
      while (true)
      {  
         {  (if (_C_173 : ((size_2 :> uint64) != (0 :> uint64))) then () else 
            (goto while_0_break));
            
            {  (if (_C_178 : ((_C_177 : ((_C_176 : p_0.unsigned_charM) :> int32)) ==
                               c_12)) then 
               {  (_C_175 : (__retres_2 = (_C_174 : (p_0 :> voidP[..]))));
                  
                  (goto return_label)
               } else ());
               (_C_180 : (p_0 = (_C_179 : (p_0 + (1 :> int32)))));
               (_C_183 : (size_2 = (_C_182 : ((_C_181 : (size_2 -
                                                          (1 :> uint64))) :> uint64))))
            }
         }
      };
      (while_0_break : ());
      (_C_185 : (__retres_2 = (_C_184 : (p_0 :> voidP[..]))));
      (return_label : 
      (return __retres_2))
   }
}

axiomatic Ctype {

  predicate islower(integer c) =
  ((((97 :> int8) :> integer) <= c) && (c <= ((122 :> int8) :> integer)))
   
  predicate isupper(integer c_0) =
  ((((65 :> int8) :> integer) <= c_0) && (c_0 <= ((90 :> int8) :> integer)))
   
  predicate isalpha(integer c_1) =
  (isupper(c_1) || islower(c_1))
   
  predicate isdigit(integer c_2) =
  ((((48 :> int8) :> integer) <= c_2) && (c_2 <= ((57 :> int8) :> integer)))
   
  predicate isodigit(integer c_3) =
  ((((48 :> int8) :> integer) <= c_3) && (c_3 <= ((55 :> int8) :> integer)))
   
  predicate isalnum(integer c_4) =
  (isdigit(c_4) || isalpha(c_4))
   
  predicate isspace(integer c_5) =
  ((((((c_5 == ((32 :> int8) :> integer)) ||
        (c_5 == ((12 :> int8) :> integer))) ||
       (c_5 == ((10 :> int8) :> integer))) ||
      (c_5 == ((13 :> int8) :> integer))) ||
     (c_5 == ((9 :> int8) :> integer))) ||
    (c_5 == ((11 :> int8) :> integer)))
   
  predicate isxdigit(integer c_6) =
  ((isdigit(c_6) ||
     ((((97 :> int8) :> integer) <= c_6) &&
       (c_6 <= ((102 :> int8) :> integer)))) ||
    ((((65 :> int8) :> integer) <= c_6) &&
      (c_6 <= ((70 :> int8) :> integer))))
   
  logic integer tolower(integer c_7)
   
  logic integer toupper(integer c_8)
   
  axiom a :
  (_C_201 : (tolower(((65 :> int8) :> integer)) == ((97 :> int8) :> integer)))
   
  axiom b :
  (_C_202 : (tolower(((66 :> int8) :> integer)) == ((98 :> int8) :> integer)))
   
  axiom c :
  (_C_203 : (tolower(((67 :> int8) :> integer)) == ((99 :> int8) :> integer)))
   
  axiom d :
  (_C_204 : (tolower(((68 :> int8) :> integer)) ==
              ((100 :> int8) :> integer)))
   
  axiom e :
  (_C_205 : (tolower(((69 :> int8) :> integer)) ==
              ((101 :> int8) :> integer)))
   
  axiom f :
  (_C_206 : (tolower(((70 :> int8) :> integer)) ==
              ((102 :> int8) :> integer)))
   
  axiom g :
  (_C_207 : (tolower(((71 :> int8) :> integer)) ==
              ((103 :> int8) :> integer)))
   
  axiom h :
  (_C_208 : (tolower(((72 :> int8) :> integer)) ==
              ((104 :> int8) :> integer)))
   
  axiom i :
  (_C_209 : (tolower(((73 :> int8) :> integer)) ==
              ((105 :> int8) :> integer)))
   
  axiom j :
  (_C_210 : (tolower(((74 :> int8) :> integer)) ==
              ((106 :> int8) :> integer)))
   
  axiom k :
  (_C_211 : (tolower(((75 :> int8) :> integer)) ==
              ((107 :> int8) :> integer)))
   
  axiom l :
  (_C_212 : (tolower(((76 :> int8) :> integer)) ==
              ((108 :> int8) :> integer)))
   
  axiom m :
  (_C_213 : (tolower(((77 :> int8) :> integer)) ==
              ((109 :> int8) :> integer)))
   
  axiom n :
  (_C_214 : (tolower(((78 :> int8) :> integer)) ==
              ((110 :> int8) :> integer)))
   
  axiom o :
  (_C_215 : (tolower(((79 :> int8) :> integer)) ==
              ((111 :> int8) :> integer)))
   
  axiom p :
  (_C_216 : (tolower(((80 :> int8) :> integer)) ==
              ((112 :> int8) :> integer)))
   
  axiom q :
  (_C_217 : (tolower(((81 :> int8) :> integer)) ==
              ((113 :> int8) :> integer)))
   
  axiom r :
  (_C_218 : (tolower(((82 :> int8) :> integer)) ==
              ((114 :> int8) :> integer)))
   
  axiom s :
  (_C_219 : (tolower(((83 :> int8) :> integer)) ==
              ((115 :> int8) :> integer)))
   
  axiom t :
  (_C_220 : (tolower(((84 :> int8) :> integer)) ==
              ((116 :> int8) :> integer)))
   
  axiom u :
  (_C_221 : (tolower(((85 :> int8) :> integer)) ==
              ((117 :> int8) :> integer)))
   
  axiom v :
  (_C_222 : (tolower(((86 :> int8) :> integer)) ==
              ((118 :> int8) :> integer)))
   
  axiom w :
  (_C_223 : (tolower(((87 :> int8) :> integer)) ==
              ((119 :> int8) :> integer)))
   
  axiom x :
  (_C_224 : (tolower(((88 :> int8) :> integer)) ==
              ((120 :> int8) :> integer)))
   
  axiom y :
  (_C_225 : (tolower(((89 :> int8) :> integer)) ==
              ((121 :> int8) :> integer)))
   
  axiom z :
  (_C_226 : (tolower(((90 :> int8) :> integer)) ==
              ((122 :> int8) :> integer)))
   
  axiom pl :
  (_C_227 : (\forall integer c_9;
              ((! isupper(c_9)) ==> (tolower(c_9) == c_9))))
   
  axiom pu :
  (_C_228 : (\forall integer c_10;
              ((! islower(c_10)) ==> (toupper(c_10) == c_10))))
   
  axiom tl :
  (_C_229 : (\forall integer c_11;
              ((! islower(c_11)) ==> (toupper(tolower(c_11)) == c_11))))
   
  axiom tu :
  (_C_230 : (\forall integer c_12;
              ((! isupper(c_12)) ==> (tolower(toupper(c_12)) == c_12))))
  
}

_bool isalnum(int8 c_2)
behavior default:
  assigns \nothing;
  ensures (_C_231 : ((\result != 0) <==> isalnum((\at(c_2,Old) :> integer))));
;

_bool isalpha(int8 c_3)
behavior default:
  assigns \nothing;
  ensures (_C_232 : ((\result != 0) <==> isalpha((\at(c_3,Old) :> integer))));
;

_bool islower(int8 c_6)
behavior default:
  assigns \nothing;
  ensures (_C_233 : ((\result != 0) <==> islower((\at(c_6,Old) :> integer))));
;

_bool isspace(int8 c_8)
behavior default:
  assigns \nothing;
  ensures (_C_234 : ((\result != 0) <==> isspace((\at(c_8,Old) :> integer))));
;

_bool isupper(int8 c_9)
behavior default:
  assigns \nothing;
  ensures (_C_235 : ((\result != 0) <==> isupper((\at(c_9,Old) :> integer))));
;

_bool isxdigit(int8 c_10)
behavior default:
  assigns \nothing;
  ensures (_C_236 : ((\result != 0) <==>
                      isxdigit((\at(c_10,Old) :> integer))));
;

_bool isascii(int8 c_4)
behavior default:
  assigns \nothing;
  ensures (_C_237 : ((\result != 0) <==>
                      (((0 :> int8) <= \at(c_4,Old)) &&
                        (\at(c_4,Old) <= (127 :> int8)))));
;

int32 isdigit(int32 c_5)
behavior default:
  assigns \nothing;
  ensures (_C_238 : ((\result != 0) <==> isdigit((\at(c_5,Old) :> integer))));
;

uint8 __tolower(uint8 c)
behavior default:
  assigns \nothing;
  ensures (_C_239 : ((\result :> integer) ==
                      tolower((\at(c,Old) :> integer))));
;

uint8 __toupper(uint8 c_0)
behavior default:
  assigns \nothing;
  ensures (_C_240 : ((\result :> integer) ==
                      toupper((\at(c_0,Old) :> integer))));
;

int8 tolower(int8 c_18)
behavior default:
  assigns \nothing;
  ensures (_C_241 : ((\result :> integer) ==
                      tolower((\at(c_18,Old) :> integer))));
;

int8 toupper(int8 c_19)
behavior default:
  assigns \nothing;
  ensures (_C_242 : ((\result :> integer) ==
                      toupper((\at(c_19,Old) :> integer))));
;

int8 _tolower(int8 c_1)
behavior default:
  assigns \nothing;
  ensures (_C_243 : ((\result :> integer) ==
                      tolower((\at(c_1,Old) :> integer))));
;

int32 isodigit(int8 c_7)
behavior default:
  assigns \nothing;
  ensures (_C_244 : ((\result != 0) <==> isodigit((\at(c_7,Old) :> integer))));
;

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        (((s + (n_1 :> integer)).charM == (0 :> int8)) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp8;
                                                    (((\at(0,L) <=
                                                        __framac_tmp8) &&
                                                       (__framac_tmp8 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_245 : (\forall charP[..] s_0;
              (((s_0.charM != (0 :> int8)) && valid_str{L}(s_0)) ==>
                valid_str{L}((s_0 + 1)))))
   
  lemma valid_str_strend{L} :
  (_C_246 : (\forall charP[..] s_1;
              ((\at((((\offset_min(\at(s_1,L)) <= \at(0,L)) &&
                       (\offset_max(\at(s_1,L)) >= \at(0,L))) &&
                      true),L) &&
                 (s_1.charM == (0 :> int8))) ==>
                valid_str{L}(s_1))))
   
  logic uint64 strlen{L}(charP[..] s_2) =
  \at((if ((s_2 + 0).charM == (0 :> int8)) then (0 :> uint64) else ((1 +
                                                                    (strlen{L}(
                                                                    (s_2 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_247 : (\forall charP[..] s_3;
              (\forall integer i_12;
                (((valid_str{L}(s_3) && (0 <= i_12)) &&
                   (i_12 < (strlen{L}(s_3) :> integer))) ==>
                  ((s_3 + i_12).charM != (0 :> int8))))))
   
  lemma strlen_at_null{L} :
  (_C_248 : (\forall charP[..] s_4;
              (valid_str{L}(s_4) ==>
                ((s_4 + (strlen{L}(s_4) :> integer)).charM == (0 :> int8)))))
   
  lemma strlen_shift{L} :
  (_C_249 : (\forall charP[..] s_5;
              (\forall uint64 i_13;
                ((valid_str{L}(s_5) && (i_13 <= strlen{L}(s_5))) ==>
                  ((strlen{L}((s_5 + (i_13 :> integer))) :> integer) ==
                    ((strlen{L}(s_5) :> integer) - (i_13 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_250 : (\forall charP[..] s_6;
              (\forall uint64 i_14;
                (((valid_str{L}(s_6) && ((0 :> uint64) < i_14)) &&
                   (i_14 <= strlen{L}(s_6))) ==>
                  (strlen{L}((s_6 + (i_14 :> integer))) < strlen{L}(s_6))))))
   
  lemma strlen_shift1{L} :
  (_C_251 : (\forall charP[..] s_7;
              ((valid_str{L}(s_7) && (s_7.charM != (0 :> int8))) ==>
                ((strlen{L}(s_7) :> integer) ==
                  (1 + (strlen{L}((s_7 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_252 : (\forall charP[..] s_8;
              (\forall charP[..] sc;
                (((((valid_str{L}(s_8) && valid_str{L}(sc)) &&
                     (\base_block(s_8) == \base_block(sc))) &&
                    ((\base_block(s_8) == \base_block(sc)) &&
                      ((s_8 - sc) <= 0))) &&
                   (\forall integer i_15;
                     (((0 <= i_15) && (i_15 <= (sc - s_8))) ==>
                       ((s_8 + i_15).charM != (0 :> int8))))) ==>
                  (strlen{L}(sc) <= strlen{L}(s_8))))))
   
  lemma strlen_main{L} :
  (_C_253 : (\forall charP[..] s_9;
              (\forall uint64 n_2;
                (((valid_str{L}(s_9) &&
                    ((s_9 + (n_2 :> integer)).charM == (0 :> int8))) &&
                   (\forall uint64 i_16;
                     ((i_16 < n_2) ==>
                       ((s_9 + (i_16 :> integer)).charM != (0 :> int8))))) ==>
                  (strlen{L}(s_9) == n_2)))))
   
  lemma valid_str_shiftn{L} :
  (_C_254 : (\forall charP[..] s_10;
              (\forall integer i_17;
                (((valid_str{L}(s_10) && (0 <= i_17)) &&
                   (i_17 < (strlen{L}(s_10) :> integer))) ==>
                  valid_str{L}((s_10 + i_17))))))
  
}

axiomatic SkipSpaces {

  logic charP[..] skip_spaces(charP[..] str)
   
  lemma skip_spaces_defn{L} :
  (_C_255 : (\forall charP[..] str_0;
              (\forall uint64 i_18;
                ((((valid_str{L}(str_0) && (i_18 <= strlen{L}(str_0))) &&
                    (\forall uint64 j_3;
                      ((j_3 < i_18) ==>
                        isspace(((str_0 + (j_3 :> integer)).charM :> integer))))) &&
                   (! isspace(((str_0 + (i_18 :> integer)).charM :> integer)))) ==>
                  ((str_0 + (i_18 :> integer)) == skip_spaces(str_0))))))
   
  lemma skip_spaces_deref{L} :
  (_C_256 : (\forall charP[..] str_1;
              (valid_str{L}(str_1) ==>
                (! isspace((skip_spaces(str_1).charM :> integer))))))
   
  lemma skip_spaces_range{L} :
  (_C_257 : (\forall charP[..] str_2;
              (valid_str{L}(str_2) ==>
                (((\base_block(str_2) == \base_block(skip_spaces(str_2))) &&
                   ((str_2 - skip_spaces(str_2)) <= 0)) &&
                  ((\base_block(skip_spaces(str_2)) ==
                     \base_block((str_2 + (strlen{L}(str_2) :> integer)))) &&
                    ((skip_spaces(str_2) -
                       (str_2 + (strlen{L}(str_2) :> integer))) <=
                      0))))))
   
  lemma skip_spaces_iter_one{L} :
  (_C_258 : (\forall charP[..] str_3;
              ((valid_str{L}(str_3) && (! isspace((str_3.charM :> integer)))) ==>
                (skip_spaces(str_3) == skip_spaces((str_3 + 1))))))
   
  lemma skip_spaces_base_addr{L} :
  (_C_259 : (\forall charP[..] str_4;
              (valid_str{L}(str_4) ==>
                (\base_block(str_4) == \base_block(skip_spaces(str_4))))))
   
  lemma skip_spaces_same{L} :
  (_C_260 : (\forall charP[..] str_5;
              ((\at((((\offset_min(\at(str_5,L)) <= \at(0,L)) &&
                       (\offset_max(\at(str_5,L)) >= \at(0,L))) &&
                      true),L) &&
                 (! isspace((str_5.charM :> integer)))) ==>
                (str_5 == skip_spaces(str_5)))))
   
  lemma skipped_are_spaces{L} :
  (_C_261 : (\forall charP[..] str_6;
              (\forall uint64 i_19;
                ((valid_str{L}(str_6) &&
                   ((i_19 :> integer) < (skip_spaces(str_6) - str_6))) ==>
                  isspace(((str_6 + (i_19 :> integer)).charM :> integer))))))
  
}

charP[..] skip_spaces(charP[..] str)
  requires (_C_297 : valid_str{Here}(str));
behavior default:
  assigns \nothing;
  ensures (_C_280 : ((_C_281 : (\result == skip_spaces(\at(str,Old)))) &&
                      ((_C_283 : (\base_block(\result) ==
                                   \base_block(\at(str,Old)))) &&
                        ((((_C_287 : (\base_block(\at(str,Old)) ==
                                       \base_block(\result))) &&
                            (_C_288 : ((\at(str,Old) - \result) <= 0))) &&
                           ((_C_290 : (\base_block(\result) ==
                                        \base_block((\at(str,Old) +
                                                      (strlen{Here}(\at(str,Old)) :> integer))))) &&
                             (_C_291 : ((\result -
                                          (\at(str,Old) +
                                            (strlen{Here}(\at(str,Old)) :> integer))) <=
                                         0)))) &&
                          ((_C_293 : (! isspace((\result.charM :> integer)))) &&
                            ((_C_295 : (\forall charP[..] p_3;
                                         ((((\base_block(\at(str,Old)) ==
                                              \base_block(p_3)) &&
                                             ((\at(str,Old) - p_3) <= 0)) &&
                                            ((\base_block(p_3) ==
                                               \base_block(\result)) &&
                                              ((p_3 - \result) < 0))) ==>
                                           isspace((p_3.charM :> integer))))) &&
                              (_C_296 : valid_str{Here}(\result))))))));
{  
   (var charP[..] ostr);
   
   (var _bool tmp_0_0);
   
   (var charP[..] __retres_3);
   
   {  (_C_262 : (ostr = str));
      
      loop 
      behavior default:
        invariant (_C_272 : valid_str{Here}(str));
      behavior default:
        invariant (_C_265 : (((_C_267 : (\base_block(ostr) ==
                                          \base_block(str))) &&
                               (_C_268 : ((ostr - str) <= 0))) &&
                              ((_C_270 : (\base_block(str) ==
                                           \base_block((ostr +
                                                         (strlen{Here}(
                                                         ostr) :> integer))))) &&
                                (_C_271 : ((str -
                                             (ostr +
                                               (strlen{Here}(ostr) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_264 : (\forall charP[..] p_2;
                              ((((\base_block(ostr) == \base_block(p_2)) &&
                                  ((ostr - p_2) <= 0)) &&
                                 ((\base_block(p_2) == \base_block(str)) &&
                                   ((p_2 - str) < 0))) ==>
                                isspace((p_2.charM :> integer)))));
      variant (_C_263 : ((strlen{Here}(ostr) :> integer) - (str - ostr)));
      while (true)
      {  
         {  (_C_275 : (tmp_0_0 = (_C_274 : isspace((_C_273 : str.charM)))));
            (if (_C_276 : ((tmp_0_0 :> _bool) != (0 :> _bool))) then () else 
            (goto while_0_break));
            (_C_278 : (str = (_C_277 : (str + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_279 : (__retres_3 = str));
      
      (return __retres_3)
   }
}

int32 strcasecmp(charP[..] s1, charP[..] s2)
  requires ((_C_352 : valid_str{Here}(s1)) && (_C_353 : valid_str{Here}(s2)));
behavior default:
  assigns \nothing;
  ensures true;
behavior equal:
  assumes (\forall integer i_24;
            (((0 <= i_24) && (i_24 <= (strlen{Here}(s1) :> integer))) ==>
              (tolower(((s1 + i_24).charM :> integer)) ==
                tolower(((s2 + i_24).charM :> integer)))));
  ensures (_C_346 : (\result == (0 :> int32)));
behavior not_equal:
  assumes (\exists integer i_22;
            (((0 <= i_22) && (i_22 <= (strlen{Here}(s1) :> integer))) &&
              (tolower(((s1 + i_22).charM :> integer)) !=
                tolower(((s2 + i_22).charM :> integer)))));
  ensures (_C_347 : ((_C_348 : (\result != (0 :> int32))) &&
                      (_C_349 : (\exists integer i_23;
                                  (((((0 <= i_23) &&
                                       (i_23 <=
                                         (strlen{Here}(\at(s1,Old)) :> integer))) &&
                                      (\forall integer j_5;
                                        (((0 <= j_5) && (j_5 < i_23)) ==>
                                          (tolower(((\at(s1,Old) + j_5).charM :> integer)) ==
                                            tolower(((\at(s2,Old) + j_5).charM :> integer)))))) &&
                                     (tolower(((\at(s1,Old) + i_23).charM :> integer)) !=
                                       tolower(((\at(s2,Old) + i_23).charM :> integer)))) &&
                                    ((\result :> integer) ==
                                      (tolower(((\at(s1,Old) + i_23).charM :> integer)) -
                                        tolower(((\at(s2,Old) + i_23).charM :> integer)))))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_24;
                                      (((0 <= i_24) &&
                                         (i_24 <=
                                           (strlen{Here}(s1) :> integer))) ==>
                                        (tolower(((s1 + i_24).charM :> integer)) ==
                                          tolower(((s2 + i_24).charM :> integer))))) &&
                                     (\exists integer i_22;
                                       (((0 <= i_22) &&
                                          (i_22 <=
                                            (strlen{Here}(s1) :> integer))) &&
                                         (tolower(((s1 + i_22).charM :> integer)) !=
                                           tolower(((s2 + i_22).charM :> integer)))))))));
   
   (check (complete_behaviors : ((\exists integer i_22;
                                   (((0 <= i_22) &&
                                      (i_22 <= (strlen{Here}(s1) :> integer))) &&
                                     (tolower(((s1 + i_22).charM :> integer)) !=
                                       tolower(((s2 + i_22).charM :> integer))))) ||
                                  (\forall integer i_24;
                                    (((0 <= i_24) &&
                                       (i_24 <=
                                         (strlen{Here}(s1) :> integer))) ==>
                                      (tolower(((s1 + i_24).charM :> integer)) ==
                                        tolower(((s2 + i_24).charM :> integer))))))));
   
   (var int32 c1);
   
   (var int32 c2);
   
   (var charP[..] os1);
   
   (var charP[..] os2);
   
   (var charP[..] tmp_0_1);
   
   (var charP[..] tmp_0_2);
   
   (var int32 res_1);
   
   (var int32 __retres_4);
   
   {  (_C_298 : (os1 = s1));
      (_C_299 : (os2 = s2));
      
      loop 
      behavior default:
        invariant (_C_317 : ((_C_318 : valid_str{Here}(s1)) &&
                              (_C_319 : valid_str{Here}(s2))));
      behavior default:
        invariant (_C_310 : (((_C_312 : (\base_block(os1) == \base_block(s1))) &&
                               (_C_313 : ((os1 - s1) <= 0))) &&
                              ((_C_315 : (\base_block(s1) ==
                                           \base_block((os1 +
                                                         (strlen{Here}(
                                                         os1) :> integer))))) &&
                                (_C_316 : ((s1 -
                                             (os1 +
                                               (strlen{Here}(os1) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_303 : (((_C_305 : (\base_block(os2) == \base_block(s2))) &&
                               (_C_306 : ((os2 - s2) <= 0))) &&
                              ((_C_308 : (\base_block(s2) ==
                                           \base_block((os2 +
                                                         (strlen{Here}(
                                                         os2) :> integer))))) &&
                                (_C_309 : ((s2 -
                                             (os2 +
                                               (strlen{Here}(os2) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_302 : ((s1 - os1) == (s2 - os2)));
      behavior default:
        invariant (_C_301 : (\forall integer i_20;
                              (((0 <= i_20) && (i_20 < (s1 - os1))) ==>
                                (tolower(((os1 + i_20).charM :> integer)) ==
                                  tolower(((os2 + i_20).charM :> integer))))));
      variant (_C_300 : ((strlen{Here}(os1) :> integer) - (s1 - os1)));
      while (true)
      {  
         {  
            {  
               {  (_C_320 : (tmp_0_1 = s1));
                  (_C_322 : (s1 = (_C_321 : (s1 + (1 :> int32)))));
                  ()
               };
               (_C_327 : (let __cil_tmp =
                         (_C_324 : tolower((_C_323 : tmp_0_1.charM)))
                         in (_C_326 : (c1 = (_C_325 : (__cil_tmp :> int32))))));
               
               {  (_C_328 : (tmp_0_2 = s2));
                  (_C_330 : (s2 = (_C_329 : (s2 + (1 :> int32)))));
                  ()
               };
               (_C_335 : (let __cil_tmp_13 =
                         (_C_332 : tolower((_C_331 : tmp_0_2.charM)))
                         in (_C_334 : (c2 = (_C_333 : (__cil_tmp_13 :> int32))))))
            };
            (if (_C_337 : (c1 == c2)) then (if (_C_336 : (c1 != (0 :> int32))) then () else 
                                           (goto while_0_break)) else 
            (goto while_0_break))
         }
      };
      (while_0_break : ());
      (_C_340 : (res_1 = (_C_339 : ((_C_338 : (c1 - c2)) :> int32))));
      
      {  
         (assert for default: (_C_341 : (jessie : ((c1 == c2) ==>
                                                    ((c1 == (0 :> int32)) &&
                                                      (res_1 == (0 :> int32)))))));
         ()
      };
      
      {  
         (assert for default: (_C_342 : (jessie : ((c1 != c2) ==>
                                                    (\exists integer i_21;
                                                      ((((((0 <= i_21) &&
                                                            (i_21 <=
                                                              (strlen{Here}(
                                                              os1) :> integer))) &&
                                                           (\forall integer j_4;
                                                             (((0 <= j_4) &&
                                                                (j_4 < i_21)) ==>
                                                               (tolower(
                                                                 ((os1 + j_4).charM :> integer)) ==
                                                                 tolower(
                                                                 ((os2 + j_4).charM :> integer)))))) &&
                                                          (tolower(((os1 +
                                                                    i_21).charM :> integer)) !=
                                                            tolower((
                                                                    (os2 +
                                                                    i_21).charM :> integer)))) &&
                                                         ((res_1 :> integer) ==
                                                           (tolower((
                                                                    (os1 +
                                                                    i_21).charM :> integer)) -
                                                             tolower(
                                                             ((os2 + i_21).charM :> integer))))) &&
                                                        (i_21 ==
                                                          ((s1 - os1) - 1))))))));
         ()
      };
      (_C_345 : (__retres_4 = (_C_344 : ((_C_343 : (c1 - c2)) :> int32))));
      
      (return __retres_4)
   }
}

charP[..] strcat(charP[..] dest_8, charP[..] src_5)
  requires ((_C_417 : valid_str{Here}(src_5)) &&
             ((_C_418 : valid_str{Here}(dest_8)) &&
               ((_C_419 : (((strlen{Here}(dest_8) :> integer) +
                             (strlen{Here}(src_5) :> integer)) <=
                            18446744073709551615UL)) &&
                 (_C_420 : \at((if (\at(0,Here) <=
                                     \at(((strlen{Here}(dest_8) :> integer) +
                                           (strlen{Here}(src_5) :> integer)),Here)) then 
                               (((\offset_min(\at(dest_8,Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at(dest_8,Here)) >=
                                    \at(((strlen{Here}(dest_8) :> integer) +
                                          (strlen{Here}(src_5) :> integer)),Here))) &&
                                 (\forall integer __framac_tmp12;
                                   (((\at(0,Here) <= __framac_tmp12) &&
                                      (__framac_tmp12 <=
                                        \at(((strlen{Here}(dest_8) :> integer) +
                                              (strlen{Here}(src_5) :> integer)),Here))) ==>
                                     true))) else true),Here)))));
behavior default:
  assigns (dest_8 +
            [(strlen{Old}(dest_8) :> integer)..((strlen{Old}(dest_8) :> integer) +
                                                 (strlen{Old}(src_5) :> integer))]).charM;
  ensures (_C_410 : ((_C_411 : (\result == \at(dest_8,Old))) &&
                      ((_C_413 : valid_str{Here}(\result)) &&
                        ((_C_415 : (\forall integer i_27;
                                     (((0 <= i_27) &&
                                        (i_27 <
                                          (strlen{Old}(\at(dest_8,Old)) :> integer))) ==>
                                       (\at((dest_8 + i_27).charM,Old) ==
                                         (\result + i_27).charM)))) &&
                          (_C_416 : (\forall integer i_28;
                                      ((((strlen{Old}(\at(dest_8,Old)) :> integer) <=
                                          i_28) &&
                                         (i_28 <
                                           ((strlen{Old}(\at(dest_8,Old)) :> integer) +
                                             (strlen{Here}(\at(src_5,Old)) :> integer)))) ==>
                                        ((\at(src_5,Old) +
                                           (i_28 -
                                             (strlen{Old}(\at(dest_8,Old)) :> integer))).charM ==
                                          (\result + i_28).charM))))))));
{  
   (var charP[..] tmp_0_3);
   
   (var uint64 dest_len);
   
   (var charP[..] osrc);
   
   (var charP[..] mdest);
   
   (var charP[..] tmp_1);
   
   (var int8 tmp_2);
   
   (var charP[..] tmp_3);
   
   {  (_C_354 : (tmp_0_3 = dest_8));
      (_C_356 : (dest_len = (_C_355 : strlen(tmp_0_3))));
      
      loop 
      behavior default:
        invariant (_C_359 : (((_C_361 : (\base_block(tmp_0_3) ==
                                          \base_block(dest_8))) &&
                               (_C_362 : ((tmp_0_3 - dest_8) <= 0))) &&
                              ((_C_364 : (\base_block(dest_8) ==
                                           \base_block((tmp_0_3 +
                                                         (dest_len :> integer))))) &&
                                (_C_365 : ((dest_8 -
                                             (tmp_0_3 +
                                               (dest_len :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_358 : valid_str{Here}(dest_8));
      variant (_C_357 : ((dest_len :> integer) - (dest_8 - tmp_0_3)));
      while (true)
      {  
         {  (if (_C_367 : (((_C_366 : dest_8.charM) :> int8) != (0 :> int8))) then () else 
            (goto while_0_break));
            (_C_369 : (dest_8 = (_C_368 : (dest_8 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_370 : (jessie : (dest_8.charM ==
                                                    (0 :> int8)))));
         ()
      };
      
      {  
         (assert for default: (_C_371 : (jessie : (dest_8 ==
                                                    (tmp_0_3 +
                                                      (dest_len :> integer))))));
         ()
      };
      (_C_372 : (osrc = src_5));
      (_C_373 : (mdest = dest_8));
      
      loop 
      behavior default:
        invariant (_C_385 : (((_C_387 : (\base_block(osrc) ==
                                          \base_block(src_5))) &&
                               (_C_388 : ((osrc - src_5) <= 0))) &&
                              ((_C_390 : (\base_block(src_5) ==
                                           \base_block((osrc +
                                                         (strlen{Here}(
                                                         osrc) :> integer))))) &&
                                (_C_391 : ((src_5 -
                                             (osrc +
                                               (strlen{Here}(osrc) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_378 : (((_C_380 : (\base_block(mdest) ==
                                          \base_block(dest_8))) &&
                               (_C_381 : ((mdest - dest_8) <= 0))) &&
                              ((_C_383 : (\base_block(dest_8) ==
                                           \base_block((mdest +
                                                         (strlen{Here}(
                                                         osrc) :> integer))))) &&
                                (_C_384 : ((dest_8 -
                                             (mdest +
                                               (strlen{Here}(osrc) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_377 : ((src_5 - osrc) == (dest_8 - mdest)));
      behavior default:
        invariant (_C_376 : valid_str{Here}(src_5));
      behavior default:
        invariant (_C_375 : (\forall integer i_25;
                              (((0 <= i_25) && (i_25 < (src_5 - osrc))) ==>
                                ((mdest + i_25).charM == (osrc + i_25).charM))));
      behavior default:
        
        assigns (mdest + [0..(strlen{Here}(osrc) :> integer)]).charM;
      variant (_C_374 : ((strlen{Here}(osrc) :> integer) - (src_5 - osrc)));
      while (true)
      {  
         {  
            {  (_C_392 : (tmp_1 = dest_8));
               (_C_394 : (dest_8 = (_C_393 : (dest_8 + (1 :> int32)))));
               (_C_395 : (tmp_3 = src_5));
               (_C_397 : (src_5 = (_C_396 : (src_5 + (1 :> int32)))));
               (_C_399 : (tmp_2 = (_C_398 : tmp_3.charM)))
            };
            (_C_401 : ((_C_400 : tmp_1.charM) = tmp_2));
            (if (_C_403 : ((_C_402 : (tmp_2 :> int32)) != (0 :> int32))) then () else 
            (goto while_1_break))
         }
      };
      (while_1_break : ());
      
      {  
         (assert for default: (_C_404 : (jessie : (\forall integer i_26;
                                                    (((0 <= i_26) &&
                                                       (i_26 <
                                                         (dest_len :> integer))) ==>
                                                      (\at((dest_8 + i_26).charM,Pre) ==
                                                        (tmp_0_3 + i_26).charM))))));
         ()
      };
      
      {  
         (assert for default: (_C_405 : (jessie : (((dest_8 + (- 1)).charM ==
                                                     (0 :> int8)) &&
                                                    ((src_5 + (- 1)).charM ==
                                                      (0 :> int8))))));
         ()
      };
      
      {  
         (assert for default: (_C_406 : (jessie : ((dest_8 - 1) ==
                                                    ((tmp_0_3 +
                                                       (dest_len :> integer)) +
                                                      (strlen{Here}(osrc) :> integer))))));
         ()
      };
      
      {  
         (assert for default: (_C_407 : (jessie : ((strlen{Here}(osrc) :> integer) ==
                                                    ((src_5 - osrc) - 1)))));
         ()
      };
      
      {  
         (assert for default: (_C_408 : (jessie : (\exists uint64 n_3;
                                                    ((((tmp_0_3 +
                                                         (n_3 :> integer)).charM ==
                                                        (0 :> int8)) &&
                                                       \at((if (\at(0,Here) <=
                                                                 \at(n_3,Here)) then 
                                                           (((\offset_min(
                                                               \at(tmp_0_3,Here)) <=
                                                               \at(0,Here)) &&
                                                              (\offset_max(
                                                                \at(tmp_0_3,Here)) >=
                                                                \at(n_3,Here))) &&
                                                             (\forall integer __framac_tmp11;
                                                               (((\at(0,Here) <=
                                                                   __framac_tmp11) &&
                                                                  (__framac_tmp11 <=
                                                                    \at(n_3,Here))) ==>
                                                                 true))) else true),Here)) &&
                                                      (n_3 ==
                                                        (((dest_len :> integer) +
                                                           (strlen{Here}(
                                                           osrc) :> integer)) :> uint64)))))));
         ()
      };
      
      {  
         (assert for default: (_C_409 : (jessie : valid_str{Here}(tmp_0_3))));
         ()
      };
      
      (return tmp_0_3)
   }
}

axiomatic Strchr {

  logic charP[..] strchr{L}(charP[..] str_7, int8 c_13) =
  \at((if (str_7.charM == c_13) then str_7 else (if (str_7.charM ==
                                                      (0 :> int8)) then null else strchr{L}(
                                                (str_7 + 1), c_13))),L)
   
  lemma strchr_mem{L} :
  (_C_421 : (\forall charP[..] str_8;
              (\forall int8 c_14;
                (valid_str{L}(str_8) ==>
                  (((((\base_block(str_8) ==
                        \base_block(strchr{L}(str_8, c_14))) &&
                       ((str_8 - strchr{L}(str_8, c_14)) <= 0)) &&
                      ((\base_block(strchr{L}(str_8, c_14)) ==
                         \base_block((str_8 + (strlen{L}(str_8) :> integer)))) &&
                        ((strchr{L}(str_8, c_14) -
                           (str_8 + (strlen{L}(str_8) :> integer))) <=
                          0))) &&
                     (! (strchr{L}(str_8, c_14) == null))) ||
                    ((strchr{L}(str_8, c_14) == null) &&
                      (! (((\base_block(str_8) ==
                             \base_block(strchr{L}(str_8, c_14))) &&
                            ((str_8 - strchr{L}(str_8, c_14)) <= 0)) &&
                           ((\base_block(strchr{L}(str_8, c_14)) ==
                              \base_block((str_8 +
                                            (strlen{L}(str_8) :> integer)))) &&
                             ((strchr{L}(str_8, c_14) -
                                (str_8 + (strlen{L}(str_8) :> integer))) <=
                               0))))))))))
   
  lemma strchr_iter_one{L} :
  (_C_422 : (\forall charP[..] str_9;
              (\forall int8 c_15;
                (((valid_str{L}(str_9) && (str_9.charM != c_15)) &&
                   (str_9.charM != (0 :> int8))) ==>
                  (strchr{L}(str_9, c_15) == strchr{L}((str_9 + 1), c_15))))))
   
  lemma strchr_res{L} :
  (_C_423 : (\forall charP[..] str_10;
              (\forall int8 c_16;
                (valid_str{L}(str_10) ==>
                  (((strchr{L}(str_10, c_16) == null) &&
                     (! (strchr{L}(str_10, c_16).charM == c_16))) ||
                    ((strchr{L}(str_10, c_16).charM == c_16) &&
                      (! (strchr{L}(str_10, c_16) == null))))))))
   
  lemma strchr_at_end_zero{L} :
  (_C_424 : (\forall charP[..] str_11;
              (\forall int8 c_17;
                ((\at((((\offset_min(\at(str_11,L)) <= \at(0,L)) &&
                         (\offset_max(\at(str_11,L)) >= \at(0,L))) &&
                        true),L) &&
                   (str_11.charM == (0 :> int8))) ==>
                  (strchr{L}(str_11, c_17) == null)))))
   
  lemma strchr_at_end_char{L} :
  (_C_425 : (\forall charP[..] str_12;
              (\forall int8 c_18;
                ((\at((((\offset_min(\at(str_12,L)) <= \at(0,L)) &&
                         (\offset_max(\at(str_12,L)) >= \at(0,L))) &&
                        true),L) &&
                   (str_12.charM == c_18)) ==>
                  (strchr{L}(str_12, c_18) == str_12)))))
   
  lemma strchr_defn{L} :
  (_C_426 : (\forall charP[..] str_13;
              (\forall int8 c_19;
                (\forall integer i_29;
                  (((((valid_str{L}(str_13) && (0 <= i_29)) &&
                       (i_29 <= (strlen{L}(str_13) :> integer))) &&
                      (\forall integer j_6;
                        (((0 <= j_6) && (j_6 < i_29)) ==>
                          ((str_13 + j_6).charM != c_19)))) &&
                     ((str_13 + i_29).charM == c_19)) ==>
                    ((str_13 + i_29) == strchr{L}(str_13, c_19)))))))
   
  lemma strchr_skipped{L} :
  (_C_427 : (\forall charP[..] str_14;
              (\forall int8 c_20;
                (\forall integer i_30;
                  ((((valid_str{L}(str_14) && (0 <= i_30)) &&
                      (i_30 < (strchr{L}(str_14, c_20) - str_14))) &&
                     ((strchr{L}(str_14, c_20) - str_14) <=
                       (strlen{L}(str_14) :> integer))) ==>
                    ((str_14 + i_30).charM != c_20))))))
  
}

charP[..] strchr(charP[..] s_3, int32 c_14)
  requires (_C_469 : valid_str{Here}(s_3));
behavior default:
  assigns \nothing;
  ensures (_C_454 : (\result ==
                      strchr{Here}(\at(s_3,Old), (\at(c_14,Old) :%> int8))));
behavior not_exists:
  assumes (\forall charP[..] p_7;
            ((((\base_block(s_3) == \base_block(p_7)) && ((s_3 - p_7) <= 0)) &&
               ((\base_block(p_7) ==
                  \base_block((s_3 + (strlen{Here}(s_3) :> integer)))) &&
                 ((p_7 - (s_3 + (strlen{Here}(s_3) :> integer))) <= 0))) ==>
              (p_7.charM != (c_14 :%> int8))));
  ensures (_C_455 : (\result == null));
behavior exists:
  assumes (\exists charP[..] p_5;
            ((((\base_block(s_3) == \base_block(p_5)) && ((s_3 - p_5) <= 0)) &&
               ((\base_block(p_5) ==
                  \base_block((s_3 + (strlen{Here}(s_3) :> integer)))) &&
                 ((p_5 - (s_3 + (strlen{Here}(s_3) :> integer))) <= 0))) &&
              (p_5.charM == (c_14 :%> int8))));
  ensures (_C_456 : ((((_C_459 : (\base_block(\at(s_3,Old)) ==
                                   \base_block(\result))) &&
                        (_C_460 : ((\at(s_3,Old) - \result) <= 0))) &&
                       ((_C_462 : (\base_block(\result) ==
                                    \base_block((\at(s_3,Old) +
                                                  (strlen{Here}(\at(s_3,Old)) :> integer))))) &&
                         (_C_463 : ((\result -
                                      (\at(s_3,Old) +
                                        (strlen{Here}(\at(s_3,Old)) :> integer))) <=
                                     0)))) &&
                      ((_C_465 : (\result.charM == (\at(c_14,Old) :%> int8))) &&
                        (_C_466 : (\forall charP[..] p_6;
                                    ((((\base_block(\at(s_3,Old)) ==
                                         \base_block(p_6)) &&
                                        ((\at(s_3,Old) - p_6) <= 0)) &&
                                       ((\base_block(p_6) ==
                                          \base_block(\result)) &&
                                         ((p_6 - \result) < 0))) ==>
                                      (p_6.charM != (\at(c_14,Old) :%> int8))))))));
{  
   (check (disjoint_behaviors : (! ((\forall charP[..] p_7;
                                      ((((\base_block(s_3) ==
                                           \base_block(p_7)) &&
                                          ((s_3 - p_7) <= 0)) &&
                                         ((\base_block(p_7) ==
                                            \base_block((s_3 +
                                                          (strlen{Here}(
                                                          s_3) :> integer)))) &&
                                           ((p_7 -
                                              (s_3 +
                                                (strlen{Here}(s_3) :> integer))) <=
                                             0))) ==>
                                        (p_7.charM != (c_14 :%> int8)))) &&
                                     (\exists charP[..] p_5;
                                       ((((\base_block(s_3) ==
                                            \base_block(p_5)) &&
                                           ((s_3 - p_5) <= 0)) &&
                                          ((\base_block(p_5) ==
                                             \base_block((s_3 +
                                                           (strlen{Here}(
                                                           s_3) :> integer)))) &&
                                            ((p_5 -
                                               (s_3 +
                                                 (strlen{Here}(s_3) :> integer))) <=
                                              0))) &&
                                         (p_5.charM == (c_14 :%> int8))))))));
   
   (check (complete_behaviors : ((\exists charP[..] p_5;
                                   ((((\base_block(s_3) == \base_block(p_5)) &&
                                       ((s_3 - p_5) <= 0)) &&
                                      ((\base_block(p_5) ==
                                         \base_block((s_3 +
                                                       (strlen{Here}(
                                                       s_3) :> integer)))) &&
                                        ((p_5 -
                                           (s_3 +
                                             (strlen{Here}(s_3) :> integer))) <=
                                          0))) &&
                                     (p_5.charM == (c_14 :%> int8)))) ||
                                  (\forall charP[..] p_7;
                                    ((((\base_block(s_3) == \base_block(p_7)) &&
                                        ((s_3 - p_7) <= 0)) &&
                                       ((\base_block(p_7) ==
                                          \base_block((s_3 +
                                                        (strlen{Here}(
                                                        s_3) :> integer)))) &&
                                         ((p_7 -
                                            (s_3 +
                                              (strlen{Here}(s_3) :> integer))) <=
                                           0))) ==>
                                      (p_7.charM != (c_14 :%> int8)))))));
   
   (var charP[..] os);
   
   (var charP[..] __retres_5);
   
   {  (_C_428 : (os = s_3));
      
      loop 
      behavior default:
        invariant (_C_439 : valid_str{Here}(s_3));
      behavior default:
        invariant (_C_432 : (((_C_434 : (\base_block(os) == \base_block(s_3))) &&
                               (_C_435 : ((os - s_3) <= 0))) &&
                              ((_C_437 : (\base_block(s_3) ==
                                           \base_block((os +
                                                         (strlen{Here}(
                                                         os) :> integer))))) &&
                                (_C_438 : ((s_3 -
                                             (os +
                                               (strlen{Here}(os) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_431 : (\forall charP[..] p_4;
                              ((((\base_block(os) == \base_block(p_4)) &&
                                  ((os - p_4) <= 0)) &&
                                 ((\base_block(p_4) == \base_block(s_3)) &&
                                   ((p_4 - s_3) < 0))) ==>
                                (p_4.charM != (c_14 :%> int8)))));
      behavior default:
        invariant (_C_430 : (strchr{Here}(s_3, (c_14 :%> int8)) ==
                              strchr{Here}(os, (c_14 :%> int8))));
      variant (_C_429 : ((strlen{Here}(os) :> integer) - (s_3 - os)));
      while (true)
      {  
         {  (if (_C_444 : ((_C_443 : ((_C_442 : s_3.charM) :> int32)) !=
                            (_C_441 : ((_C_440 : (c_14 :%> int8)) :> int32)))) then () else 
            (goto while_0_break));
            (if (_C_448 : ((_C_447 : ((_C_446 : s_3.charM) :> int32)) ==
                            (0 :> int32))) then 
            {  (_C_445 : (__retres_5 = null));
               
               (goto return_label)
            } else ());
            (_C_450 : (s_3 = (_C_449 : (s_3 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_451 : (jessie : (((c_14 :%> int8) !=
                                                     (0 :> int8)) <==>
                                                    ((\base_block(s_3) ==
                                                       \base_block((os +
                                                                    (strlen{Here}(
                                                                    os) :> integer)))) &&
                                                      ((s_3 -
                                                         (os +
                                                           (strlen{Here}(
                                                           os) :> integer))) <
                                                        0))))));
         ()
      };
      
      {  
         (assert for default: (_C_452 : (jessie : (((c_14 :%> int8) ==
                                                     (0 :> int8)) <==>
                                                    (s_3 ==
                                                      (os +
                                                        (strlen{Here}(
                                                        os) :> integer)))))));
         ()
      };
      (_C_453 : (__retres_5 = s_3));
      (return_label : 
      (return __retres_5))
   }
}

axiomatic Strchrnul {

  logic charP[..] strchrnul{L}(charP[..] str_15, int8 c_21) =
  \at((if (str_15.charM == c_21) then str_15 else (if (str_15.charM ==
                                                        (0 :> int8)) then str_15 else strchrnul{L}(
                                                  (str_15 + 1), c_21))),L)
   
  lemma strchrnul_mem{L} :
  (_C_470 : (\forall charP[..] str_16;
              (\forall int8 c_22;
                (valid_str{L}(str_16) ==>
                  (((\base_block(str_16) ==
                      \base_block(strchrnul{L}(str_16, c_22))) &&
                     ((str_16 - strchrnul{L}(str_16, c_22)) <= 0)) &&
                    ((\base_block(strchrnul{L}(str_16, c_22)) ==
                       \base_block((str_16 + (strlen{L}(str_16) :> integer)))) &&
                      ((strchrnul{L}(str_16, c_22) -
                         (str_16 + (strlen{L}(str_16) :> integer))) <=
                        0)))))))
   
  lemma strchrnul_iter_one{L} :
  (_C_471 : (\forall charP[..] str_17;
              (\forall int8 c_23;
                (((valid_str{L}(str_17) && (str_17.charM != c_23)) &&
                   (str_17.charM != (0 :> int8))) ==>
                  (strchrnul{L}(str_17, c_23) ==
                    strchrnul{L}((str_17 + 1), c_23))))))
   
  lemma strchrnul_res{L} :
  (_C_472 : (\forall charP[..] str_18;
              (\forall int8 c_24;
                (valid_str{L}(str_18) ==>
                  (((strchrnul{L}(str_18, c_24).charM == (0 :> int8)) &&
                     (! (strchrnul{L}(str_18, c_24).charM == c_24))) ||
                    ((strchrnul{L}(str_18, c_24).charM == c_24) &&
                      (! (strchrnul{L}(str_18, c_24).charM == (0 :> int8)))))))))
   
  lemma strchrnul_strlen{L} :
  (_C_473 : (\forall charP[..] str_19;
              (valid_str{L}(str_19) ==>
                ((strlen{L}(str_19) :> integer) ==
                  (strchrnul{L}(str_19, (0 :> int8)) - str_19)))))
   
  lemma strchrnul_at_end{L} :
  (_C_474 : (\forall charP[..] str_20;
              (\forall int8 c_25;
                ((\at((((\offset_min(\at(str_20,L)) <= \at(0,L)) &&
                         (\offset_max(\at(str_20,L)) >= \at(0,L))) &&
                        true),L) &&
                   ((str_20.charM == (0 :> int8)) || (str_20.charM == c_25))) ==>
                  (strchrnul{L}(str_20, c_25) == str_20)))))
   
  lemma strchrnul_defn{L} :
  (_C_475 : (\forall charP[..] str_21;
              (\forall int8 c_26;
                (\forall integer i_31;
                  (((((valid_str{L}(str_21) && (0 <= i_31)) &&
                       (i_31 <= (strlen{L}(str_21) :> integer))) &&
                      (\forall integer j_7;
                        (((0 <= j_7) && (j_7 < i_31)) ==>
                          ((str_21 + j_7).charM != c_26)))) &&
                     ((str_21 + i_31).charM == c_26)) ==>
                    ((str_21 + i_31) == strchrnul{L}(str_21, c_26)))))))
   
  lemma strchrnul_skipped{L} :
  (_C_476 : (\forall charP[..] str_22;
              (\forall int8 c_27;
                (\forall integer i_32;
                  ((((valid_str{L}(str_22) && (0 <= i_32)) &&
                      (i_32 < (strchrnul{L}(str_22, c_27) - str_22))) &&
                     ((strchrnul{L}(str_22, c_27) - str_22) <=
                       (strlen{L}(str_22) :> integer))) ==>
                    ((str_22 + i_32).charM != c_27))))))
  
}

charP[..] strchrnul(charP[..] s_4, int32 c_15)
  requires (_C_520 : valid_str{Here}(s_4));
behavior default:
  assigns \nothing;
  ensures (_C_501 : ((_C_502 : (\base_block(\result) ==
                                 \base_block(\at(s_4,Old)))) &&
                      ((_C_504 : (\result ==
                                   strchrnul{Here}(\at(s_4,Old),
                                                   (\at(c_15,Old) :%> int8)))) &&
                        (((_C_507 : (\base_block(\at(s_4,Old)) ==
                                      \base_block(\result))) &&
                           (_C_508 : ((\at(s_4,Old) - \result) <= 0))) &&
                          ((_C_510 : (\base_block(\result) ==
                                       \base_block((\at(s_4,Old) +
                                                     (strlen{Here}(\at(s_4,Old)) :> integer))))) &&
                            (_C_511 : ((\result -
                                         (\at(s_4,Old) +
                                           (strlen{Here}(\at(s_4,Old)) :> integer))) <=
                                        0)))))));
behavior not_exists:
  assumes (\forall integer i_34;
            (((0 <= i_34) && (i_34 < (strlen{Here}(s_4) :> integer))) ==>
              ((s_4 + i_34).charM != (c_15 :%> int8))));
  ensures (_C_512 : ((_C_513 : (\result ==
                                 (\at(s_4,Old) +
                                   (strlen{Here}(\at(s_4,Old)) :> integer)))) &&
                      (_C_514 : (\result.charM == (0 :> int8)))));
behavior exists:
  assumes (\exists integer i_33;
            (((0 <= i_33) && (i_33 < (strlen{Here}(s_4) :> integer))) &&
              ((s_4 + i_33).charM == (c_15 :%> int8))));
  ensures (_C_515 : ((_C_516 : (\result.charM == (\at(c_15,Old) :%> int8))) &&
                      (_C_517 : (\forall charP[..] p_9;
                                  ((((\base_block(\at(s_4,Old)) ==
                                       \base_block(p_9)) &&
                                      ((\at(s_4,Old) - p_9) <= 0)) &&
                                     ((\base_block(p_9) ==
                                        \base_block(\result)) &&
                                       ((p_9 - \result) < 0))) ==>
                                    (p_9.charM != (\at(c_15,Old) :%> int8)))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_34;
                                      (((0 <= i_34) &&
                                         (i_34 <
                                           (strlen{Here}(s_4) :> integer))) ==>
                                        ((s_4 + i_34).charM !=
                                          (c_15 :%> int8)))) &&
                                     (\exists integer i_33;
                                       (((0 <= i_33) &&
                                          (i_33 <
                                            (strlen{Here}(s_4) :> integer))) &&
                                         ((s_4 + i_33).charM ==
                                           (c_15 :%> int8))))))));
   
   (check (complete_behaviors : ((\exists integer i_33;
                                   (((0 <= i_33) &&
                                      (i_33 < (strlen{Here}(s_4) :> integer))) &&
                                     ((s_4 + i_33).charM == (c_15 :%> int8)))) ||
                                  (\forall integer i_34;
                                    (((0 <= i_34) &&
                                       (i_34 <
                                         (strlen{Here}(s_4) :> integer))) ==>
                                      ((s_4 + i_34).charM != (c_15 :%> int8)))))));
   
   (var charP[..] os_0);
   
   (var charP[..] __retres_6);
   
   {  (_C_477 : (os_0 = s_4));
      
      loop 
      behavior default:
        invariant (_C_488 : valid_str{Here}(s_4));
      behavior default:
        invariant (_C_481 : (((_C_483 : (\base_block(os_0) ==
                                          \base_block(s_4))) &&
                               (_C_484 : ((os_0 - s_4) <= 0))) &&
                              ((_C_486 : (\base_block(s_4) ==
                                           \base_block((os_0 +
                                                         (strlen{Here}(
                                                         os_0) :> integer))))) &&
                                (_C_487 : ((s_4 -
                                             (os_0 +
                                               (strlen{Here}(os_0) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_480 : (\forall charP[..] p_8;
                              ((((\base_block(os_0) == \base_block(p_8)) &&
                                  ((os_0 - p_8) <= 0)) &&
                                 ((\base_block(p_8) == \base_block(s_4)) &&
                                   ((p_8 - s_4) < 0))) ==>
                                (p_8.charM != (c_15 :%> int8)))));
      behavior default:
        invariant (_C_479 : (strchrnul{Here}(os_0, (c_15 :%> int8)) ==
                              strchrnul{Here}(s_4, (c_15 :%> int8))));
      variant (_C_478 : ((strlen{Here}(os_0) :> integer) - (s_4 - os_0)));
      while (true)
      {  
         {  (if (_C_495 : (((_C_494 : s_4.charM) :> int8) != (0 :> int8))) then 
            (if (_C_493 : ((_C_492 : ((_C_491 : s_4.charM) :> int32)) !=
                            (_C_490 : ((_C_489 : (c_15 :%> int8)) :> int32)))) then () else 
            (goto while_0_break)) else 
            (goto while_0_break));
            (_C_497 : (s_4 = (_C_496 : (s_4 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_498 : (jessie : (((c_15 :%> int8) ==
                                                     (0 :> int8)) ==>
                                                    (s_4.charM ==
                                                      (0 :> int8))))));
         ()
      };
      
      {  
         (assert for default: (_C_499 : (jessie : ((s_4.charM == (0 :> int8)) ==>
                                                    ((s_4 - os_0) ==
                                                      (strlen{Here}(os_0) :> integer))))));
         ()
      };
      (_C_500 : (__retres_6 = s_4));
      
      (return __retres_6)
   }
}

int32 strcmp(charP[..] cs_0, charP[..] ct_0)
  requires ((_C_580 : valid_str{Here}(cs_0)) &&
             (_C_581 : valid_str{Here}(ct_0)));
behavior default:
  assigns \nothing;
  ensures true;
behavior equal:
  assumes (\forall integer i_41;
            (((0 <= i_41) && (i_41 <= (strlen{Here}(cs_0) :> integer))) ==>
              ((cs_0 + i_41).charM == (ct_0 + i_41).charM)));
  ensures (_C_574 : (\result == (0 :> int32)));
behavior not_equal:
  assumes (\exists integer i_39;
            (((0 <= i_39) && (i_39 <= (strlen{Here}(cs_0) :> integer))) &&
              ((cs_0 + i_39).charM != (ct_0 + i_39).charM)));
  ensures (_C_575 : ((_C_576 : ((\result == ((- 1) :> int32)) ||
                                 (\result == (1 :> int32)))) &&
                      (_C_577 : (\exists integer i_40;
                                  (((((0 <= i_40) &&
                                       (i_40 <=
                                         (strlen{Here}(\at(cs_0,Old)) :> integer))) &&
                                      (\forall integer j_9;
                                        (((0 <= j_9) && (j_9 < i_40)) ==>
                                          ((\at(cs_0,Old) + j_9).charM ==
                                            (\at(ct_0,Old) + j_9).charM)))) &&
                                     ((\at(cs_0,Old) + i_40).charM !=
                                       (\at(ct_0,Old) + i_40).charM)) &&
                                    (if (((\at(cs_0,Old) + i_40).charM :%> uint8) <
                                          ((\at(ct_0,Old) + i_40).charM :%> uint8)) then 
                                    (\result ==
                                      ((- 1) :> int32)) else (\result ==
                                                               (1 :> int32))))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_41;
                                      (((0 <= i_41) &&
                                         (i_41 <=
                                           (strlen{Here}(cs_0) :> integer))) ==>
                                        ((cs_0 + i_41).charM ==
                                          (ct_0 + i_41).charM))) &&
                                     (\exists integer i_39;
                                       (((0 <= i_39) &&
                                          (i_39 <=
                                            (strlen{Here}(cs_0) :> integer))) &&
                                         ((cs_0 + i_39).charM !=
                                           (ct_0 + i_39).charM)))))));
   
   (check (complete_behaviors : ((\exists integer i_39;
                                   (((0 <= i_39) &&
                                      (i_39 <=
                                        (strlen{Here}(cs_0) :> integer))) &&
                                     ((cs_0 + i_39).charM !=
                                       (ct_0 + i_39).charM))) ||
                                  (\forall integer i_41;
                                    (((0 <= i_41) &&
                                       (i_41 <=
                                         (strlen{Here}(cs_0) :> integer))) ==>
                                      ((cs_0 + i_41).charM ==
                                        (ct_0 + i_41).charM))))));
   
   (var uint8 c1_0);
   
   (var uint8 c2_0);
   
   (var charP[..] tmp_0_4);
   
   (var charP[..] tmp_0_5);
   
   (var int32 res_2);
   
   (var int32 tmp_1_0);
   
   (var int32 tmp_2_0);
   
   (var int32 __retres_7);
   
   {  
      {  
         (assert for default: (_C_521 : (jessie : ((\forall integer i_35;
                                                     (((0 <= i_35) &&
                                                        (i_35 <=
                                                          (strlen{Here}(
                                                          cs_0) :> integer))) ==>
                                                       ((cs_0 + i_35).charM ==
                                                         (ct_0 + i_35).charM))) <==>
                                                    (\forall integer i_36;
                                                      (((0 <= i_36) &&
                                                         (i_36 <=
                                                           (strlen{Here}(
                                                           cs_0) :> integer))) ==>
                                                        (((cs_0 + i_36).charM :%> uint8) ==
                                                          ((ct_0 + i_36).charM :%> uint8))))))));
         ()
      };
      
      loop 
      behavior default:
        invariant (_C_540 : ((_C_541 : valid_str{Here}(cs_0)) &&
                              (_C_542 : valid_str{Here}(ct_0))));
      behavior default:
        invariant (_C_533 : (((_C_535 : (\base_block(\at(cs_0,Pre)) ==
                                          \base_block(cs_0))) &&
                               (_C_536 : ((\at(cs_0,Pre) - cs_0) <= 0))) &&
                              ((_C_538 : (\base_block(cs_0) ==
                                           \base_block((\at(cs_0,Pre) +
                                                         (strlen{Here}(
                                                         \at(cs_0,Pre)) :> integer))))) &&
                                (_C_539 : ((cs_0 -
                                             (\at(cs_0,Pre) +
                                               (strlen{Here}(\at(cs_0,Pre)) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_526 : (((_C_528 : (\base_block(\at(ct_0,Pre)) ==
                                          \base_block(ct_0))) &&
                               (_C_529 : ((\at(ct_0,Pre) - ct_0) <= 0))) &&
                              ((_C_531 : (\base_block(ct_0) ==
                                           \base_block((\at(ct_0,Pre) +
                                                         (strlen{Here}(
                                                         \at(ct_0,Pre)) :> integer))))) &&
                                (_C_532 : ((ct_0 -
                                             (\at(ct_0,Pre) +
                                               (strlen{Here}(\at(ct_0,Pre)) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_525 : ((cs_0 - \at(cs_0,Pre)) ==
                              (ct_0 - \at(ct_0,Pre))));
      behavior default:
        invariant (_C_524 : (\forall integer i_38;
                              (((0 <= i_38) &&
                                 (i_38 < (cs_0 - \at(cs_0,Pre)))) ==>
                                ((\at(cs_0,Pre) + i_38).charM ==
                                  (\at(ct_0,Pre) + i_38).charM))));
      behavior default:
        invariant (_C_523 : ((strlen{Here}(cs_0) :> integer) ==
                              ((strlen{Here}(\at(cs_0,Pre)) :> integer) -
                                (cs_0 - \at(cs_0,Pre)))));
      variant (_C_522 : ((strlen{Here}(\at(cs_0,Pre)) :> integer) -
                          (cs_0 - \at(cs_0,Pre))));
      while (true)
      {  
         {  
            {  (_C_543 : (tmp_0_4 = cs_0));
               (_C_545 : (cs_0 = (_C_544 : (cs_0 + (1 :> int32)))));
               (_C_548 : (c1_0 = (_C_547 : ((_C_546 : tmp_0_4.charM) :%> uint8))))
            };
            
            {  (_C_549 : (tmp_0_5 = ct_0));
               (_C_551 : (ct_0 = (_C_550 : (ct_0 + (1 :> int32)))));
               (_C_554 : (c2_0 = (_C_553 : ((_C_552 : tmp_0_5.charM) :%> uint8))))
            };
            (if (_C_570 : ((_C_569 : (c1_0 :> int32)) !=
                            (_C_568 : (c2_0 :> int32)))) then 
            {  (if (_C_559 : ((_C_558 : (c1_0 :> int32)) <
                               (_C_557 : (c2_0 :> int32)))) then (_C_556 : (tmp_1_0 = (-1 :> int32))) else 
               (_C_555 : (tmp_1_0 = (1 :> int32))));
               (_C_560 : (res_2 = tmp_1_0));
               
               {  
                  (assert for default: (_C_561 : (jessie : (\exists integer i_37;
                                                             ((((((0 <= i_37) &&
                                                                   (i_37 <=
                                                                    (strlen{Here}(
                                                                    \at(cs_0,Pre)) :> integer))) &&
                                                                  (\forall integer j_8;
                                                                    (((0 <=
                                                                    j_8) &&
                                                                    (j_8 <
                                                                    i_37)) ==>
                                                                    ((\at(cs_0,Pre) +
                                                                    j_8).charM ==
                                                                    (\at(ct_0,Pre) +
                                                                    j_8).charM)))) &&
                                                                 ((\at(cs_0,Pre) +
                                                                    i_37).charM !=
                                                                   (\at(ct_0,Pre) +
                                                                    i_37).charM)) &&
                                                                (if (((\at(cs_0,Pre) +
                                                                    i_37).charM :%> uint8) <
                                                                    ((\at(ct_0,Pre) +
                                                                    i_37).charM :%> uint8)) then 
                                                                (res_2 ==
                                                                  ((- 1) :> int32)) else 
                                                                (res_2 ==
                                                                  (1 :> int32)))) &&
                                                               (i_37 ==
                                                                 ((cs_0 -
                                                                    \at(cs_0,Pre)) -
                                                                   1)))))));
                  ()
               };
               
               {  (if (_C_566 : ((_C_565 : (c1_0 :> int32)) <
                                  (_C_564 : (c2_0 :> int32)))) then (_C_563 : (tmp_2_0 = (-1 :> int32))) else 
                  (_C_562 : (tmp_2_0 = (1 :> int32))));
                  (_C_567 : (__retres_7 = tmp_2_0));
                  
                  (goto return_label)
               }
            } else ());
            (if (_C_571 : (! ((c1_0 :> uint8) != (0 :> uint8)))) then 
            (goto while_0_break) else ());
            
            {  
               (assert for default: (_C_572 : (jessie : ((\at(cs_0,Pre) +
                                                           ((cs_0 -
                                                              \at(cs_0,Pre)) -
                                                             1)).charM ==
                                                          (\at(ct_0,Pre) +
                                                            ((cs_0 -
                                                               \at(cs_0,Pre)) -
                                                              1)).charM))));
               ()
            }
         }
      };
      (while_0_break : ());
      (_C_573 : (__retres_7 = (0 :> int32)));
      (return_label : 
      (return __retres_7))
   }
}

charP[..] strcpy(charP[..] dest_9, charP[..] src_6)
  requires ((_C_623 : valid_str{Here}(src_6)) &&
             ((_C_624 : \at((if (\at(0,Here) <=
                                  \at(strlen{Here}(src_6),Here)) then 
                            (((\offset_min(\at(dest_9,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(dest_9,Here)) >=
                                 \at(strlen{Here}(src_6),Here))) &&
                              (\forall integer __framac_tmp16;
                                (((\at(0,Here) <= __framac_tmp16) &&
                                   (__framac_tmp16 <=
                                     \at(strlen{Here}(src_6),Here))) ==>
                                  true))) else true),Here)) &&
               (_C_625 : (\base_block(dest_9) != \base_block(src_6)))));
behavior default:
  assigns (dest_9 + [0..(strlen{Old}(src_6) :> integer)]).charM;
  ensures (_C_618 : ((_C_619 : valid_str{Here}(\result)) &&
                      ((_C_621 : (\result == \at(dest_9,Old))) &&
                        (_C_622 : (\forall integer i_43;
                                    (((0 <= i_43) &&
                                       (i_43 <=
                                         (strlen{Here}(\at(src_6,Old)) :> integer))) ==>
                                      ((\result + i_43).charM ==
                                        (\at(src_6,Old) + i_43).charM)))))));
{  
   (var charP[..] tmp_0_6);
   
   (var charP[..] osrc_0);
   
   (var charP[..] tmp_0_7);
   
   (var int8 tmp_1_1);
   
   (var charP[..] tmp_2_1);
   
   {  (_C_582 : (tmp_0_6 = dest_9));
      (_C_583 : (osrc_0 = src_6));
      
      {  
         (assert for default: (_C_584 : (jessie : valid_str{Here}(osrc_0))));
         ()
      };
      
      loop 
      behavior default:
        invariant (_C_597 : (((_C_599 : (\base_block(osrc_0) ==
                                          \base_block(src_6))) &&
                               (_C_600 : ((osrc_0 - src_6) <= 0))) &&
                              ((_C_602 : (\base_block(src_6) ==
                                           \base_block((osrc_0 +
                                                         (strlen{Here}(
                                                         osrc_0) :> integer))))) &&
                                (_C_603 : ((src_6 -
                                             (osrc_0 +
                                               (strlen{Here}(osrc_0) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_590 : (((_C_592 : (\base_block(tmp_0_6) ==
                                          \base_block(dest_9))) &&
                               (_C_593 : ((tmp_0_6 - dest_9) <= 0))) &&
                              ((_C_595 : (\base_block(dest_9) ==
                                           \base_block((tmp_0_6 +
                                                         (strlen{Here}(
                                                         osrc_0) :> integer))))) &&
                                (_C_596 : ((dest_9 -
                                             (tmp_0_6 +
                                               (strlen{Here}(osrc_0) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_589 : valid_str{Here}(src_6));
      behavior default:
        invariant (_C_588 : ((dest_9 - tmp_0_6) == (src_6 - osrc_0)));
      behavior default:
        invariant (_C_587 : ((strlen{Here}(src_6) :> integer) ==
                              ((strlen{Here}(osrc_0) :> integer) -
                                (src_6 - osrc_0))));
      behavior default:
        invariant (_C_586 : (\forall integer i_42;
                              (((0 <= i_42) && (i_42 < (src_6 - osrc_0))) ==>
                                ((tmp_0_6 + i_42).charM ==
                                  (osrc_0 + i_42).charM))));
      variant (_C_585 : ((strlen{Here}(osrc_0) :> integer) -
                          (src_6 - osrc_0)));
      while (true)
      {  
         {  
            {  (_C_604 : (tmp_0_7 = dest_9));
               (_C_606 : (dest_9 = (_C_605 : (dest_9 + (1 :> int32)))));
               (_C_607 : (tmp_2_1 = src_6));
               (_C_609 : (src_6 = (_C_608 : (src_6 + (1 :> int32)))));
               (_C_611 : (tmp_1_1 = (_C_610 : tmp_2_1.charM)))
            };
            (_C_613 : ((_C_612 : tmp_0_7.charM) = tmp_1_1));
            (if (_C_615 : ((_C_614 : (tmp_1_1 :> int32)) != (0 :> int32))) then () else 
            (goto while_0_break))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_616 : (jessie : (((dest_9 + (- 1)).charM ==
                                                     (0 :> int8)) &&
                                                    ((src_6 + (- 1)).charM ==
                                                      (0 :> int8))))));
         ()
      };
      
      {  
         (assert for default: (_C_617 : (jessie : valid_str{Here}(tmp_0_6))));
         ()
      };
      
      (return tmp_0_6)
   }
}

axiomatic StrSpn {

  predicate in_array{L}(charP[..] s_11, int8 c_28) =
  \at((\exists charP[..] p_10;
        ((((\base_block(s_11) == \base_block(p_10)) && ((s_11 - p_10) <= 0)) &&
           ((\base_block(p_10) ==
              \base_block((s_11 + (strlen{L}(s_11) :> integer)))) &&
             ((p_10 - (s_11 + (strlen{L}(s_11) :> integer))) < 0))) &&
          (p_10.charM == c_28))),L)
   
  lemma in_array_shift1{L} :
  (_C_626 : (\forall charP[..] s_12;
              (\forall int8 c_29;
                ((((valid_str{L}(s_12) && (s_12 != null)) &&
                    (s_12.charM != c_29)) ==>
                   in_array{L}(s_12, c_29)) <==>
                  in_array{L}((s_12 + 1), c_29)))))
   
  lemma in_array_true{L} :
  (_C_627 : (\forall charP[..] s_13;
              (\forall int8 c_30;
                (((valid_str{L}(s_13) && (s_13 != null)) &&
                   (s_13.charM == c_30)) ==>
                  in_array{L}(s_13, c_30)))))
   
  lemma in_array_false{L} :
  (_C_628 : (\forall charP[..] s_14;
              (\forall int8 c_31;
                ((valid_str{L}(s_14) && (s_14 == null)) ==>
                  (! in_array{L}(s_14, c_31))))))
   
  logic integer strspn(charP[..] s_15, charP[..] accept)
   
  lemma strspn_strend{L} :
  (_C_629 : (\forall charP[..] s_16;
              (\forall charP[..] accept_0;
                ((\at((((\offset_min(\at(s_16,L)) <= \at(0,L)) &&
                         (\offset_max(\at(s_16,L)) >= \at(0,L))) &&
                        true),L) &&
                   (s_16.charM == (0 :> int8))) ==>
                  (strspn(s_16, accept_0) == 0)))))
   
  lemma strspn_empty_accept{L} :
  (_C_630 : (\forall charP[..] s_17;
              (\forall charP[..] accept_1;
                ((\at((((\offset_min(\at(accept_1,L)) <= \at(0,L)) &&
                         (\offset_max(\at(accept_1,L)) >= \at(0,L))) &&
                        true),L) &&
                   (accept_1.charM == (0 :> int8))) ==>
                  (strspn(s_17, accept_1) == 0)))))
   
  lemma strspn_range{L} :
  (_C_631 : (\forall charP[..] s_18;
              (\forall charP[..] accept_2;
                ((valid_str{L}(s_18) && valid_str{L}(accept_2)) ==>
                  ((0 <= strspn(s_18, accept_2)) &&
                    (strspn(s_18, accept_2) <= (strlen{L}(s_18) :> integer)))))))
   
  lemma strspn_shift1{L} :
  (_C_632 : (\forall charP[..] s_19;
              (\forall charP[..] accept_3;
                ((((valid_str{L}(s_19) && valid_str{L}(accept_3)) &&
                    (s_19.charM != (0 :> int8))) &&
                   in_array{L}(accept_3, s_19.charM)) ==>
                  (strspn(s_19, accept_3) ==
                    (strspn((s_19 + 1), accept_3) + 1))))))
   
  lemma strspn_stop_not_in_accept{L} :
  (_C_633 : (\forall charP[..] s_20;
              (\forall charP[..] accept_4;
                ((((valid_str{L}(s_20) && valid_str{L}(accept_4)) &&
                    (s_20.charM != (0 :> int8))) &&
                   (! in_array{L}(accept_4, s_20.charM))) ==>
                  (strspn(s_20, accept_4) == 0)))))
  
}

axiomatic StrCSpn {

  logic integer strcspn(charP[..] s_21, charP[..] reject)
   
  lemma strcspn_strend{L} :
  (_C_634 : (\forall charP[..] s_22;
              (\forall charP[..] reject_0;
                ((\at((((\offset_min(\at(s_22,L)) <= \at(0,L)) &&
                         (\offset_max(\at(s_22,L)) >= \at(0,L))) &&
                        true),L) &&
                   (s_22.charM == (0 :> int8))) ==>
                  (strcspn(s_22, reject_0) == 0)))))
   
  lemma strcspn_empty_reject{L} :
  (_C_635 : (\forall charP[..] s_23;
              (\forall charP[..] reject_1;
                (((valid_str{L}(s_23) && valid_str{L}(reject_1)) &&
                   (reject_1.charM == (0 :> int8))) ==>
                  (strcspn(s_23, reject_1) == (strlen{L}(s_23) :> integer))))))
   
  lemma strcspn_range{L} :
  (_C_636 : (\forall charP[..] s_24;
              (\forall charP[..] reject_2;
                ((valid_str{L}(s_24) && valid_str{L}(reject_2)) ==>
                  ((0 <= strcspn(s_24, reject_2)) &&
                    (strcspn(s_24, reject_2) <= (strlen{L}(s_24) :> integer)))))))
   
  lemma strcspn_shift1{L} :
  (_C_637 : (\forall charP[..] s_25;
              (\forall charP[..] reject_3;
                ((((valid_str{L}(s_25) && valid_str{L}(reject_3)) &&
                    (s_25.charM != (0 :> int8))) &&
                   (! in_array{L}(reject_3, s_25.charM))) ==>
                  (strcspn(s_25, reject_3) ==
                    (strcspn((s_25 + 1), reject_3) + 1))))))
   
  lemma strcspn_stop_in_reject{L} :
  (_C_638 : (\forall charP[..] s_26;
              (\forall charP[..] reject_4;
                ((((valid_str{L}(s_26) && valid_str{L}(reject_4)) &&
                    (s_26.charM != (0 :> int8))) &&
                   in_array{L}(reject_4, s_26.charM)) ==>
                  (strcspn(s_26, reject_4) == 0)))))
  
}

uint64 strcspn(charP[..] s_5, charP[..] reject)
  requires ((_C_702 : valid_str{Here}(s_5)) &&
             (_C_703 : valid_str{Here}(reject)));
behavior default:
  assigns \nothing;
  ensures (_C_691 : ((_C_692 : ((\result :> integer) ==
                                 strcspn(\at(s_5,Old), \at(reject,Old)))) &&
                      (((_C_695 : ((0 :> uint64) <= \result)) &&
                         (_C_696 : (\result <= strlen{Here}(\at(s_5,Old))))) &&
                        (_C_697 : (\forall charP[..] p_13;
                                    (\forall charP[..] t_3;
                                      ((((((\base_block(\at(s_5,Old)) ==
                                             \base_block(p_13)) &&
                                            ((\at(s_5,Old) - p_13) <= 0)) &&
                                           ((\base_block(p_13) ==
                                              \base_block((\at(s_5,Old) +
                                                            (\result :> integer)))) &&
                                             ((p_13 -
                                                (\at(s_5,Old) +
                                                  (\result :> integer))) <
                                               0))) &&
                                          ((\base_block(\at(reject,Old)) ==
                                             \base_block(t_3)) &&
                                            ((\at(reject,Old) - t_3) <= 0))) &&
                                         ((\base_block(t_3) ==
                                            \base_block((\at(reject,Old) +
                                                          (strlen{Here}(
                                                          \at(reject,Old)) :> integer)))) &&
                                           ((t_3 -
                                              (\at(reject,Old) +
                                                (strlen{Here}(\at(reject,Old)) :> integer))) <
                                             0))) ==>
                                        (p_13.charM != t_3.charM))))))));
behavior exists:
  assumes (\exists charP[..] p_12;
            (\exists charP[..] t_1;
              ((((((\base_block(s_5) == \base_block(p_12)) &&
                    ((s_5 - p_12) <= 0)) &&
                   ((\base_block(p_12) ==
                      \base_block((s_5 + (strlen{Here}(s_5) :> integer)))) &&
                     ((p_12 - (s_5 + (strlen{Here}(s_5) :> integer))) < 0))) &&
                  ((\base_block(reject) == \base_block(t_1)) &&
                    ((reject - t_1) <= 0))) &&
                 ((\base_block(t_1) ==
                    \base_block((reject + (strlen{Here}(reject) :> integer)))) &&
                   ((t_1 - (reject + (strlen{Here}(reject) :> integer))) < 0))) &&
                (p_12.charM == t_1.charM))));
  ensures (_C_698 : (\exists charP[..] t_2;
                      ((((\base_block(\at(reject,Old)) == \base_block(t_2)) &&
                          ((\at(reject,Old) - t_2) <= 0)) &&
                         ((\base_block(t_2) ==
                            \base_block((\at(reject,Old) +
                                          (strlen{Here}(\at(reject,Old)) :> integer)))) &&
                           ((t_2 -
                              (\at(reject,Old) +
                                (strlen{Here}(\at(reject,Old)) :> integer))) <
                             0))) &&
                        ((\at(s_5,Old) + (\result :> integer)).charM ==
                          t_2.charM))));
behavior not_exists:
  assumes (\forall charP[..] p_11;
            (\forall charP[..] t_0;
              ((((((\base_block(s_5) == \base_block(p_11)) &&
                    ((s_5 - p_11) <= 0)) &&
                   ((\base_block(p_11) ==
                      \base_block((s_5 + (strlen{Here}(s_5) :> integer)))) &&
                     ((p_11 - (s_5 + (strlen{Here}(s_5) :> integer))) < 0))) &&
                  ((\base_block(reject) == \base_block(t_0)) &&
                    ((reject - t_0) <= 0))) &&
                 ((\base_block(t_0) ==
                    \base_block((reject + (strlen{Here}(reject) :> integer)))) &&
                   ((t_0 - (reject + (strlen{Here}(reject) :> integer))) < 0))) ==>
                (p_11.charM != t_0.charM))));
  ensures (_C_699 : (\result == strlen{Here}(\at(s_5,Old))));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_12;
                                      (\exists charP[..] t_1;
                                        ((((((\base_block(s_5) ==
                                               \base_block(p_12)) &&
                                              ((s_5 - p_12) <= 0)) &&
                                             ((\base_block(p_12) ==
                                                \base_block((s_5 +
                                                              (strlen{Here}(
                                                              s_5) :> integer)))) &&
                                               ((p_12 -
                                                  (s_5 +
                                                    (strlen{Here}(s_5) :> integer))) <
                                                 0))) &&
                                            ((\base_block(reject) ==
                                               \base_block(t_1)) &&
                                              ((reject - t_1) <= 0))) &&
                                           ((\base_block(t_1) ==
                                              \base_block((reject +
                                                            (strlen{Here}(
                                                            reject) :> integer)))) &&
                                             ((t_1 -
                                                (reject +
                                                  (strlen{Here}(reject) :> integer))) <
                                               0))) &&
                                          (p_12.charM == t_1.charM)))) &&
                                     (\forall charP[..] p_11;
                                       (\forall charP[..] t_0;
                                         ((((((\base_block(s_5) ==
                                                \base_block(p_11)) &&
                                               ((s_5 - p_11) <= 0)) &&
                                              ((\base_block(p_11) ==
                                                 \base_block((s_5 +
                                                               (strlen{Here}(
                                                               s_5) :> integer)))) &&
                                                ((p_11 -
                                                   (s_5 +
                                                     (strlen{Here}(s_5) :> integer))) <
                                                  0))) &&
                                             ((\base_block(reject) ==
                                                \base_block(t_0)) &&
                                               ((reject - t_0) <= 0))) &&
                                            ((\base_block(t_0) ==
                                               \base_block((reject +
                                                             (strlen{Here}(
                                                             reject) :> integer)))) &&
                                              ((t_0 -
                                                 (reject +
                                                   (strlen{Here}(reject) :> integer))) <
                                                0))) ==>
                                           (p_11.charM != t_0.charM))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p_11;
                                   (\forall charP[..] t_0;
                                     ((((((\base_block(s_5) ==
                                            \base_block(p_11)) &&
                                           ((s_5 - p_11) <= 0)) &&
                                          ((\base_block(p_11) ==
                                             \base_block((s_5 +
                                                           (strlen{Here}(
                                                           s_5) :> integer)))) &&
                                            ((p_11 -
                                               (s_5 +
                                                 (strlen{Here}(s_5) :> integer))) <
                                              0))) &&
                                         ((\base_block(reject) ==
                                            \base_block(t_0)) &&
                                           ((reject - t_0) <= 0))) &&
                                        ((\base_block(t_0) ==
                                           \base_block((reject +
                                                         (strlen{Here}(
                                                         reject) :> integer)))) &&
                                          ((t_0 -
                                             (reject +
                                               (strlen{Here}(reject) :> integer))) <
                                            0))) ==>
                                       (p_11.charM != t_0.charM)))) ||
                                  (\exists charP[..] p_12;
                                    (\exists charP[..] t_1;
                                      ((((((\base_block(s_5) ==
                                             \base_block(p_12)) &&
                                            ((s_5 - p_12) <= 0)) &&
                                           ((\base_block(p_12) ==
                                              \base_block((s_5 +
                                                            (strlen{Here}(
                                                            s_5) :> integer)))) &&
                                             ((p_12 -
                                                (s_5 +
                                                  (strlen{Here}(s_5) :> integer))) <
                                               0))) &&
                                          ((\base_block(reject) ==
                                             \base_block(t_1)) &&
                                            ((reject - t_1) <= 0))) &&
                                         ((\base_block(t_1) ==
                                            \base_block((reject +
                                                          (strlen{Here}(
                                                          reject) :> integer)))) &&
                                           ((t_1 -
                                              (reject +
                                                (strlen{Here}(reject) :> integer))) <
                                             0))) &&
                                        (p_12.charM == t_1.charM)))))));
   
   (var charP[..] p_1);
   
   (var charP[..] r);
   
   (var uint64 count_5);
   
   (var uint64 __retres_8);
   
   {  (_C_640 : (count_5 = (_C_639 : ((0 :> int32) :> uint64))));
      (_C_641 : (p_1 = s_5));
      
      loop 
      behavior default:
        invariant (_C_650 : (((_C_652 : (\base_block(s_5) ==
                                          \base_block(p_1))) &&
                               (_C_653 : ((s_5 - p_1) <= 0))) &&
                              ((_C_655 : (\base_block(p_1) ==
                                           \base_block((s_5 +
                                                         (strlen{Here}(
                                                         s_5) :> integer))))) &&
                                (_C_656 : ((p_1 -
                                             (s_5 +
                                               (strlen{Here}(s_5) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_647 : ((_C_648 : ((0 :> uint64) <= count_5)) &&
                              (_C_649 : (count_5 <= strlen{Here}(s_5)))));
      behavior default:
        invariant (_C_646 : ((count_5 :> integer) == (p_1 - s_5)));
      behavior default:
        invariant (_C_645 : (\forall charP[..] c_33;
                              (\forall charP[..] t;
                                ((((((\base_block(s_5) == \base_block(c_33)) &&
                                      ((s_5 - c_33) <= 0)) &&
                                     ((\base_block(c_33) == \base_block(p_1)) &&
                                       ((c_33 - p_1) < 0))) &&
                                    ((\base_block(reject) == \base_block(t)) &&
                                      ((reject - t) <= 0))) &&
                                   ((\base_block(t) ==
                                      \base_block((reject +
                                                    (strlen{Here}(reject) :> integer)))) &&
                                     ((t -
                                        (reject +
                                          (strlen{Here}(reject) :> integer))) <
                                       0))) ==>
                                  (c_33.charM != t.charM)))));
      behavior default:
        invariant (_C_644 : valid_str{Here}(p_1));
      behavior default:
        invariant (_C_643 : (strcspn(s_5, reject) ==
                              (strcspn(p_1, reject) + (count_5 :> integer))));
      variant (_C_642 : ((strlen{Here}(s_5) :> integer) - (p_1 - s_5)));
      while (true)
      {  
         {  (if (_C_659 : ((_C_658 : ((_C_657 : p_1.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break));
            
            {  (_C_660 : (r = reject));
               
               loop 
               behavior default:
                 invariant (_C_665 : (((_C_667 : (\base_block(reject) ==
                                                   \base_block(r))) &&
                                        (_C_668 : ((reject - r) <= 0))) &&
                                       ((_C_670 : (\base_block(r) ==
                                                    \base_block((reject +
                                                                  (strlen{Here}(
                                                                  reject) :> integer))))) &&
                                         (_C_671 : ((r -
                                                      (reject +
                                                        (strlen{Here}(
                                                        reject) :> integer))) <=
                                                     0)))));
               behavior default:
                 invariant (_C_664 : (\forall charP[..] c_32;
                                       ((((\base_block(reject) ==
                                            \base_block(c_32)) &&
                                           ((reject - c_32) <= 0)) &&
                                          ((\base_block(c_32) ==
                                             \base_block(r)) &&
                                            ((c_32 - r) < 0))) ==>
                                         (c_32.charM != p_1.charM))));
               behavior default:
                 invariant (_C_663 : valid_str{Here}(r));
               behavior default:
                 invariant (_C_662 : (in_array{Here}(reject, p_1.charM) ==>
                                       in_array{Here}(r, p_1.charM)));
               variant (_C_661 : ((strlen{Here}(reject) :> integer) -
                                   (r - reject)));
               while (true)
               {  
                  {  (if (_C_674 : ((_C_673 : ((_C_672 : r.charM) :> int32)) !=
                                     (0 :> int32))) then () else 
                     (goto while_1_break));
                     
                     {  (if (_C_681 : ((_C_680 : ((_C_679 : p_1.charM) :> int32)) ==
                                        (_C_678 : ((_C_677 : r.charM) :> int32)))) then 
                        {  
                           {  
                              (assert for default: (_C_675 : (jessie : in_array{Here}(
                                                             reject,
                                                             p_1.charM))));
                              ()
                           };
                           
                           {  (_C_676 : (__retres_8 = count_5));
                              
                              (goto return_label)
                           }
                        } else ())
                     };
                     (_C_683 : (r = (_C_682 : (r + (1 :> int32)))))
                  }
               };
               (while_1_break : ());
               
               {  
                  (assert for default: (_C_684 : (jessie : (! in_array{Here}(
                                                           reject, p_1.charM)))));
                  ()
               };
               (_C_687 : (count_5 = (_C_686 : ((_C_685 : (count_5 +
                                                           (1 :> uint64))) :> uint64))))
            };
            (_C_689 : (p_1 = (_C_688 : (p_1 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_690 : (__retres_8 = count_5));
      (return_label : 
      (return __retres_8))
   }
}

uint64 strlen(charP[..] s_6)
  requires (_C_728 : valid_str{Here}(s_6));
behavior default:
  assigns \nothing;
  ensures (_C_723 : ((_C_724 : (\result == strlen{Here}(\at(s_6,Old)))) &&
                      ((_C_726 : ((\at(s_6,Old) + (\result :> integer)).charM ==
                                   (0 :> int8))) &&
                        (_C_727 : (\forall integer i_44;
                                    (((0 <= i_44) &&
                                       (i_44 < (\result :> integer))) ==>
                                      ((\at(s_6,Old) + i_44).charM !=
                                        (0 :> int8))))))));
{  
   (var charP[..] sc);
   
   (var uint64 __retres_9);
   
   {  (_C_704 : (sc = s_6));
      
      loop 
      behavior default:
        invariant (_C_708 : (((_C_710 : (\base_block(s_6) == \base_block(sc))) &&
                               (_C_711 : ((s_6 - sc) <= 0))) &&
                              ((_C_713 : (\base_block(sc) ==
                                           \base_block((s_6 +
                                                         (strlen{Here}(
                                                         s_6) :> integer))))) &&
                                (_C_714 : ((sc -
                                             (s_6 +
                                               (strlen{Here}(s_6) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_707 : valid_str{Here}(sc));
      behavior default:
        invariant (_C_706 : ((strlen{Here}(s_6) :> integer) ==
                              ((strlen{Here}(sc) :> integer) + (sc - s_6))));
      variant (_C_705 : ((strlen{Here}(s_6) :> integer) - (sc - s_6)));
      while (true)
      {  
         {  (if (_C_717 : ((_C_716 : ((_C_715 : sc.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break));
            (_C_719 : (sc = (_C_718 : (sc + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_722 : (__retres_9 = (_C_721 : ((_C_720 : (sc - s_6)) :> uint64))));
      
      (return __retres_9)
   }
}

axiomatic Strnlen {

  predicate valid_strn{L}(charP[..] s_27, uint64 cnt) =
  \at(((\exists uint64 n_4;
         (((n_4 < cnt) && ((s_27 + (n_4 :> integer)).charM == (0 :> int8))) &&
           \at((if (\at(0,L) <= \at(n_4,L)) then (((\offset_min(\at(s_27,L)) <=
                                                     \at(0,L)) &&
                                                    (\offset_max(\at(s_27,L)) >=
                                                      \at(n_4,L))) &&
                                                   (\forall integer __framac_tmp21;
                                                     (((\at(0,L) <=
                                                         __framac_tmp21) &&
                                                        (__framac_tmp21 <=
                                                          \at(n_4,L))) ==>
                                                       true))) else true),L))) ||
        \at((if (\at(0,L) <= \at(cnt,L)) then (((\offset_min(\at(s_27,L)) <=
                                                  \at(0,L)) &&
                                                 (\offset_max(\at(s_27,L)) >=
                                                   \at(cnt,L))) &&
                                                (\forall integer __framac_tmp20;
                                                  (((\at(0,L) <=
                                                      __framac_tmp20) &&
                                                     (__framac_tmp20 <=
                                                       \at(cnt,L))) ==>
                                                    true))) else true),L)),L)
   
  lemma valid_strn_shift1{L} :
  (_C_729 : (\forall charP[..] s_28;
              (\forall uint64 cnt_0;
                (((valid_strn{L}(s_28, cnt_0) && (cnt_0 > (0 :> uint64))) &&
                   (s_28.charM != (0 :> int8))) ==>
                  valid_strn{L}((s_28 + 1),
                                (((cnt_0 :> integer) - 1) :> uint64))))))
   
  lemma valid_str_to_valid_strn{L} :
  (_C_730 : (\forall charP[..] s_29;
              (\forall uint64 cnt_1;
                (valid_str{L}(s_29) ==> valid_strn{L}(s_29, cnt_1)))))
   
  logic uint64 strnlen{L}(charP[..] s_30, uint64 cnt_2) =
  \at((if (((s_30 + 0).charM == (0 :> int8)) || (cnt_2 == (0 :> uint64))) then (0 :> uint64) else (
      (1 +
        (strnlen{L}((s_30 + 1), (((cnt_2 :> integer) - 1) :> uint64)) :> integer)) :> uint64)),L)
   
  lemma strnlen_range{L} :
  (_C_731 : (\forall charP[..] s_31;
              (\forall uint64 cnt_3;
                (valid_strn{L}(s_31, cnt_3) ==>
                  (((0 :> uint64) <= strnlen{L}(s_31, cnt_3)) &&
                    (strnlen{L}(s_31, cnt_3) <= cnt_3))))))
   
  lemma strnlen_null{L} :
  (_C_732 : (\forall charP[..] s_32;
              (\forall uint64 cnt_4;
                (\at((((\offset_min(\at(s_32,L)) <= \at(0,L)) &&
                        (\offset_max(\at(s_32,L)) >= \at(0,L))) &&
                       true),L) ==>
                  ((strnlen{L}(s_32, cnt_4) == (0 :> uint64)) <==>
                    ((s_32.charM == (0 :> int8)) || (cnt_4 == (0 :> uint64))))))))
   
  lemma strnlen_zero_count{L} :
  (_C_733 : (\forall charP[..] s_33;
              (strnlen{L}(s_33, (0 :> uint64)) == (0 :> uint64))))
   
  lemma strnlen_min_len{L} :
  (_C_734 : (\forall charP[..] s_34;
              (\forall uint64 cnt_5;
                ((\exists uint64 n_5;
                   (((n_5 < cnt_5) &&
                      ((s_34 + (n_5 :> integer)).charM == (0 :> int8))) &&
                     \at((if (\at(0,L) <= \at(n_5,L)) then (((\offset_min(
                                                               \at(s_34,L)) <=
                                                               \at(0,L)) &&
                                                              (\offset_max(
                                                                \at(s_34,L)) >=
                                                                \at(n_5,L))) &&
                                                             (\forall integer __framac_tmp23;
                                                               (((\at(0,L) <=
                                                                   __framac_tmp23) &&
                                                                  (__framac_tmp23 <=
                                                                    \at(n_5,L))) ==>
                                                                 true))) else true),L))) ==>
                  ((strnlen{L}(s_34, cnt_5) :> integer) ==
                    \integer_min((strlen{L}(s_34) :> integer),
                                 (cnt_5 :> integer)))))))
   
  lemma strnlen_before_zero{L} :
  (_C_735 : (\forall charP[..] s_35;
              (\forall uint64 i_45;
                (\forall uint64 cnt_6;
                  (((valid_strn{L}(s_35, cnt_6) && ((0 :> uint64) <= i_45)) &&
                     (i_45 < strnlen{L}(s_35, cnt_6))) ==>
                    ((s_35 + (i_45 :> integer)).charM != (0 :> int8)))))))
   
  lemma strnlen_at_zero{L} :
  (_C_736 : (\forall charP[..] s_36;
              (\forall uint64 cnt_7;
                ((valid_strn{L}(s_36, cnt_7) &&
                   (strnlen{L}(s_36, cnt_7) < cnt_7)) ==>
                  ((s_36 + (strnlen{L}(s_36, cnt_7) :> integer)).charM ==
                    (0 :> int8))))))
   
  lemma strnlen_at_cnt{L} :
  (_C_737 : (\forall charP[..] s_37;
              (\forall uint64 i_46;
                (\forall uint64 cnt_8;
                  ((valid_strn{L}(s_37, cnt_8) &&
                     (i_46 == strnlen{L}(s_37, cnt_8))) ==>
                    (((s_37 + (i_46 :> integer)).charM == (0 :> int8)) ||
                      (i_46 == cnt_8)))))))
   
  lemma strnlen_zero{L} :
  (_C_738 : (\forall charP[..] s_38;
              (\forall uint64 cnt_9;
                (\forall uint64 n_6;
                  ((((valid_strn{L}(s_38, cnt_9) && (n_6 < cnt_9)) &&
                      ((s_38 + (n_6 :> integer)).charM == (0 :> int8))) &&
                     (\forall uint64 i_47;
                       ((i_47 < n_6) ==>
                         ((s_38 + (i_47 :> integer)).charM != (0 :> int8))))) ==>
                    (strnlen{L}(s_38, cnt_9) == n_6))))))
   
  lemma strnlen_cnt{L} :
  (_C_739 : (\forall charP[..] s_39;
              (\forall uint64 cnt_10;
                ((valid_strn{L}(s_39, cnt_10) &&
                   (\forall uint64 n_7;
                     ((n_7 < cnt_10) ==>
                       ((s_39 + (n_7 :> integer)).charM != (0 :> int8))))) ==>
                  (strnlen{L}(s_39, cnt_10) == cnt_10)))))
   
  lemma strnlen_shift{L} :
  (_C_740 : (\forall charP[..] s_40;
              (\forall uint64 i_48;
                (\forall uint64 cnt_11;
                  ((valid_strn{L}(s_40, cnt_11) &&
                     (i_48 <= strnlen{L}(s_40, cnt_11))) ==>
                    ((strnlen{L}((s_40 + (i_48 :> integer)), cnt_11) :> integer) ==
                      ((strnlen{L}(s_40, cnt_11) :> integer) -
                        (i_48 :> integer))))))))
   
  lemma strnlen_shift_ex{L} :
  (_C_741 : (\forall charP[..] s_41;
              (\forall uint64 i_49;
                (\forall uint64 cnt_12;
                  (((valid_strn{L}(s_41, cnt_12) && ((0 :> uint64) < i_49)) &&
                     (i_49 <= strnlen{L}(s_41, cnt_12))) ==>
                    (strnlen{L}((s_41 + (i_49 :> integer)), cnt_12) <
                      strnlen{L}(s_41, cnt_12)))))))
   
  lemma strnlen_shift1{L} :
  (_C_742 : (\forall charP[..] s_42;
              (\forall uint64 cnt_13;
                (((valid_strn{L}(s_42, cnt_13) && (cnt_13 > (0 :> uint64))) &&
                   (s_42.charM != (0 :> int8))) ==>
                  ((strnlen{L}(s_42, cnt_13) :> integer) ==
                    ((strnlen{L}((s_42 + 1),
                                 (((cnt_13 :> integer) - 1) :> uint64)) :> integer) +
                      1))))))
   
  lemma strnlen_cmp{L} :
  (_C_743 : (\forall charP[..] s1;
              (\forall charP[..] s2;
                (\forall uint64 cnt_14;
                  (((valid_str{L}(s1) && valid_strn{L}(s2, cnt_14)) &&
                     (strlen{L}(s1) < strnlen{L}(s2, cnt_14))) ==>
                    (strnlen{L}(s1, cnt_14) < strnlen{L}(s2, cnt_14)))))))
   
  lemma strnlen_less{L} :
  (_C_744 : (\forall charP[..] s_43;
              (\forall uint64 i_50;
                (\forall uint64 cnt_15;
                  ((valid_strn{L}(s_43, cnt_15) && (i_50 <= cnt_15)) ==>
                    (strnlen{L}(s_43, i_50) <= strnlen{L}(s_43, cnt_15)))))))
   
  lemma valid_str_strn{L} :
  (_C_745 : (\forall charP[..] s_44;
              (\forall uint64 cnt_16;
                ((valid_str{L}(s_44) && (cnt_16 <= strlen{L}(s_44))) ==>
                  valid_strn{L}(s_44, cnt_16)))))
  
}

charP[..] strnchr(charP[..] s_7, uint64 count_3, int32 c_16)
  requires (_C_794 : valid_strn{Here}(s_7, count_3));
behavior default:
  assigns \nothing;
  ensures true;
behavior exists:
  assumes (\exists charP[..] p_16;
            ((((\base_block(s_7) == \base_block(p_16)) &&
                ((s_7 - p_16) <= 0)) &&
               ((\base_block(p_16) ==
                  \base_block((s_7 +
                                (strnlen{Here}(s_7, count_3) :> integer)))) &&
                 ((p_16 - (s_7 + (strnlen{Here}(s_7, count_3) :> integer))) <
                   0))) &&
              (p_16.charM == (c_16 :%> int8))));
  ensures (_C_780 : ((((_C_783 : (\base_block(\at(s_7,Old)) ==
                                   \base_block(\result))) &&
                        (_C_784 : ((\at(s_7,Old) - \result) <= 0))) &&
                       ((_C_786 : (\base_block(\result) ==
                                    \base_block((\at(s_7,Old) +
                                                  (strnlen{Here}(\at(s_7,Old),
                                                                 \at(count_3,Old)) :> integer))))) &&
                         (_C_787 : ((\result -
                                      (\at(s_7,Old) +
                                        (strnlen{Here}(\at(s_7,Old),
                                                       \at(count_3,Old)) :> integer))) <=
                                     0)))) &&
                      ((_C_789 : (\result.charM == (\at(c_16,Old) :%> int8))) &&
                        (_C_790 : (\forall charP[..] p_17;
                                    ((((\base_block(\at(s_7,Old)) ==
                                         \base_block(p_17)) &&
                                        ((\at(s_7,Old) - p_17) <= 0)) &&
                                       ((\base_block(p_17) ==
                                          \base_block(\result)) &&
                                         ((p_17 - \result) < 0))) ==>
                                      (p_17.charM !=
                                        (\at(c_16,Old) :%> int8))))))));
behavior not_exists:
  assumes (\forall charP[..] p_15;
            ((((\base_block(s_7) == \base_block(p_15)) &&
                ((s_7 - p_15) <= 0)) &&
               ((\base_block(p_15) ==
                  \base_block((s_7 +
                                (strnlen{Here}(s_7, count_3) :> integer)))) &&
                 ((p_15 - (s_7 + (strnlen{Here}(s_7, count_3) :> integer))) <
                   0))) ==>
              (p_15.charM != (c_16 :%> int8))));
  ensures (_C_791 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_16;
                                      ((((\base_block(s_7) ==
                                           \base_block(p_16)) &&
                                          ((s_7 - p_16) <= 0)) &&
                                         ((\base_block(p_16) ==
                                            \base_block((s_7 +
                                                          (strnlen{Here}(
                                                          s_7, count_3) :> integer)))) &&
                                           ((p_16 -
                                              (s_7 +
                                                (strnlen{Here}(s_7, count_3) :> integer))) <
                                             0))) &&
                                        (p_16.charM == (c_16 :%> int8)))) &&
                                     (\forall charP[..] p_15;
                                       ((((\base_block(s_7) ==
                                            \base_block(p_15)) &&
                                           ((s_7 - p_15) <= 0)) &&
                                          ((\base_block(p_15) ==
                                             \base_block((s_7 +
                                                           (strnlen{Here}(
                                                           s_7, count_3) :> integer)))) &&
                                            ((p_15 -
                                               (s_7 +
                                                 (strnlen{Here}(s_7, count_3) :> integer))) <
                                              0))) ==>
                                         (p_15.charM != (c_16 :%> int8))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p_15;
                                   ((((\base_block(s_7) == \base_block(p_15)) &&
                                       ((s_7 - p_15) <= 0)) &&
                                      ((\base_block(p_15) ==
                                         \base_block((s_7 +
                                                       (strnlen{Here}(
                                                       s_7, count_3) :> integer)))) &&
                                        ((p_15 -
                                           (s_7 +
                                             (strnlen{Here}(s_7, count_3) :> integer))) <
                                          0))) ==>
                                     (p_15.charM != (c_16 :%> int8)))) ||
                                  (\exists charP[..] p_16;
                                    ((((\base_block(s_7) ==
                                         \base_block(p_16)) &&
                                        ((s_7 - p_16) <= 0)) &&
                                       ((\base_block(p_16) ==
                                          \base_block((s_7 +
                                                        (strnlen{Here}(
                                                        s_7, count_3) :> integer)))) &&
                                         ((p_16 -
                                            (s_7 +
                                              (strnlen{Here}(s_7, count_3) :> integer))) <
                                           0))) &&
                                      (p_16.charM == (c_16 :%> int8)))))));
   
   (var charP[..] os_1);
   
   (var uint64 ocount);
   
   (var uint64 tmp_0_8);
   
   (var charP[..] __retres_10);
   
   {  (_C_746 : (os_1 = s_7));
      (_C_747 : (ocount = count_3));
      
      loop 
      behavior default:
        invariant (_C_760 : ((_C_761 : ((0 :> uint64) <= count_3)) &&
                              (_C_762 : (count_3 <= ocount))));
      behavior default:
        invariant (_C_753 : (((_C_755 : (\base_block(os_1) ==
                                          \base_block(s_7))) &&
                               (_C_756 : ((os_1 - s_7) <= 0))) &&
                              ((_C_758 : (\base_block(s_7) ==
                                           \base_block((os_1 +
                                                         (strnlen{Here}(
                                                         os_1, ocount) :> integer))))) &&
                                (_C_759 : ((s_7 -
                                             (os_1 +
                                               (strnlen{Here}(os_1, ocount) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_752 : ((s_7 - os_1) ==
                              ((ocount :> integer) - (count_3 :> integer))));
      behavior default:
        invariant (_C_751 : valid_strn{Here}(s_7, count_3));
      behavior default:
        invariant (_C_750 : ((strnlen{Here}(os_1, ocount) :> integer) ==
                              ((s_7 - os_1) +
                                (strnlen{Here}(s_7, count_3) :> integer))));
      behavior default:
        invariant (_C_749 : (\forall charP[..] p_14;
                              ((((\base_block(os_1) == \base_block(p_14)) &&
                                  ((os_1 - p_14) <= 0)) &&
                                 ((\base_block(p_14) == \base_block(s_7)) &&
                                   ((p_14 - s_7) < 0))) ==>
                                (p_14.charM != (c_16 :%> int8)))));
      variant (_C_748 : count_3);
      while (true)
      {  
         {  
            {  (_C_763 : (tmp_0_8 = count_3));
               (_C_766 : (count_3 = (_C_765 : ((_C_764 : (count_3 -%
                                                           (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_770 : ((tmp_0_8 :> uint64) != (0 :> uint64))) then 
            (if (_C_769 : ((_C_768 : ((_C_767 : s_7.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break)) else 
            (goto while_0_break));
            (if (_C_776 : ((_C_775 : ((_C_774 : s_7.charM) :> int32)) ==
                            (_C_773 : ((_C_772 : (c_16 :%> int8)) :> int32)))) then 
            {  (_C_771 : (__retres_10 = s_7));
               
               (goto return_label)
            } else ());
            (_C_778 : (s_7 = (_C_777 : (s_7 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_779 : (__retres_10 = null));
      (return_label : 
      (return __retres_10))
   }
}

uint64 strnlen(charP[..] s_8, uint64 count_4)
  requires (_C_831 : valid_strn{Here}(s_8, count_4));
behavior default:
  assigns \nothing;
  ensures (_C_824 : (\result ==
                      strnlen{Here}(\at(s_8,Old), \at(count_4,Old))));
behavior null_byte:
  assumes (\exists integer i_53;
            (((0 <= i_53) && (i_53 <= (count_4 :> integer))) &&
              ((s_8 + i_53).charM == (0 :> int8))));
  ensures (_C_825 : ((_C_826 : ((\at(s_8,Old) + (\result :> integer)).charM ==
                                 (0 :> int8))) &&
                      (_C_827 : (\forall integer i_54;
                                  (((0 <= i_54) &&
                                     (i_54 < (\result :> integer))) ==>
                                    ((\at(s_8,Old) + i_54).charM !=
                                      (0 :> int8)))))));
behavior count_len:
  assumes (\forall integer i_52;
            (((0 <= i_52) && (i_52 <= (count_4 :> integer))) ==>
              ((s_8 + i_52).charM != (0 :> int8))));
  ensures (_C_828 : (\result == \at(count_4,Old)));
{  
   (check (disjoint_behaviors : (! ((\exists integer i_53;
                                      (((0 <= i_53) &&
                                         (i_53 <= (count_4 :> integer))) &&
                                        ((s_8 + i_53).charM == (0 :> int8)))) &&
                                     (\forall integer i_52;
                                       (((0 <= i_52) &&
                                          (i_52 <= (count_4 :> integer))) ==>
                                         ((s_8 + i_52).charM != (0 :> int8))))))));
   
   (check (complete_behaviors : ((\forall integer i_52;
                                   (((0 <= i_52) &&
                                      (i_52 <= (count_4 :> integer))) ==>
                                     ((s_8 + i_52).charM != (0 :> int8)))) ||
                                  (\exists integer i_53;
                                    (((0 <= i_53) &&
                                       (i_53 <= (count_4 :> integer))) &&
                                      ((s_8 + i_53).charM == (0 :> int8)))))));
   
   (var charP[..] sc_0);
   
   (var uint64 tmp_0_9);
   
   (var uint64 __retres_11);
   
   {  (_C_795 : (sc_0 = s_8));
      
      loop 
      behavior default:
        invariant (_C_808 : ((_C_809 : ((0 :> uint64) <= count_4)) &&
                              (_C_810 : (count_4 <= \at(count_4,Pre)))));
      behavior default:
        invariant (_C_801 : (((_C_803 : (\base_block(s_8) ==
                                          \base_block(sc_0))) &&
                               (_C_804 : ((s_8 - sc_0) <= 0))) &&
                              ((_C_806 : (\base_block(sc_0) ==
                                           \base_block((s_8 +
                                                         (strnlen{Here}(
                                                         s_8,
                                                         \at(count_4,Pre)) :> integer))))) &&
                                (_C_807 : ((sc_0 -
                                             (s_8 +
                                               (strnlen{Here}(s_8,
                                                              \at(count_4,Pre)) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_800 : ((sc_0 - s_8) ==
                              ((\at(count_4,Pre) :> integer) -
                                (count_4 :> integer))));
      behavior default:
        invariant (_C_799 : valid_strn{Here}(sc_0, count_4));
      behavior default:
        invariant (_C_798 : ((strnlen{Here}(s_8, \at(count_4,Pre)) :> integer) ==
                              ((strnlen{Here}(sc_0, count_4) :> integer) +
                                (sc_0 - s_8))));
      behavior default:
        invariant (_C_797 : (\forall integer i_51;
                              (((0 <= i_51) && (i_51 < (sc_0 - s_8))) ==>
                                ((s_8 + i_51).charM != (0 :> int8)))));
      variant (_C_796 : count_4);
      while (true)
      {  
         {  
            {  (_C_811 : (tmp_0_9 = count_4));
               (_C_814 : (count_4 = (_C_813 : ((_C_812 : (count_4 -%
                                                           (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_818 : ((tmp_0_9 :> uint64) != (0 :> uint64))) then 
            (if (_C_817 : ((_C_816 : ((_C_815 : sc_0.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break)) else 
            (goto while_0_break));
            (_C_820 : (sc_0 = (_C_819 : (sc_0 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_823 : (__retres_11 = (_C_822 : ((_C_821 : (sc_0 - s_8)) :> uint64))));
      
      (return __retres_11)
   }
}

axiomatic StrPBrk {

  logic charP[..] strpbrk(charP[..] cs, charP[..] ct)
   
  lemma strpbrk_strend{L} :
  (_C_832 : (\forall charP[..] cs_0;
              (\forall charP[..] ct_0;
                ((\at((((\offset_min(\at(cs_0,L)) <= \at(0,L)) &&
                         (\offset_max(\at(cs_0,L)) >= \at(0,L))) &&
                        true),L) &&
                   (cs_0.charM == (0 :> int8))) ==>
                  (strpbrk(cs_0, ct_0) == null)))))
   
  lemma strpbrk_empty_ct{L} :
  (_C_833 : (\forall charP[..] cs_1;
              (\forall charP[..] ct_1;
                (((valid_str{L}(cs_1) && valid_str{L}(ct_1)) &&
                   (ct_1.charM == (0 :> int8))) ==>
                  (strpbrk(cs_1, ct_1) == null)))))
   
  lemma strpbrk_range{L} :
  (_C_834 : (\forall charP[..] cs_2;
              (\forall charP[..] ct_2;
                ((valid_str{L}(cs_2) && valid_str{L}(ct_2)) ==>
                  (((strpbrk(cs_2, ct_2) == null) &&
                     (! (((\base_block(cs_2) ==
                            \base_block(strpbrk(cs_2, ct_2))) &&
                           ((cs_2 - strpbrk(cs_2, ct_2)) <= 0)) &&
                          ((\base_block(strpbrk(cs_2, ct_2)) ==
                             \base_block((cs_2 +
                                           (strlen{L}(cs_2) :> integer)))) &&
                            ((strpbrk(cs_2, ct_2) -
                               (cs_2 + (strlen{L}(cs_2) :> integer))) <
                              0))))) ||
                    ((((\base_block(cs_2) ==
                         \base_block(strpbrk(cs_2, ct_2))) &&
                        ((cs_2 - strpbrk(cs_2, ct_2)) <= 0)) &&
                       ((\base_block(strpbrk(cs_2, ct_2)) ==
                          \base_block((cs_2 + (strlen{L}(cs_2) :> integer)))) &&
                         ((strpbrk(cs_2, ct_2) -
                            (cs_2 + (strlen{L}(cs_2) :> integer))) <
                           0))) &&
                      (! (strpbrk(cs_2, ct_2) == null))))))))
   
  lemma strpbrk_shift1{L} :
  (_C_835 : (\forall charP[..] cs_3;
              (\forall charP[..] ct_3;
                ((((valid_str{L}(cs_3) && valid_str{L}(ct_3)) &&
                    (cs_3.charM != (0 :> int8))) &&
                   (! in_array{L}(ct_3, cs_3.charM))) ==>
                  (strpbrk(cs_3, ct_3) == strpbrk((cs_3 + 1), ct_3))))))
   
  lemma strpbrk_stop_in_ct{L} :
  (_C_836 : (\forall charP[..] cs_4;
              (\forall charP[..] ct_4;
                ((((valid_str{L}(cs_4) && valid_str{L}(ct_4)) &&
                    (cs_4.charM != (0 :> int8))) &&
                   in_array{L}(ct_4, cs_4.charM)) ==>
                  (strpbrk(cs_4, ct_4) == cs_4)))))
  
}

charP[..] strpbrk(charP[..] cs_1, charP[..] ct_1)
  requires ((_C_897 : valid_str{Here}(cs_1)) &&
             (_C_898 : valid_str{Here}(ct_1)));
behavior default:
  assigns \nothing;
  ensures (_C_882 : (\result == strpbrk(\at(cs_1,Old), \at(ct_1,Old))));
behavior found:
  assumes (\exists charP[..] p_23;
            (\exists charP[..] t_11;
              ((((((\base_block(cs_1) == \base_block(p_23)) &&
                    ((cs_1 - p_23) <= 0)) &&
                   ((\base_block(p_23) ==
                      \base_block((cs_1 + (strlen{Here}(cs_1) :> integer)))) &&
                     ((p_23 - (cs_1 + (strlen{Here}(cs_1) :> integer))) < 0))) &&
                  ((\base_block(ct_1) == \base_block(t_11)) &&
                    ((ct_1 - t_11) <= 0))) &&
                 ((\base_block(t_11) ==
                    \base_block((ct_1 + (strlen{Here}(ct_1) :> integer)))) &&
                   ((t_11 - (ct_1 + (strlen{Here}(ct_1) :> integer))) < 0))) &&
                (p_23.charM == t_11.charM))));
  ensures (_C_883 : ((((_C_886 : (\base_block(\at(cs_1,Old)) ==
                                   \base_block(\result))) &&
                        (_C_887 : ((\at(cs_1,Old) - \result) <= 0))) &&
                       ((_C_889 : (\base_block(\result) ==
                                    \base_block((\at(cs_1,Old) +
                                                  (strlen{Here}(\at(cs_1,Old)) :> integer))))) &&
                         (_C_890 : ((\result -
                                      (\at(cs_1,Old) +
                                        (strlen{Here}(\at(cs_1,Old)) :> integer))) <
                                     0)))) &&
                      ((_C_892 : (\exists charP[..] t_12;
                                   ((((\base_block(\at(ct_1,Old)) ==
                                        \base_block(t_12)) &&
                                       ((\at(ct_1,Old) - t_12) <= 0)) &&
                                      ((\base_block(t_12) ==
                                         \base_block((\at(ct_1,Old) +
                                                       (strlen{Here}(
                                                       \at(ct_1,Old)) :> integer)))) &&
                                        ((t_12 -
                                           (\at(ct_1,Old) +
                                             (strlen{Here}(\at(ct_1,Old)) :> integer))) <=
                                          0))) &&
                                     (\result.charM == t_12.charM)))) &&
                        (_C_893 : (\forall charP[..] p_24;
                                    (\forall charP[..] t_13;
                                      ((((((\base_block(\at(cs_1,Old)) ==
                                             \base_block(p_24)) &&
                                            ((\at(cs_1,Old) - p_24) <= 0)) &&
                                           ((\base_block(p_24) ==
                                              \base_block(\result)) &&
                                             ((p_24 - \result) < 0))) &&
                                          ((\base_block(\at(ct_1,Old)) ==
                                             \base_block(t_13)) &&
                                            ((\at(ct_1,Old) - t_13) <= 0))) &&
                                         ((\base_block(t_13) ==
                                            \base_block((\at(ct_1,Old) +
                                                          (strlen{Here}(
                                                          \at(ct_1,Old)) :> integer)))) &&
                                           ((t_13 -
                                              (\at(ct_1,Old) +
                                                (strlen{Here}(\at(ct_1,Old)) :> integer))) <
                                             0))) ==>
                                        (p_24.charM != t_13.charM))))))));
behavior not_found:
  assumes (\forall charP[..] p_22;
            (\forall charP[..] t_10;
              ((((((\base_block(cs_1) == \base_block(p_22)) &&
                    ((cs_1 - p_22) <= 0)) &&
                   ((\base_block(p_22) ==
                      \base_block((cs_1 + (strlen{Here}(cs_1) :> integer)))) &&
                     ((p_22 - (cs_1 + (strlen{Here}(cs_1) :> integer))) < 0))) &&
                  ((\base_block(ct_1) == \base_block(t_10)) &&
                    ((ct_1 - t_10) <= 0))) &&
                 ((\base_block(t_10) ==
                    \base_block((ct_1 + (strlen{Here}(ct_1) :> integer)))) &&
                   ((t_10 - (ct_1 + (strlen{Here}(ct_1) :> integer))) < 0))) ==>
                (p_22.charM != t_10.charM))));
  ensures (_C_894 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_23;
                                      (\exists charP[..] t_11;
                                        ((((((\base_block(cs_1) ==
                                               \base_block(p_23)) &&
                                              ((cs_1 - p_23) <= 0)) &&
                                             ((\base_block(p_23) ==
                                                \base_block((cs_1 +
                                                              (strlen{Here}(
                                                              cs_1) :> integer)))) &&
                                               ((p_23 -
                                                  (cs_1 +
                                                    (strlen{Here}(cs_1) :> integer))) <
                                                 0))) &&
                                            ((\base_block(ct_1) ==
                                               \base_block(t_11)) &&
                                              ((ct_1 - t_11) <= 0))) &&
                                           ((\base_block(t_11) ==
                                              \base_block((ct_1 +
                                                            (strlen{Here}(
                                                            ct_1) :> integer)))) &&
                                             ((t_11 -
                                                (ct_1 +
                                                  (strlen{Here}(ct_1) :> integer))) <
                                               0))) &&
                                          (p_23.charM == t_11.charM)))) &&
                                     (\forall charP[..] p_22;
                                       (\forall charP[..] t_10;
                                         ((((((\base_block(cs_1) ==
                                                \base_block(p_22)) &&
                                               ((cs_1 - p_22) <= 0)) &&
                                              ((\base_block(p_22) ==
                                                 \base_block((cs_1 +
                                                               (strlen{Here}(
                                                               cs_1) :> integer)))) &&
                                                ((p_22 -
                                                   (cs_1 +
                                                     (strlen{Here}(cs_1) :> integer))) <
                                                  0))) &&
                                             ((\base_block(ct_1) ==
                                                \base_block(t_10)) &&
                                               ((ct_1 - t_10) <= 0))) &&
                                            ((\base_block(t_10) ==
                                               \base_block((ct_1 +
                                                             (strlen{Here}(
                                                             ct_1) :> integer)))) &&
                                              ((t_10 -
                                                 (ct_1 +
                                                   (strlen{Here}(ct_1) :> integer))) <
                                                0))) ==>
                                           (p_22.charM != t_10.charM))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p_22;
                                   (\forall charP[..] t_10;
                                     ((((((\base_block(cs_1) ==
                                            \base_block(p_22)) &&
                                           ((cs_1 - p_22) <= 0)) &&
                                          ((\base_block(p_22) ==
                                             \base_block((cs_1 +
                                                           (strlen{Here}(
                                                           cs_1) :> integer)))) &&
                                            ((p_22 -
                                               (cs_1 +
                                                 (strlen{Here}(cs_1) :> integer))) <
                                              0))) &&
                                         ((\base_block(ct_1) ==
                                            \base_block(t_10)) &&
                                           ((ct_1 - t_10) <= 0))) &&
                                        ((\base_block(t_10) ==
                                           \base_block((ct_1 +
                                                         (strlen{Here}(
                                                         ct_1) :> integer)))) &&
                                          ((t_10 -
                                             (ct_1 +
                                               (strlen{Here}(ct_1) :> integer))) <
                                            0))) ==>
                                       (p_22.charM != t_10.charM)))) ||
                                  (\exists charP[..] p_23;
                                    (\exists charP[..] t_11;
                                      ((((((\base_block(cs_1) ==
                                             \base_block(p_23)) &&
                                            ((cs_1 - p_23) <= 0)) &&
                                           ((\base_block(p_23) ==
                                              \base_block((cs_1 +
                                                            (strlen{Here}(
                                                            cs_1) :> integer)))) &&
                                             ((p_23 -
                                                (cs_1 +
                                                  (strlen{Here}(cs_1) :> integer))) <
                                               0))) &&
                                          ((\base_block(ct_1) ==
                                             \base_block(t_11)) &&
                                            ((ct_1 - t_11) <= 0))) &&
                                         ((\base_block(t_11) ==
                                            \base_block((ct_1 +
                                                          (strlen{Here}(
                                                          ct_1) :> integer)))) &&
                                           ((t_11 -
                                              (ct_1 +
                                                (strlen{Here}(ct_1) :> integer))) <
                                             0))) &&
                                        (p_23.charM == t_11.charM)))))));
   
   (var charP[..] sc1);
   
   (var charP[..] sc2);
   
   (var charP[..] __retres_12);
   
   {  (_C_837 : (sc1 = cs_1));
      
      loop 
      behavior default:
        invariant (_C_842 : (((_C_844 : (\base_block(cs_1) ==
                                          \base_block(sc1))) &&
                               (_C_845 : ((cs_1 - sc1) <= 0))) &&
                              ((_C_847 : (\base_block(sc1) ==
                                           \base_block((cs_1 +
                                                         (strlen{Here}(
                                                         cs_1) :> integer))))) &&
                                (_C_848 : ((sc1 -
                                             (cs_1 +
                                               (strlen{Here}(cs_1) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_841 : valid_str{Here}(sc1));
      behavior default:
        invariant (_C_840 : (\forall charP[..] p_21;
                              (\forall charP[..] t_9;
                                ((((((\base_block(cs_1) == \base_block(p_21)) &&
                                      ((cs_1 - p_21) <= 0)) &&
                                     ((\base_block(p_21) == \base_block(sc1)) &&
                                       ((p_21 - sc1) < 0))) &&
                                    ((\base_block(ct_1) == \base_block(t_9)) &&
                                      ((ct_1 - t_9) <= 0))) &&
                                   ((\base_block(t_9) ==
                                      \base_block((ct_1 +
                                                    (strlen{Here}(ct_1) :> integer)))) &&
                                     ((t_9 -
                                        (ct_1 +
                                          (strlen{Here}(ct_1) :> integer))) <
                                       0))) ==>
                                  (p_21.charM != t_9.charM)))));
      behavior default:
        invariant (_C_839 : (strpbrk(cs_1, ct_1) == strpbrk(sc1, ct_1)));
      variant (_C_838 : ((strlen{Here}(cs_1) :> integer) - (sc1 - cs_1)));
      while (true)
      {  
         {  (if (_C_851 : ((_C_850 : ((_C_849 : sc1.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break));
            
            {  (_C_852 : (sc2 = ct_1));
               
               loop 
               behavior default:
                 invariant (_C_857 : (((_C_859 : (\base_block(ct_1) ==
                                                   \base_block(sc2))) &&
                                        (_C_860 : ((ct_1 - sc2) <= 0))) &&
                                       ((_C_862 : (\base_block(sc2) ==
                                                    \base_block((ct_1 +
                                                                  (strlen{Here}(
                                                                  ct_1) :> integer))))) &&
                                         (_C_863 : ((sc2 -
                                                      (ct_1 +
                                                        (strlen{Here}(
                                                        ct_1) :> integer))) <=
                                                     0)))));
               behavior default:
                 invariant (_C_856 : valid_str{Here}(sc2));
               behavior default:
                 invariant (_C_855 : (\forall charP[..] t_6;
                                       ((((\base_block(ct_1) ==
                                            \base_block(t_6)) &&
                                           ((ct_1 - t_6) <= 0)) &&
                                          ((\base_block(t_6) ==
                                             \base_block(sc2)) &&
                                            ((t_6 - sc2) < 0))) ==>
                                         (sc1.charM != t_6.charM))));
               behavior default:
                 invariant (_C_854 : (in_array{Here}(ct_1, sc1.charM) ==>
                                       in_array{Here}(sc2, sc1.charM)));
               variant (_C_853 : ((strlen{Here}(ct_1) :> integer) -
                                   (sc2 - ct_1)));
               while (true)
               {  
                  {  (if (_C_866 : ((_C_865 : ((_C_864 : sc2.charM) :> int32)) !=
                                     (0 :> int32))) then () else 
                     (goto while_1_break));
                     
                     {  (if (_C_874 : ((_C_873 : ((_C_872 : sc1.charM) :> int32)) ==
                                        (_C_871 : ((_C_870 : sc2.charM) :> int32)))) then 
                        {  
                           {  
                              (assert for default: (_C_867 : (jessie : 
                                                             (\exists charP[..] p_18;
                                                               (\exists charP[..] t_4;
                                                                 ((((((((\base_block(cs_1) ==
                                                                    \base_block(p_18)) &&
                                                                    ((cs_1 -
                                                                    p_18) <=
                                                                    0)) &&
                                                                    ((\base_block(p_18) ==
                                                                    \base_block(
                                                                    (cs_1 +
                                                                    (strlen{Here}(
                                                                    cs_1) :> integer)))) &&
                                                                    ((p_18 -
                                                                    (cs_1 +
                                                                    (strlen{Here}(
                                                                    cs_1) :> integer))) <
                                                                    0))) &&
                                                                    ((\base_block(ct_1) ==
                                                                    \base_block(t_4)) &&
                                                                    ((ct_1 -
                                                                    t_4) <=
                                                                    0))) &&
                                                                    ((\base_block(t_4) ==
                                                                    \base_block(
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer)))) &&
                                                                    ((t_4 -
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer))) <
                                                                    0))) &&
                                                                    (p_18.charM ==
                                                                    t_4.charM)) &&
                                                                    (p_18 ==
                                                                    sc1)) &&
                                                                   (t_4 ==
                                                                    sc2)))))));
                              ()
                           };
                           
                           {  
                              (assert for default: (_C_868 : (jessie : 
                                                             (\forall charP[..] p_19;
                                                               (\forall charP[..] t_5;
                                                                 ((((((\base_block(cs_1) ==
                                                                    \base_block(p_19)) &&
                                                                    ((cs_1 -
                                                                    p_19) <=
                                                                    0)) &&
                                                                    ((\base_block(p_19) ==
                                                                    \base_block(sc1)) &&
                                                                    ((p_19 -
                                                                    sc1) <
                                                                    0))) &&
                                                                    ((\base_block(ct_1) ==
                                                                    \base_block(t_5)) &&
                                                                    ((ct_1 -
                                                                    t_5) <=
                                                                    0))) &&
                                                                    ((\base_block(t_5) ==
                                                                    \base_block(
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer)))) &&
                                                                    ((t_5 -
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer))) <
                                                                    0))) ==>
                                                                   (p_19.charM !=
                                                                    t_5.charM)))))));
                              ()
                           };
                           
                           {  (_C_869 : (__retres_12 = sc1));
                              
                              (goto return_label)
                           }
                        } else ())
                     };
                     (_C_876 : (sc2 = (_C_875 : (sc2 + (1 :> int32)))))
                  }
               };
               (while_1_break : ());
               
               {  
                  (assert for default: (_C_877 : (jessie : (\forall charP[..] t_7;
                                                             ((((\base_block(ct_1) ==
                                                                  \base_block(t_7)) &&
                                                                 ((ct_1 -
                                                                    t_7) <=
                                                                   0)) &&
                                                                ((\base_block(t_7) ==
                                                                   \base_block(
                                                                   (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer)))) &&
                                                                  ((t_7 -
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer))) <
                                                                    0))) ==>
                                                               (sc1.charM !=
                                                                 t_7.charM))))));
                  ()
               };
               
               {  
                  (assert for default: (_C_878 : (jessie : (\forall charP[..] p_20;
                                                             (\forall charP[..] t_8;
                                                               ((((((\base_block(cs_1) ==
                                                                    \base_block(p_20)) &&
                                                                    ((cs_1 -
                                                                    p_20) <=
                                                                    0)) &&
                                                                    ((\base_block(p_20) ==
                                                                    \base_block(sc1)) &&
                                                                    ((p_20 -
                                                                    sc1) <=
                                                                    0))) &&
                                                                   ((\base_block(ct_1) ==
                                                                    \base_block(t_8)) &&
                                                                    ((ct_1 -
                                                                    t_8) <=
                                                                    0))) &&
                                                                  ((\base_block(t_8) ==
                                                                    \base_block(
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer)))) &&
                                                                    ((t_8 -
                                                                    (ct_1 +
                                                                    (strlen{Here}(
                                                                    ct_1) :> integer))) <
                                                                    0))) ==>
                                                                 (p_20.charM !=
                                                                   t_8.charM)))))));
                  ()
               }
            };
            (_C_880 : (sc1 = (_C_879 : (sc1 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_881 : (__retres_12 = null));
      (return_label : 
      (return __retres_12))
   }
}

charP[..] strrchr(charP[..] s_9, int32 c_17)
  requires (_C_942 : valid_str{Here}(s_9));
behavior default:
  assigns \nothing;
  ensures true;
behavior found:
  assumes (\exists charP[..] p_30;
            ((((\base_block(s_9) == \base_block(p_30)) &&
                ((s_9 - p_30) <= 0)) &&
               ((\base_block(p_30) ==
                  \base_block((s_9 + (strlen{Here}(s_9) :> integer)))) &&
                 ((p_30 - (s_9 + (strlen{Here}(s_9) :> integer))) <= 0))) &&
              (p_30.charM == (c_17 :%> int8))));
  ensures (_C_928 : ((((_C_931 : (\base_block(\at(s_9,Old)) ==
                                   \base_block(\result))) &&
                        (_C_932 : ((\at(s_9,Old) - \result) <= 0))) &&
                       ((_C_934 : (\base_block(\result) ==
                                    \base_block((\at(s_9,Old) +
                                                  (strlen{Here}(\at(s_9,Old)) :> integer))))) &&
                         (_C_935 : ((\result -
                                      (\at(s_9,Old) +
                                        (strlen{Here}(\at(s_9,Old)) :> integer))) <=
                                     0)))) &&
                      ((_C_937 : (\result.charM == (\at(c_17,Old) :%> int8))) &&
                        (_C_938 : (\forall charP[..] p_31;
                                    ((((\base_block(\result) ==
                                         \base_block(p_31)) &&
                                        ((\result - p_31) < 0)) &&
                                       ((\base_block(p_31) ==
                                          \base_block((\at(s_9,Old) +
                                                        (strlen{Here}(
                                                        \at(s_9,Old)) :> integer)))) &&
                                         ((p_31 -
                                            (\at(s_9,Old) +
                                              (strlen{Here}(\at(s_9,Old)) :> integer))) <=
                                           0))) ==>
                                      (p_31.charM !=
                                        (\at(c_17,Old) :%> int8))))))));
behavior not_found:
  assumes (\forall charP[..] p_29;
            ((((\base_block(s_9) == \base_block(p_29)) &&
                ((s_9 - p_29) <= 0)) &&
               ((\base_block(p_29) ==
                  \base_block((s_9 + (strlen{Here}(s_9) :> integer)))) &&
                 ((p_29 - (s_9 + (strlen{Here}(s_9) :> integer))) <= 0))) ==>
              (p_29.charM != (c_17 :%> int8))));
  ensures (_C_939 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_30;
                                      ((((\base_block(s_9) ==
                                           \base_block(p_30)) &&
                                          ((s_9 - p_30) <= 0)) &&
                                         ((\base_block(p_30) ==
                                            \base_block((s_9 +
                                                          (strlen{Here}(
                                                          s_9) :> integer)))) &&
                                           ((p_30 -
                                              (s_9 +
                                                (strlen{Here}(s_9) :> integer))) <=
                                             0))) &&
                                        (p_30.charM == (c_17 :%> int8)))) &&
                                     (\forall charP[..] p_29;
                                       ((((\base_block(s_9) ==
                                            \base_block(p_29)) &&
                                           ((s_9 - p_29) <= 0)) &&
                                          ((\base_block(p_29) ==
                                             \base_block((s_9 +
                                                           (strlen{Here}(
                                                           s_9) :> integer)))) &&
                                            ((p_29 -
                                               (s_9 +
                                                 (strlen{Here}(s_9) :> integer))) <=
                                              0))) ==>
                                         (p_29.charM != (c_17 :%> int8))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p_29;
                                   ((((\base_block(s_9) == \base_block(p_29)) &&
                                       ((s_9 - p_29) <= 0)) &&
                                      ((\base_block(p_29) ==
                                         \base_block((s_9 +
                                                       (strlen{Here}(
                                                       s_9) :> integer)))) &&
                                        ((p_29 -
                                           (s_9 +
                                             (strlen{Here}(s_9) :> integer))) <=
                                          0))) ==>
                                     (p_29.charM != (c_17 :%> int8)))) ||
                                  (\exists charP[..] p_30;
                                    ((((\base_block(s_9) ==
                                         \base_block(p_30)) &&
                                        ((s_9 - p_30) <= 0)) &&
                                       ((\base_block(p_30) ==
                                          \base_block((s_9 +
                                                        (strlen{Here}(
                                                        s_9) :> integer)))) &&
                                         ((p_30 -
                                            (s_9 +
                                              (strlen{Here}(s_9) :> integer))) <=
                                           0))) &&
                                      (p_30.charM == (c_17 :%> int8)))))));
   
   (var charP[..] last);
   
   (var charP[..] os_2);
   
   (var charP[..] tmp_0_10);
   
   (var charP[..] __retres_13);
   
   {  (_C_899 : (last = null));
      (_C_900 : (os_2 = s_9));
      
      loop 
      behavior default:
        invariant (_C_906 : (((_C_908 : (\base_block(os_2) ==
                                          \base_block(s_9))) &&
                               (_C_909 : ((os_2 - s_9) <= 0))) &&
                              ((_C_911 : (\base_block(s_9) ==
                                           \base_block((os_2 +
                                                         (strlen{Here}(
                                                         os_2) :> integer))))) &&
                                (_C_912 : ((s_9 -
                                             (os_2 +
                                               (strlen{Here}(os_2) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_905 : (((last == null) &&
                               (! ((((\base_block(os_2) == \base_block(last)) &&
                                      ((os_2 - last) <= 0)) &&
                                     ((\base_block(last) == \base_block(s_9)) &&
                                       ((last - s_9) < 0))) &&
                                    (last.charM == (c_17 :%> int8))))) ||
                              (((((\base_block(os_2) == \base_block(last)) &&
                                   ((os_2 - last) <= 0)) &&
                                  ((\base_block(last) == \base_block(s_9)) &&
                                    ((last - s_9) < 0))) &&
                                 (last.charM == (c_17 :%> int8))) &&
                                (! (last == null)))));
      behavior default:
        invariant (_C_904 : ((last != null) <==>
                              (\exists charP[..] p_25;
                                ((((\base_block(os_2) == \base_block(p_25)) &&
                                    ((os_2 - p_25) <= 0)) &&
                                   ((\base_block(p_25) == \base_block(s_9)) &&
                                     ((p_25 - s_9) < 0))) &&
                                  (p_25.charM == (c_17 :%> int8))))));
      behavior default:
        invariant (_C_903 : ((last == null) <==>
                              (\forall charP[..] p_26;
                                ((((\base_block(os_2) == \base_block(p_26)) &&
                                    ((os_2 - p_26) <= 0)) &&
                                   ((\base_block(p_26) == \base_block(s_9)) &&
                                     ((p_26 - s_9) < 0))) ==>
                                  (p_26.charM != (c_17 :%> int8))))));
      behavior default:
        invariant (_C_902 : ((last != null) ==>
                              (\forall charP[..] p_27;
                                ((((\base_block(last) == \base_block(p_27)) &&
                                    ((last - p_27) < 0)) &&
                                   ((\base_block(p_27) == \base_block(s_9)) &&
                                     ((p_27 - s_9) < 0))) ==>
                                  (p_27.charM != (c_17 :%> int8))))));
      variant (_C_901 : ((strlen{Here}(os_2) :> integer) - (s_9 - os_2)));
      while (true)
      {  
         {  
            {  (if (_C_918 : ((_C_917 : ((_C_916 : s_9.charM) :> int32)) ==
                               (_C_915 : ((_C_914 : (c_17 :%> int8)) :> int32)))) then 
               (_C_913 : (last = s_9)) else ())
            };
            
            {  (_C_919 : (tmp_0_10 = s_9));
               (_C_921 : (s_9 = (_C_920 : (s_9 + (1 :> int32)))));
               ()
            };
            (if (_C_923 : (((_C_922 : tmp_0_10.charM) :> int8) !=
                            (0 :> int8))) then () else 
            (goto while_0_break))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_924 : (jessie : ((s_9 + (- 1)).charM ==
                                                    (0 :> int8)))));
         ()
      };
      
      {  
         (assert for default: (_C_925 : (jessie : (s_9 ==
                                                    ((os_2 +
                                                       (strlen{Here}(
                                                       os_2) :> integer)) +
                                                      1)))));
         ()
      };
      
      {  
         (assert for default: (_C_926 : (jessie : ((\exists charP[..] p_28;
                                                     ((((\base_block(os_2) ==
                                                          \base_block(p_28)) &&
                                                         ((os_2 - p_28) <= 0)) &&
                                                        ((\base_block(p_28) ==
                                                           \base_block(
                                                           (os_2 +
                                                             (strlen{Here}(
                                                             os_2) :> integer)))) &&
                                                          ((p_28 -
                                                             (os_2 +
                                                               (strlen{Here}(
                                                               os_2) :> integer))) <
                                                            0))) &&
                                                       (p_28.charM ==
                                                         (c_17 :%> int8)))) ==>
                                                    (last != null)))));
         ()
      };
      (_C_927 : (__retres_13 = last));
      
      (return __retres_13)
   }
}

charP[..] strsep(char_xP[..] s_10, charP[..] ct_2)
  requires ((_C_976 : valid_str{Here}(ct_2)) &&
             ((_C_977 : \at((((\offset_min(\at(s_10,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(s_10,Here)) >= \at(0,Here))) &&
                              true),Here)) &&
               (_C_978 : ((valid_str{Here}(s_10.char_xM) &&
                            (! (s_10.char_xM == null))) ||
                           ((s_10.char_xM == null) &&
                             (! valid_str{Here}(s_10.char_xM)))))));
behavior default:
  ensures true;
behavior input_null:
  assumes (s_10.char_xM == null);
  assigns \nothing;
  ensures (_C_960 : (\result == null));
behavior input_strpbrk_null:
  assumes (valid_str{Here}(s_10.char_xM) &&
            (strpbrk(s_10.char_xM, ct_2) == null));
  assigns s_10.char_xM;
  ensures (_C_961 : ((_C_962 : (\result == \at(s_10.char_xM,Old))) &&
                      (_C_963 : (\at(s_10,Old).char_xM == null))));
behavior input_strpbrk_not_null:
  assumes (valid_str{Here}(s_10.char_xM) &&
            (strpbrk(s_10.char_xM, ct_2) != null));
  assigns strpbrk(\at(s_10.char_xM,Old), ct_2).charM,
  s_10.char_xM;
  ensures (_C_964 : ((_C_965 : (\result == \at(s_10.char_xM,Old))) &&
                      ((_C_967 : (\at(s_10,Old).char_xM ==
                                   (strpbrk(\at(s_10.char_xM,Old),
                                            \at(ct_2,Old)) +
                                     1))) &&
                        ((_C_969 : (strpbrk(\at(s_10.char_xM,Old),
                                            \at(ct_2,Old)).charM ==
                                     (0 :> int8))) &&
                          (_C_970 : valid_str{Here}(\result))))));
{  
   (check (disjoint_behaviors : (! ((valid_str{Here}(s_10.char_xM) &&
                                      (strpbrk(s_10.char_xM, ct_2) == null)) &&
                                     (valid_str{Here}(s_10.char_xM) &&
                                       (strpbrk(s_10.char_xM, ct_2) != null))))));
   
   (check (disjoint_behaviors : (! ((s_10.char_xM == null) &&
                                     (valid_str{Here}(s_10.char_xM) &&
                                       (strpbrk(s_10.char_xM, ct_2) == null))))));
   
   (check (disjoint_behaviors : (! ((s_10.char_xM == null) &&
                                     (valid_str{Here}(s_10.char_xM) &&
                                       (strpbrk(s_10.char_xM, ct_2) != null))))));
   
   (check (complete_behaviors : ((valid_str{Here}(s_10.char_xM) &&
                                   (strpbrk(s_10.char_xM, ct_2) != null)) ||
                                  ((valid_str{Here}(s_10.char_xM) &&
                                     (strpbrk(s_10.char_xM, ct_2) == null)) ||
                                    (s_10.char_xM == null)))));
   
   (var charP[..] sbegin);
   
   (var charP[..] end_0);
   
   (var charP[..] tmp_0_11);
   
   (var charP[..] __retres_14);
   
   {  (_C_944 : (sbegin = (_C_943 : s_10.char_xM)));
      (if (_C_946 : (sbegin == null)) then 
      {  (_C_945 : (__retres_14 = null));
         
         (goto return_label)
      } else ());
      (_C_948 : (end_0 = (_C_947 : strpbrk(sbegin, ct_2))));
      
      {  
         (assert for default: (_C_949 : (jessie : (strpbrk(sbegin, ct_2) ==
                                                    end_0))));
         ()
      };
      
      {  (if (_C_956 : (end_0 != null)) then 
         {  (_C_950 : (tmp_0_11 = end_0));
            (_C_952 : (end_0 = (_C_951 : (end_0 + (1 :> int32)))));
            (_C_955 : ((_C_954 : tmp_0_11.charM) = (_C_953 : ((0 :> int32) :> int8))))
         } else ())
      };
      (_C_958 : ((_C_957 : s_10.char_xM) = end_0));
      (_C_959 : (__retres_14 = sbegin));
      (return_label : 
      (return __retres_14))
   }
}

uint64 strspn(charP[..] s_11, charP[..] accept)
  requires ((_C_1043 : valid_str{Here}(s_11)) &&
             (_C_1044 : valid_str{Here}(accept)));
behavior default:
  assigns \nothing;
  ensures (_C_1034 : (((_C_1036 : ((0 :> uint64) <= \result)) &&
                        (_C_1037 : (\result <= strlen{Here}(\at(s_11,Old))))) &&
                       ((_C_1039 : (\forall charP[..] t_15;
                                     ((((\base_block(\at(accept,Old)) ==
                                          \base_block(t_15)) &&
                                         ((\at(accept,Old) - t_15) <= 0)) &&
                                        ((\base_block(t_15) ==
                                           \base_block((\at(accept,Old) +
                                                         (strlen{Here}(
                                                         \at(accept,Old)) :> integer)))) &&
                                          ((t_15 -
                                             (\at(accept,Old) +
                                               (strlen{Here}(\at(accept,Old)) :> integer))) <
                                            0))) ==>
                                       ((\at(s_11,Old) +
                                          (\result :> integer)).charM !=
                                         t_15.charM)))) &&
                         ((_C_1041 : (\forall charP[..] p_32;
                                       ((((\base_block(\at(s_11,Old)) ==
                                            \base_block(p_32)) &&
                                           ((\at(s_11,Old) - p_32) <= 0)) &&
                                          ((\base_block(p_32) ==
                                             \base_block((\at(s_11,Old) +
                                                           (\result :> integer)))) &&
                                            ((p_32 -
                                               (\at(s_11,Old) +
                                                 (\result :> integer))) <
                                              0))) ==>
                                         (\exists charP[..] t_16;
                                           ((((\base_block(\at(accept,Old)) ==
                                                \base_block(t_16)) &&
                                               ((\at(accept,Old) - t_16) <=
                                                 0)) &&
                                              ((\base_block(t_16) ==
                                                 \base_block((\at(accept,Old) +
                                                               (strlen{Here}(
                                                               \at(accept,Old)) :> integer)))) &&
                                                ((t_16 -
                                                   (\at(accept,Old) +
                                                     (strlen{Here}(\at(accept,Old)) :> integer))) <
                                                  0))) &&
                                             (p_32.charM == t_16.charM)))))) &&
                           (_C_1042 : ((\result :> integer) ==
                                        strspn(\at(s_11,Old), \at(accept,Old))))))));
{  
   (var charP[..] p_2);
   
   (var charP[..] a);
   
   (var uint64 count_6);
   
   (var uint64 __retres_15);
   
   {  (_C_980 : (count_6 = (_C_979 : ((0 :> int32) :> uint64))));
      (_C_981 : (p_2 = s_11));
      
      loop 
      behavior default:
        invariant (_C_990 : (((_C_992 : (\base_block(s_11) ==
                                          \base_block(p_2))) &&
                               (_C_993 : ((s_11 - p_2) <= 0))) &&
                              ((_C_995 : (\base_block(p_2) ==
                                           \base_block((s_11 +
                                                         (strlen{Here}(
                                                         s_11) :> integer))))) &&
                                (_C_996 : ((p_2 -
                                             (s_11 +
                                               (strlen{Here}(s_11) :> integer))) <=
                                            0)))));
      behavior default:
        invariant (_C_987 : ((_C_988 : ((0 :> uint64) <= count_6)) &&
                              (_C_989 : (count_6 <= strlen{Here}(s_11)))));
      behavior default:
        invariant (_C_986 : ((count_6 :> integer) == (p_2 - s_11)));
      behavior default:
        invariant (_C_985 : (\forall charP[..] c_35;
                              ((((\base_block(s_11) == \base_block(c_35)) &&
                                  ((s_11 - c_35) <= 0)) &&
                                 ((\base_block(c_35) == \base_block(p_2)) &&
                                   ((c_35 - p_2) < 0))) ==>
                                (\exists charP[..] t_14;
                                  ((((\base_block(accept) ==
                                       \base_block(t_14)) &&
                                      ((accept - t_14) <= 0)) &&
                                     ((\base_block(t_14) ==
                                        \base_block((accept +
                                                      (strlen{Here}(accept) :> integer)))) &&
                                       ((t_14 -
                                          (accept +
                                            (strlen{Here}(accept) :> integer))) <
                                         0))) &&
                                    (c_35.charM == t_14.charM))))));
      behavior default:
        invariant (_C_984 : valid_str{Here}(p_2));
      behavior default:
        invariant (_C_983 : (strspn(s_11, accept) ==
                              (strspn(p_2, accept) + (count_6 :> integer))));
      variant (_C_982 : ((strlen{Here}(s_11) :> integer) - (p_2 - s_11)));
      while (true)
      {  
         {  (if (_C_999 : ((_C_998 : ((_C_997 : p_2.charM) :> int32)) !=
                            (0 :> int32))) then () else 
            (goto while_0_break));
            
            {  (_C_1000 : (a = accept));
               
               loop 
               behavior default:
                 invariant (_C_1005 : (((_C_1007 : (\base_block(accept) ==
                                                     \base_block(a))) &&
                                         (_C_1008 : ((accept - a) <= 0))) &&
                                        ((_C_1010 : (\base_block(a) ==
                                                      \base_block((accept +
                                                                    (strlen{Here}(
                                                                    accept) :> integer))))) &&
                                          (_C_1011 : ((a -
                                                        (accept +
                                                          (strlen{Here}(
                                                          accept) :> integer))) <=
                                                       0)))));
               behavior default:
                 invariant (_C_1004 : (\forall charP[..] c_34;
                                        ((((\base_block(accept) ==
                                             \base_block(c_34)) &&
                                            ((accept - c_34) <= 0)) &&
                                           ((\base_block(c_34) ==
                                              \base_block(a)) &&
                                             ((c_34 - a) < 0))) ==>
                                          (c_34.charM != p_2.charM))));
               behavior default:
                 invariant (_C_1003 : valid_str{Here}(a));
               behavior default:
                 invariant (_C_1002 : (in_array{Here}(accept, p_2.charM) ==>
                                        in_array{Here}(a, p_2.charM)));
               variant (_C_1001 : ((strlen{Here}(accept) :> integer) -
                                    (a - accept)));
               while (true)
               {  
                  {  (if (_C_1014 : ((_C_1013 : ((_C_1012 : a.charM) :> int32)) !=
                                      (0 :> int32))) then () else 
                     (goto while_1_break));
                     
                     {  (if (_C_1019 : ((_C_1018 : ((_C_1017 : p_2.charM) :> int32)) ==
                                         (_C_1016 : ((_C_1015 : a.charM) :> int32)))) then 
                        (goto while_1_break) else ())
                     };
                     (_C_1021 : (a = (_C_1020 : (a + (1 :> int32)))))
                  }
               };
               (while_1_break : ());
               (if (_C_1026 : ((_C_1025 : ((_C_1024 : a.charM) :> int32)) ==
                                (0 :> int32))) then 
               {  
                  {  
                     (assert for default: (_C_1022 : (jessie : (! in_array{Here}(
                                                               accept,
                                                               p_2.charM)))));
                     ()
                  };
                  
                  {  (_C_1023 : (__retres_15 = count_6));
                     
                     (goto return_label)
                  }
               } else ());
               
               {  
                  (assert for default: (_C_1027 : (jessie : in_array{Here}(
                                                  accept, p_2.charM))));
                  ()
               };
               (_C_1030 : (count_6 = (_C_1029 : ((_C_1028 : (count_6 +
                                                              (1 :> uint64))) :> uint64))))
            };
            (_C_1032 : (p_2 = (_C_1031 : (p_2 + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_1033 : (__retres_15 = count_6));
      (return_label : 
      (return __retres_15))
   }
}

charP[..] memcpy_char_0(charP[..] dest_4, charP[..] src_2, uint64 n_4)
  requires (_C_1048 : (((_C_1050 : (n_4 >= (0 :> uint64))) &&
                         (_C_1051 : (((n_4 :> integer) % 1) == 0))) &&
                        (_C_1052 : (let integer _n_6 = ((n_4 :> integer) / 1)
                                   in ((\at((if (\at(0,Here) <=
                                                  \at((_n_6 - 1),Here)) then 
                                            (((\offset_min(\at(dest_4,Here)) <=
                                                \at(0,Here)) &&
                                               (\offset_max(\at(dest_4,Here)) >=
                                                 \at((_n_6 - 1),Here))) &&
                                              (\forall integer __framac_tmp27;
                                                (((\at(0,Here) <=
                                                    __framac_tmp27) &&
                                                   (__framac_tmp27 <=
                                                     \at((_n_6 - 1),Here))) ==>
                                                  true))) else true),Here) &&
                                         \at((if (\at(0,Here) <=
                                                   \at((_n_6 - 1),Here)) then 
                                             (((\offset_min(\at(src_2,Here)) <=
                                                 \at(0,Here)) &&
                                                (\offset_max(\at(src_2,Here)) >=
                                                  \at((_n_6 - 1),Here))) &&
                                               (\forall integer __framac_tmp26;
                                                 (((\at(0,Here) <=
                                                     __framac_tmp26) &&
                                                    (__framac_tmp26 <=
                                                      \at((_n_6 - 1),Here))) ==>
                                                   true))) else true),Here)) &&
                                        separated_char{Here,
                                        Here}(dest_4, src_2, n_4))))));
behavior default:
  assigns (dest_4 + [0..(((n_4 :> integer) / 1) - 1)]).charM;
  allocates \nothing;
  ensures (_C_1045 : ((_C_1046 : memcmp_char{Here,
                      Here}(\at(dest_4,Old), \at(src_2,Old), \at(n_4,Old))) &&
                       (_C_1047 : (\result == \at(dest_4,Old)))));
;

axiomatic memcpy_char {

  predicate memcmp_char{L1, L2}(charP[..] p1_1, charP[..] p2_1, uint64 n_8) =
  ((((n_8 :> integer) % 1) == 0) &&
    (let integer _n_7 = ((n_8 :> integer) / 1)
    in ((\at((if (\at(0,L1) <= \at((_n_7 - 1),L1)) then (((\offset_min(
                                                            \at(p1_1,L1)) <=
                                                            \at(0,L1)) &&
                                                           (\offset_max(
                                                             \at(p1_1,L1)) >=
                                                             \at((_n_7 - 1),L1))) &&
                                                          (\forall integer __framac_tmp29;
                                                            (((\at(0,L1) <=
                                                                __framac_tmp29) &&
                                                               (__framac_tmp29 <=
                                                                 \at(
                                                                 (_n_7 -
                                                                   1),L1))) ==>
                                                              true))) else true),L1) &&
          \at((if (\at(0,L1) <= \at((_n_7 - 1),L1)) then (((\offset_min(
                                                             \at(p2_1,L1)) <=
                                                             \at(0,L1)) &&
                                                            (\offset_max(
                                                              \at(p2_1,L1)) >=
                                                              \at((_n_7 - 1),L1))) &&
                                                           (\forall integer __framac_tmp28;
                                                             (((\at(0,L1) <=
                                                                 __framac_tmp28) &&
                                                                (__framac_tmp28 <=
                                                                  \at(
                                                                  (_n_7 -
                                                                    1),L1))) ==>
                                                               true))) else true),L2)) &&
         (\forall integer k_2;
           (((0 <= k_2) && (k_2 < _n_7)) ==>
             (\at((p1_1 + k_2).charM,L1) == \at((p2_1 + k_2).charM,L2)))))))
   
  predicate separated_char{L1, L2}(charP[..] p1_2, charP[..] p2_2, uint64 n_9) =
  ((((n_9 :> integer) % 1) == 0) &&
    (let integer _n_8 = ((n_9 :> integer) / 1)
    in ((\at((if (\at(0,L1) <= \at((_n_8 - 1),L1)) then (((\offset_min(
                                                            \at(p1_2,L1)) <=
                                                            \at(0,L1)) &&
                                                           (\offset_max(
                                                             \at(p1_2,L1)) >=
                                                             \at((_n_8 - 1),L1))) &&
                                                          (\forall integer __framac_tmp31;
                                                            (((\at(0,L1) <=
                                                                __framac_tmp31) &&
                                                               (__framac_tmp31 <=
                                                                 \at(
                                                                 (_n_8 -
                                                                   1),L1))) ==>
                                                              true))) else true),L1) &&
          \at((if (\at(0,L1) <= \at((_n_8 - 1),L1)) then (((\offset_min(
                                                             \at(p2_2,L1)) <=
                                                             \at(0,L1)) &&
                                                            (\offset_max(
                                                              \at(p2_2,L1)) >=
                                                              \at((_n_8 - 1),L1))) &&
                                                           (\forall integer __framac_tmp30;
                                                             (((\at(0,L1) <=
                                                                 __framac_tmp30) &&
                                                                (__framac_tmp30 <=
                                                                  \at(
                                                                  (_n_8 -
                                                                    1),L1))) ==>
                                                               true))) else true),L2)) &&
         ((\base_block(p1_2) != \base_block(p2_2)) || (true && true)))))
  
}

uint64 strlcpy(charP[..] dest_10, charP[..] src_7, uint64 size_3)
  requires ((_C_1082 : \at((if (\at(0,Here) <=
                                 \at(((size_3 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(dest_10,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(dest_10,Here)) >=
                                \at(((size_3 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp32;
                               (((\at(0,Here) <= __framac_tmp32) &&
                                  (__framac_tmp32 <=
                                    \at(((size_3 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
             ((_C_1083 : valid_str{Here}(src_7)) &&
               (_C_1084 : (\base_block(dest_10) != \base_block(src_7)))));
behavior default:
  ensures true;
behavior size_is_lower_src:
  assumes (((0 :> uint64) < size_3) && (size_3 <= strlen{Here}(src_7)));
  assigns (dest_10 + [0..((size_3 :> integer) - 1)]).charM;
  ensures (_C_1071 : ((_C_1072 : (\forall integer i_57;
                                   (((0 <= i_57) &&
                                      (i_57 <
                                        ((\at(size_3,Old) :> integer) - 1))) ==>
                                     ((\at(src_7,Old) + i_57).charM ==
                                       (\at(dest_10,Old) + i_57).charM)))) &&
                       (_C_1073 : valid_str{Here}(\at(dest_10,Old)))));
behavior size_is_greater_src:
  assumes (size_3 > strlen{Here}(src_7));
  assigns (dest_10 + [0..(strlen{Old}(src_7) :> integer)]).charM;
  ensures (_C_1074 : ((_C_1075 : (\forall integer i_56;
                                   (((0 <= i_56) &&
                                      (i_56 <
                                        (strlen{Here}(\at(src_7,Old)) :> integer))) ==>
                                     ((\at(src_7,Old) + i_56).charM ==
                                       (\at(dest_10,Old) + i_56).charM)))) &&
                       (_C_1076 : valid_str{Here}(\at(dest_10,Old)))));
behavior zero_size:
  assumes (size_3 == (0 :> uint64));
  assigns \nothing;
  ensures true;
{  
   (check (disjoint_behaviors : (! ((size_3 > strlen{Here}(src_7)) &&
                                     (size_3 == (0 :> uint64))))));
   
   (check (disjoint_behaviors : (! ((((0 :> uint64) < size_3) &&
                                      (size_3 <= strlen{Here}(src_7))) &&
                                     (size_3 > strlen{Here}(src_7))))));
   
   (check (disjoint_behaviors : (! ((((0 :> uint64) < size_3) &&
                                      (size_3 <= strlen{Here}(src_7))) &&
                                     (size_3 == (0 :> uint64))))));
   
   (check (complete_behaviors : ((size_3 == (0 :> uint64)) ||
                                  ((size_3 > strlen{Here}(src_7)) ||
                                    (((0 :> uint64) < size_3) &&
                                      (size_3 <= strlen{Here}(src_7)))))));
   
   (var uint64 ret);
   
   (var uint64 len);
   
   (var uint64 tmp_0_12);
   
   {  (_C_1054 : (ret = (_C_1053 : strlen(src_7))));
      (if (_C_1070 : ((size_3 :> uint64) != (0 :> uint64))) then 
      {  (if (_C_1060 : (ret >= size_3)) then (_C_1059 : (tmp_0_12 = 
                                              (_C_1058 : ((_C_1057 : 
                                                          (size_3 -
                                                            (_C_1056 : ((1 :> int32) :> uint64)))) :> uint64)))) else 
         (_C_1055 : (tmp_0_12 = ret)));
         (_C_1061 : (len = tmp_0_12));
         (_C_1062 : memcpy_char_0(dest_10, src_7, len));
         
         {  
            (assert for default: (_C_1063 : (jessie : (\forall integer i_55;
                                                        (((0 <= i_55) &&
                                                           (i_55 <
                                                             (len :> integer))) ==>
                                                          ((src_7 + i_55).charM ==
                                                            (dest_10 + i_55).charM))))));
            ()
         };
         (_C_1067 : ((_C_1066 : (_C_1065 : (dest_10 + len)).charM) = 
         (_C_1064 : ((0 :> int32) :> int8))));
         
         {  
            (assert for default: (_C_1068 : (jessie : valid_str{Here}(
                                            dest_10))));
            ()
         };
         
         {  
            (assert for default: (_C_1069 : (jessie : (strlen{Here}(dest_10) ==
                                                        len))));
            ()
         }
      } else ());
      
      (return ret)
   }
}

voidP[..] memmove(voidP[..] dest_5, voidP[..] src_3, uint64 count_1)
  requires ((_C_1178 : (dest_5 <: charP)) &&
             ((_C_1179 : (src_3 <: charP)) &&
               ((_C_1180 : \at((if (\at(0,Here) <=
                                     \at(((count_1 :> integer) - 1),Here)) then 
                               (((\offset_min(\at((dest_5 :> charP[..]),Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at((dest_5 :> charP[..]),Here)) >=
                                    \at(((count_1 :> integer) - 1),Here))) &&
                                 (\forall integer __framac_tmp33;
                                   (((\at(0,Here) <= __framac_tmp33) &&
                                      (__framac_tmp33 <=
                                        \at(((count_1 :> integer) - 1),Here))) ==>
                                     true))) else true),Here)) &&
                 ((_C_1181 : \at((if (\at(0,Here) <=
                                       \at(((count_1 :> integer) - 1),Here)) then 
                                 (((\offset_min(\at((src_3 :> charP[..]),Here)) <=
                                     \at(0,Here)) &&
                                    (\offset_max(\at((src_3 :> charP[..]),Here)) >=
                                      \at(((count_1 :> integer) - 1),Here))) &&
                                   (\forall integer __framac_tmp34;
                                     (((\at(0,Here) <= __framac_tmp34) &&
                                        (__framac_tmp34 <=
                                          \at(((count_1 :> integer) - 1),Here))) ==>
                                       true))) else true),Here)) &&
                   (_C_1182 : (((\base_block(dest_5) == \base_block(src_3)) &&
                                 (! (\base_block(dest_5) !=
                                      \base_block(src_3)))) ||
                                ((\base_block(dest_5) != \base_block(src_3)) &&
                                  (! (\base_block(dest_5) ==
                                       \base_block(src_3))))))))));
behavior default:
  assigns ((dest_5 :> charP[..]) + [0..((count_1 :> integer) - 1)]).charM;
  ensures true;
behavior same_addr:
  assumes (\base_block(dest_5) == \base_block(src_3));
  ensures (_C_1174 : (\forall integer i_63;
                       (((0 <= i_63) &&
                          (i_63 < (\at(count_1,Old) :> integer))) ==>
                         (((\at(dest_5,Old) :> charP[..]) + i_63).charM ==
                           \at(((src_3 :> charP[..]) + i_63).charM,Old)))));
behavior diff_addr:
  assumes (\base_block(dest_5) != \base_block(src_3));
  ensures (_C_1175 : (\forall integer i_62;
                       (((0 <= i_62) &&
                          (i_62 < (\at(count_1,Old) :> integer))) ==>
                         (((\at(dest_5,Old) :> charP[..]) + i_62).charM ==
                           \at(((src_3 :> charP[..]) + i_62).charM,Old)))));
{  
   (var uint64 orig_count);
   
   (var charP[..] tmp_0_13);
   
   (var charP[..] s_12);
   
   (var charP[..] tmp_0_14);
   
   (var charP[..] tmp_1_2);
   
   (var uint64 tmp_2_2);
   
   (var uint64 tmp_3_0);
   
   {  (_C_1085 : (orig_count = count_1));
      (if (_C_1172 : ((dest_5 - src_3) <= 0)) then 
      {  (_C_1131 : (tmp_0_13 = (_C_1130 : (dest_5 :> charP[..]))));
         (_C_1133 : (s_12 = (_C_1132 : (src_3 :> charP[..]))));
         
         loop 
         behavior default:
           invariant (_C_1154 : ((_C_1155 : ((0 :> uint64) <= count_1)) &&
                                  (_C_1156 : (count_1 <= orig_count))));
         behavior default:
           invariant (_C_1151 : ((_C_1152 : ((tmp_0_13 -
                                               (dest_5 :> charP[..])) ==
                                              ((orig_count :> integer) -
                                                (count_1 :> integer)))) &&
                                  (_C_1153 : (((orig_count :> integer) -
                                                (count_1 :> integer)) ==
                                               (s_12 - (src_3 :> charP[..]))))));
         behavior default:
           invariant (_C_1144 : (((_C_1146 : (\base_block((dest_5 :> charP[..])) ==
                                               \base_block(tmp_0_13))) &&
                                   (_C_1147 : (((dest_5 :> charP[..]) -
                                                 tmp_0_13) <=
                                                0))) &&
                                  ((_C_1149 : (\base_block(tmp_0_13) ==
                                                \base_block(((dest_5 :> charP[..]) +
                                                              (orig_count :> integer))))) &&
                                    (_C_1150 : ((tmp_0_13 -
                                                  ((dest_5 :> charP[..]) +
                                                    (orig_count :> integer))) <=
                                                 0)))));
         behavior default:
           invariant (_C_1137 : (((_C_1139 : (\base_block((src_3 :> charP[..])) ==
                                               \base_block(s_12))) &&
                                   (_C_1140 : (((src_3 :> charP[..]) - s_12) <=
                                                0))) &&
                                  ((_C_1142 : (\base_block(s_12) ==
                                                \base_block(((src_3 :> charP[..]) +
                                                              (orig_count :> integer))))) &&
                                    (_C_1143 : ((s_12 -
                                                  ((src_3 :> charP[..]) +
                                                    (orig_count :> integer))) <=
                                                 0)))));
         behavior default:
           invariant (_C_1136 : (\forall integer i_58;
                                  (((((orig_count :> integer) -
                                       (count_1 :> integer)) <=
                                      i_58) &&
                                     (i_58 < (orig_count :> integer))) ==>
                                    (((src_3 :> charP[..]) + i_58).charM ==
                                      \at(((src_3 :> charP[..]) + i_58).charM,Pre)))));
         behavior default:
           invariant (_C_1135 : (\forall integer i_59;
                                  (((0 <= i_59) &&
                                     (i_59 <
                                       ((orig_count :> integer) -
                                         (count_1 :> integer)))) ==>
                                    (((dest_5 :> charP[..]) + i_59).charM ==
                                      \at(((src_3 :> charP[..]) + i_59).charM,Pre)))));
         variant (_C_1134 : count_1);
         while (true)
         {  
            {  
               {  (_C_1157 : (tmp_2_2 = count_1));
                  (_C_1160 : (count_1 = (_C_1159 : ((_C_1158 : (count_1 -%
                                                                 (1 :> uint64))) :> uint64))));
                  ()
               };
               (if (_C_1161 : ((tmp_2_2 :> uint64) != (0 :> uint64))) then () else 
               (goto while_0_break));
               
               {  
                  {  (_C_1162 : (tmp_0_14 = tmp_0_13));
                     (_C_1164 : (tmp_0_13 = (_C_1163 : (tmp_0_13 +
                                                         (1 :> int32)))));
                     (_C_1165 : (tmp_1_2 = s_12));
                     (_C_1167 : (s_12 = (_C_1166 : (s_12 + (1 :> int32)))));
                     (_C_1170 : ((_C_1169 : tmp_0_14.charM) = (_C_1168 : tmp_1_2.charM)))
                  };
                  
                  {  
                     (assert for default: (_C_1171 : (jessie : (((dest_5 :> charP[..]) +
                                                                  (((orig_count :> integer) -
                                                                    (count_1 :> integer)) -
                                                                    1)).charM ==
                                                                 ((src_3 :> charP[..]) +
                                                                   (((orig_count :> integer) -
                                                                    (count_1 :> integer)) -
                                                                    1)).charM))));
                     ()
                  }
               }
            }
         };
         (while_0_break : ())
      } else 
      {  (_C_1087 : (tmp_0_13 = (_C_1086 : (dest_5 :> charP[..]))));
         (_C_1089 : (tmp_0_13 = (_C_1088 : (tmp_0_13 + count_1))));
         (_C_1091 : (s_12 = (_C_1090 : (src_3 :> charP[..]))));
         (_C_1093 : (s_12 = (_C_1092 : (s_12 + count_1))));
         
         loop 
         behavior default:
           invariant (_C_1114 : ((_C_1115 : ((0 :> uint64) <= count_1)) &&
                                  (_C_1116 : (count_1 <= orig_count))));
         behavior default:
           invariant (_C_1111 : ((_C_1112 : ((tmp_0_13 -
                                               (dest_5 :> charP[..])) ==
                                              (count_1 :> integer))) &&
                                  (_C_1113 : ((count_1 :> integer) ==
                                               (s_12 - (src_3 :> charP[..]))))));
         behavior default:
           invariant (_C_1104 : (((_C_1106 : (\base_block((dest_5 :> charP[..])) ==
                                               \base_block(tmp_0_13))) &&
                                   (_C_1107 : (((dest_5 :> charP[..]) -
                                                 tmp_0_13) <=
                                                0))) &&
                                  ((_C_1109 : (\base_block(tmp_0_13) ==
                                                \base_block(((dest_5 :> charP[..]) +
                                                              (orig_count :> integer))))) &&
                                    (_C_1110 : ((tmp_0_13 -
                                                  ((dest_5 :> charP[..]) +
                                                    (orig_count :> integer))) <=
                                                 0)))));
         behavior default:
           invariant (_C_1097 : (((_C_1099 : (\base_block((src_3 :> charP[..])) ==
                                               \base_block(s_12))) &&
                                   (_C_1100 : (((src_3 :> charP[..]) - s_12) <=
                                                0))) &&
                                  ((_C_1102 : (\base_block(s_12) ==
                                                \base_block(((src_3 :> charP[..]) +
                                                              (orig_count :> integer))))) &&
                                    (_C_1103 : ((s_12 -
                                                  ((src_3 :> charP[..]) +
                                                    (orig_count :> integer))) <=
                                                 0)))));
         behavior default:
           invariant (_C_1096 : (\forall integer i_60;
                                  (((0 <= i_60) &&
                                     (i_60 < (count_1 :> integer))) ==>
                                    (((src_3 :> charP[..]) + i_60).charM ==
                                      \at(((src_3 :> charP[..]) + i_60).charM,Pre)))));
         behavior default:
           invariant (_C_1095 : (\forall integer i_61;
                                  ((((count_1 :> integer) <= i_61) &&
                                     (i_61 < (orig_count :> integer))) ==>
                                    (((dest_5 :> charP[..]) + i_61).charM ==
                                      \at(((src_3 :> charP[..]) + i_61).charM,Pre)))));
         variant (_C_1094 : count_1);
         while (true)
         {  
            {  
               {  (_C_1117 : (tmp_3_0 = count_1));
                  (_C_1120 : (count_1 = (_C_1119 : ((_C_1118 : (count_1 -%
                                                                 (1 :> uint64))) :> uint64))));
                  ()
               };
               (if (_C_1121 : ((tmp_3_0 :> uint64) != (0 :> uint64))) then () else 
               (goto while_0_break_0));
               
               {  
                  {  (_C_1123 : (tmp_0_13 = (_C_1122 : (tmp_0_13 -
                                                         (1 :> int32)))));
                     (_C_1125 : (s_12 = (_C_1124 : (s_12 - (1 :> int32)))));
                     (_C_1128 : ((_C_1127 : tmp_0_13.charM) = (_C_1126 : s_12.charM)))
                  };
                  
                  {  
                     (assert for default: (_C_1129 : (jessie : (((dest_5 :> charP[..]) +
                                                                  (count_1 :> integer)).charM ==
                                                                 ((src_3 :> charP[..]) +
                                                                   (count_1 :> integer)).charM))));
                     ()
                  }
               }
            }
         };
         (while_0_break_0 : ())
      });
      
      {  
         (assert for default: (_C_1173 : (jessie : (count_1 ==
                                                     ((- 1) :%> uint64)))));
         ()
      };
      
      (return dest_5)
   }
}

voidP[..] memcpy(voidP[..] dest_2, voidP[..] src_0, uint64 count_0)
  requires ((_C_1226 : (src_0 <: charP)) &&
             ((_C_1227 : (dest_2 <: charP)) &&
               ((_C_1228 : \at((if (\at(0,Here) <=
                                     \at(((count_0 :> integer) - 1),Here)) then 
                               (((\offset_min(\at((src_0 :> charP[..]),Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at((src_0 :> charP[..]),Here)) >=
                                    \at(((count_0 :> integer) - 1),Here))) &&
                                 (\forall integer __framac_tmp35;
                                   (((\at(0,Here) <= __framac_tmp35) &&
                                      (__framac_tmp35 <=
                                        \at(((count_0 :> integer) - 1),Here))) ==>
                                     true))) else true),Here)) &&
                 (_C_1229 : \at((if (\at(0,Here) <=
                                      \at(((count_0 :> integer) - 1),Here)) then 
                                (((\offset_min(\at((dest_2 :> charP[..]),Here)) <=
                                    \at(0,Here)) &&
                                   (\offset_max(\at((dest_2 :> charP[..]),Here)) >=
                                     \at(((count_0 :> integer) - 1),Here))) &&
                                  (\forall integer __framac_tmp36;
                                    (((\at(0,Here) <= __framac_tmp36) &&
                                       (__framac_tmp36 <=
                                         \at(((count_0 :> integer) - 1),Here))) ==>
                                      true))) else true),Here)))));
behavior default:
  assigns ((dest_2 :> charP[..]) + [0..((count_0 :> integer) - 1)]).charM;
  ensures (_C_1225 : (\forall integer i_65;
                       (((0 <= i_65) &&
                          (i_65 < (\at(count_0,Old) :> integer))) ==>
                         (((\at(dest_2,Old) :> charP[..]) + i_65).charM ==
                           ((\at(src_0,Old) :> charP[..]) + i_65).charM))));
{  
   (var charP[..] tmp_0_15);
   
   (var charP[..] s_13);
   
   (var uint64 ocount_0);
   
   (var charP[..] tmp_0_16);
   
   (var charP[..] tmp_1_3);
   
   (var uint64 tmp_2_3);
   
   {  (_C_1184 : (tmp_0_15 = (_C_1183 : (dest_2 :> charP[..]))));
      (_C_1186 : (s_13 = (_C_1185 : (src_0 :> charP[..]))));
      (_C_1187 : (ocount_0 = count_0));
      
      loop 
      behavior default:
        invariant (_C_1207 : ((_C_1208 : ((0 :> uint64) <= count_0)) &&
                               (_C_1209 : (count_0 <= ocount_0))));
      behavior default:
        invariant (_C_1200 : (((_C_1202 : (\base_block((dest_2 :> charP[..])) ==
                                            \base_block(tmp_0_15))) &&
                                (_C_1203 : (((dest_2 :> charP[..]) -
                                              tmp_0_15) <=
                                             0))) &&
                               ((_C_1205 : (\base_block(tmp_0_15) ==
                                             \base_block(((dest_2 :> charP[..]) +
                                                           (ocount_0 :> integer))))) &&
                                 (_C_1206 : ((tmp_0_15 -
                                               ((dest_2 :> charP[..]) +
                                                 (ocount_0 :> integer))) <=
                                              0)))));
      behavior default:
        invariant (_C_1193 : (((_C_1195 : (\base_block((src_0 :> charP[..])) ==
                                            \base_block(s_13))) &&
                                (_C_1196 : (((src_0 :> charP[..]) - s_13) <=
                                             0))) &&
                               ((_C_1198 : (\base_block(s_13) ==
                                             \base_block(((src_0 :> charP[..]) +
                                                           (ocount_0 :> integer))))) &&
                                 (_C_1199 : ((s_13 -
                                               ((src_0 :> charP[..]) +
                                                 (ocount_0 :> integer))) <=
                                              0)))));
      behavior default:
        invariant (_C_1190 : ((_C_1191 : ((tmp_0_15 - (dest_2 :> charP[..])) ==
                                           (s_13 - (src_0 :> charP[..])))) &&
                               (_C_1192 : ((s_13 - (src_0 :> charP[..])) ==
                                            ((ocount_0 :> integer) -
                                              (count_0 :> integer))))));
      behavior default:
        invariant (_C_1189 : (\forall integer i_64;
                               (((0 <= i_64) &&
                                  (i_64 <
                                    ((ocount_0 :> integer) -
                                      (count_0 :> integer)))) ==>
                                 (((dest_2 :> charP[..]) + i_64).charM ==
                                   ((src_0 :> charP[..]) + i_64).charM))));
      variant (_C_1188 : count_0);
      while (true)
      {  
         {  
            {  (_C_1210 : (tmp_2_3 = count_0));
               (_C_1213 : (count_0 = (_C_1212 : ((_C_1211 : (count_0 -%
                                                              (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_1214 : ((tmp_2_3 :> uint64) != (0 :> uint64))) then () else 
            (goto while_0_break));
            
            {  (_C_1215 : (tmp_0_16 = tmp_0_15));
               (_C_1217 : (tmp_0_15 = (_C_1216 : (tmp_0_15 + (1 :> int32)))));
               (_C_1218 : (tmp_1_3 = s_13));
               (_C_1220 : (s_13 = (_C_1219 : (s_13 + (1 :> int32)))));
               (_C_1223 : ((_C_1222 : tmp_0_16.charM) = (_C_1221 : tmp_1_3.charM)))
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_1224 : (jessie : (count_0 ==
                                                     ((- 1) :%> uint64)))));
         ()
      };
      
      (return dest_2)
   }
}

voidP[..] memset(voidP[..] s_2, int32 c_13, uint64 count_2)
  requires ((_C_1261 : (s_2 <: charP)) &&
             (_C_1262 : \at((if (\at(0,Here) <=
                                  \at(((count_2 :> integer) - 1),Here)) then 
                            (((\offset_min(\at((s_2 :> charP[..]),Here)) <=
                                \at(0,Here)) &&
                               (\offset_max(\at((s_2 :> charP[..]),Here)) >=
                                 \at(((count_2 :> integer) - 1),Here))) &&
                              (\forall integer __framac_tmp37;
                                (((\at(0,Here) <= __framac_tmp37) &&
                                   (__framac_tmp37 <=
                                     \at(((count_2 :> integer) - 1),Here))) ==>
                                  true))) else true),Here)));
behavior default:
  assigns ((s_2 :> charP[..]) + [0..((count_2 :> integer) - 1)]).charM;
  ensures (_C_1258 : ((_C_1259 : (\forall charP[..] p_34;
                                   ((((\base_block((\at(s_2,Old) :> charP[..])) ==
                                        \base_block(p_34)) &&
                                       (((\at(s_2,Old) :> charP[..]) - p_34) <=
                                         0)) &&
                                      ((\base_block(p_34) ==
                                         \base_block(((\at(s_2,Old) :> charP[..]) +
                                                       (\at(count_2,Old) :> integer)))) &&
                                        ((p_34 -
                                           ((\at(s_2,Old) :> charP[..]) +
                                             (\at(count_2,Old) :> integer))) <
                                          0))) ==>
                                     (p_34.charM == (\at(c_13,Old) :%> int8))))) &&
                       (_C_1260 : (\result == \at(s_2,Old)))));
{  
   (var charP[..] xs);
   
   (var uint64 ocount_1);
   
   (var charP[..] tmp_0_17);
   
   (var uint64 tmp_0_18);
   
   {  (_C_1231 : (xs = (_C_1230 : (s_2 :> charP[..]))));
      (_C_1232 : (ocount_1 = count_2));
      
      loop 
      behavior default:
        invariant (_C_1243 : ((_C_1244 : ((0 :> uint64) <= count_2)) &&
                               (_C_1245 : (count_2 <= ocount_1))));
      behavior default:
        invariant (_C_1236 : (((_C_1238 : (\base_block((s_2 :> charP[..])) ==
                                            \base_block(xs))) &&
                                (_C_1239 : (((s_2 :> charP[..]) - xs) <= 0))) &&
                               ((_C_1241 : (\base_block(xs) ==
                                             \base_block(((s_2 :> charP[..]) +
                                                           (ocount_1 :> integer))))) &&
                                 (_C_1242 : ((xs -
                                               ((s_2 :> charP[..]) +
                                                 (ocount_1 :> integer))) <=
                                              0)))));
      behavior default:
        invariant (_C_1235 : ((xs - (s_2 :> charP[..])) ==
                               ((ocount_1 :> integer) - (count_2 :> integer))));
      behavior default:
        invariant (_C_1234 : (\forall charP[..] p_33;
                               ((((\base_block((s_2 :> charP[..])) ==
                                    \base_block(p_33)) &&
                                   (((s_2 :> charP[..]) - p_33) <= 0)) &&
                                  ((\base_block(p_33) == \base_block(xs)) &&
                                    ((p_33 - xs) < 0))) ==>
                                 (p_33.charM == (c_13 :%> int8)))));
      variant (_C_1233 : count_2);
      while (true)
      {  
         {  
            {  (_C_1246 : (tmp_0_18 = count_2));
               (_C_1249 : (count_2 = (_C_1248 : ((_C_1247 : (count_2 -%
                                                              (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_1250 : ((tmp_0_18 :> uint64) != (0 :> uint64))) then () else 
            (goto while_0_break));
            
            {  (_C_1251 : (tmp_0_17 = xs));
               (_C_1253 : (xs = (_C_1252 : (xs + (1 :> int32)))));
               (_C_1256 : ((_C_1255 : tmp_0_17.charM) = (_C_1254 : (c_13 :%> int8))))
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_1257 : (jessie : (count_2 ==
                                                     ((- 1) :%> uint64)))));
         ()
      };
      
      (return s_2)
   }
}

predicate kstrtobool_fmt_false{L}(charP[..] s_45) =
\at((((((s_45 + 0).charM == (78 :> int8)) ||
        ((s_45 + 0).charM == (110 :> int8))) ||
       ((s_45 + 0).charM == (48 :> int8))) ||
      ((((s_45 + 0).charM == (111 :> int8)) ||
         ((s_45 + 0).charM == (79 :> int8))) &&
        (((s_45 + 1).charM == (70 :> int8)) ||
          ((s_45 + 1).charM == (102 :> int8))))),L)

predicate kstrtobool_fmt_true{L}(charP[..] s_46) =
\at((((((s_46 + 0).charM == (89 :> int8)) ||
        ((s_46 + 0).charM == (121 :> int8))) ||
       ((s_46 + 0).charM == (49 :> int8))) ||
      ((((s_46 + 0).charM == (111 :> int8)) ||
         ((s_46 + 0).charM == (79 :> int8))) &&
        (((s_46 + 1).charM == (78 :> int8)) ||
          ((s_46 + 1).charM == (110 :> int8))))),L)

predicate kstrtobool_fmt{L}(charP[..] s_47) =
\at((kstrtobool_fmt_true{L}(s_47) || kstrtobool_fmt_false{L}(s_47)),L)

int32 kstrtobool(charP[..] s_0, _BoolP[..] res)
  requires ((_C_1313 : ((s_0 == null) ||
                         \at((((\offset_min(\at(s_0,Here)) <= \at(0,Here)) &&
                                (\offset_max(\at(s_0,Here)) >= \at(1,Here))) &&
                               (true && true)),Here))) &&
             (_C_1314 : \at((((\offset_min(\at(res,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(res,Here)) >= \at(0,Here))) &&
                              true),Here)));
behavior default:
  ensures (_C_1300 : ((_C_1301 : ((\result == (0 :> int32)) ||
                                   (\result == ((- 22) :> int32)))) &&
                       (_C_1302 : ((\result == ((- 22) :> int32)) ==>
                                    (\at(res,Old) == \at(res,Old))))));
behavior INVAL:
  assumes ((s_0 == null) || (! kstrtobool_fmt{Here}(s_0)));
  assigns \nothing;
  ensures (_C_1303 : (\result == ((- 22) :> int32)));
behavior CORRECT:
  assumes ((s_0 != null) && kstrtobool_fmt{Here}(s_0));
  assigns res._BoolM;
  ensures (_C_1304 : ((_C_1305 : (kstrtobool_fmt_true{Here}(\at(s_0,Old)) ==>
                                   (\at(res,Old)._BoolM == (1 :> _bool)))) &&
                       ((_C_1307 : (kstrtobool_fmt_false{Here}(\at(s_0,Old)) ==>
                                     (\at(res,Old)._BoolM == (0 :> _bool)))) &&
                         (_C_1308 : (\result == (0 :> int32))))));
{  
   (check (disjoint_behaviors : (! (((s_0 == null) ||
                                      (! kstrtobool_fmt{Here}(s_0))) &&
                                     ((s_0 != null) &&
                                       kstrtobool_fmt{Here}(s_0))))));
   
   (check (complete_behaviors : (((s_0 != null) && kstrtobool_fmt{Here}(s_0)) ||
                                  ((s_0 == null) ||
                                    (! kstrtobool_fmt{Here}(s_0))))));
   
   (var int32 __retres_16);
   
   {  (if (_C_1264 : (! (s_0 != null))) then 
      {  (_C_1263 : (__retres_16 = (-22 :> int32)));
         
         (goto return_label)
      } else ());
      
      switch ((_C_1298 : ((_C_1297 : (_C_1296 : (s_0 + (0 :> int32))).charM) :> int32))) {
        case (_C_1265 : (121 :> int32)):
        case (_C_1266 : (89 :> int32)):
        case (_C_1267 : (49 :> int32)):
        {  (_C_1270 : ((_C_1269 : res._BoolM) = (_C_1268 : ((1 :> int32) :> _bool))));
           (_C_1271 : (__retres_16 = (0 :> int32)));
           
           (goto return_label)
        }
        case (_C_1272 : (110 :> int32)):
        case (_C_1273 : (78 :> int32)):
        case (_C_1274 : (48 :> int32)):
        {  (_C_1277 : ((_C_1276 : res._BoolM) = (_C_1275 : ((0 :> int32) :> _bool))));
           (_C_1278 : (__retres_16 = (0 :> int32)));
           
           (goto return_label)
        }
        case (_C_1279 : (111 :> int32)):
        case (_C_1280 : (79 :> int32)):
        {  ();
           
           switch ((_C_1295 : ((_C_1294 : (_C_1293 : (s_0 + (1 :> int32))).charM) :> int32))) {
             case (_C_1281 : (110 :> int32)):
             case (_C_1282 : (78 :> int32)):
             {  (_C_1285 : ((_C_1284 : res._BoolM) = (_C_1283 : ((1 :> int32) :> _bool))));
                (_C_1286 : (__retres_16 = (0 :> int32)));
                
                (goto return_label)
             }
             case (_C_1287 : (102 :> int32)):
             case (_C_1288 : (70 :> int32)):
             {  (_C_1291 : ((_C_1290 : res._BoolM) = (_C_1289 : ((0 :> int32) :> _bool))));
                (_C_1292 : (__retres_16 = (0 :> int32)));
                
                (goto return_label)
             }
             default:
             {  ();
                
                (goto switch_1_break)
             }
           };
           (switch_1_break : ())
        }
        default:
        {  ();
           
           (goto switch_0_break)
        }
      };
      (switch_0_break : ());
      (_C_1299 : (__retres_16 = (-22 :> int32)));
      (return_label : 
      (return __retres_16))
   }
}

axiomatic IntBase {

  predicate is_hex{L}(charP[..] s_48) =
  \at(((((s_48 + 0).charM == (48 :> int8)) &&
         (tolower(((s_48 + 1).charM :> integer)) ==
           ((120 :> int8) :> integer))) &&
        isxdigit(((s_48 + 2).charM :> integer))),L)
   
  predicate is_oct{L}(charP[..] s_49) =
  \at((((s_49 + 0).charM == (48 :> int8)) && (! is_hex{L}(s_49))),L)
   
  predicate is_dec{L}(charP[..] s_50) =
  \at(((! is_hex{L}(s_50)) && (! is_oct{L}(s_50))),L)
  
}

charP[..] _parse_integer_fixup_radix(charP[..] s, unsigned_intP[..] base)
  requires ((_C_1377 : \at((((\offset_min(\at(s,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(s,Here)) >= \at(2,Here))) &&
                             (true && (true && true))),Here)) &&
             (_C_1378 : \at((((\offset_min(\at(base,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(base,Here)) >= \at(0,Here))) &&
                              true),Here)));
behavior default:
  assigns base.unsigned_intM;
  ensures (_C_1360 : ((\result == \at(s,Old)) ||
                       (\result == (\at(s,Old) + 2))));
behavior guess:
  assumes (base.unsigned_intM == (0 :> uint32));
  ensures (_C_1361 : ((_C_1362 : (is_hex{Here}(\at(s,Old)) ==>
                                   (\at(base,Old).unsigned_intM ==
                                     (16 :> uint32)))) &&
                       ((_C_1364 : (is_oct{Here}(\at(s,Old)) ==>
                                     (\at(base,Old).unsigned_intM ==
                                       (8 :> uint32)))) &&
                         ((_C_1366 : (is_dec{Here}(\at(s,Old)) ==>
                                       (\at(base,Old).unsigned_intM ==
                                         (10 :> uint32)))) &&
                           ((_C_1368 : (is_hex{Here}(\at(s,Old)) ==>
                                         (\result == (\at(s,Old) + 2)))) &&
                             (_C_1369 : ((is_oct{Here}(\at(s,Old)) ||
                                           is_dec{Here}(\at(s,Old))) ==>
                                          (\result == \at(s,Old)))))))));
behavior shift:
  assumes (((base.unsigned_intM == (16 :> uint32)) &&
             ((s + 0).charM == (48 :> int8))) &&
            (tolower(((s + 1).charM :> integer)) ==
              ((120 :> int8) :> integer)));
  ensures (_C_1370 : (\result == (\at(s,Old) + 2)));
{  
   (var int8 tmp_0_19);
   
   (var _bool tmp_0_20);
   
   (var int8 tmp_1_4);
   
   {  (if (_C_1344 : ((_C_1343 : base.unsigned_intM) ==
                       (_C_1342 : ((0 :> int32) :> uint32)))) then (if 
                                                                   (_C_1341 : 
                                                                   ((_C_1340 : (
                                                                    (_C_1339 : 
                                                                    (_C_1338 : 
                                                                    (s +
                                                                    (0 :> int32))).charM) :> int32)) ==
                                                                    (48 :> int32))) then 
                                                                   {  (_C_1321 : (tmp_0_19 = 
                                                                    (_C_1320 : _tolower(
                                                                    (_C_1319 : 
                                                                    (_C_1318 : 
                                                                    (s +
                                                                    (1 :> int32))).charM)))));
                                                                    (if 
                                                                    (_C_1337 : 
                                                                    ((_C_1336 : (tmp_0_19 :> int32)) ==
                                                                    (120 :> int32))) then 
                                                                    {
                                                                      (_C_1328 : (tmp_0_20 = 
                                                                    (_C_1327 : isxdigit(
                                                                    (_C_1326 : 
                                                                    (_C_1325 : 
                                                                    (s +
                                                                    (2 :> int32))).charM)))));
                                                                    (if 
                                                                    (_C_1335 : 
                                                                    ((tmp_0_20 :> _bool) !=
                                                                    (0 :> _bool))) then 
                                                                    (_C_1334 : (
                                                                    (_C_1333 : base.unsigned_intM) = 
                                                                    (_C_1332 : ((16 :> int32) :> uint32)))) else 
                                                                    (_C_1331 : (
                                                                    (_C_1330 : base.unsigned_intM) = 
                                                                    (_C_1329 : ((8 :> int32) :> uint32)))))
                                                                    } else 
                                                                    (_C_1324 : (
                                                                    (_C_1323 : base.unsigned_intM) = 
                                                                    (_C_1322 : ((8 :> int32) :> uint32)))))
                                                                   } else 
                                                                   (_C_1317 : (
                                                                   (_C_1316 : base.unsigned_intM) = 
                                                                   (_C_1315 : ((10 :> int32) :> uint32))))) else ());
      (if (_C_1359 : ((_C_1358 : base.unsigned_intM) ==
                       (_C_1357 : ((16 :> int32) :> uint32)))) then (if 
                                                                    (_C_1356 : 
                                                                    ((_C_1355 : (
                                                                    (_C_1354 : 
                                                                    (_C_1353 : 
                                                                    (s +
                                                                    (0 :> int32))).charM) :> int32)) ==
                                                                    (48 :> int32))) then 
                                                                    {
                                                                      (_C_1348 : (tmp_1_4 = 
                                                                    (_C_1347 : _tolower(
                                                                    (_C_1346 : 
                                                                    (_C_1345 : 
                                                                    (s +
                                                                    (1 :> int32))).charM)))));
                                                                    (if 
                                                                    (_C_1352 : 
                                                                    ((_C_1351 : (tmp_1_4 :> int32)) ==
                                                                    (120 :> int32))) then 
                                                                    (_C_1350 : (s = 
                                                                    (_C_1349 : 
                                                                    (s +
                                                                    (2 :> int32))))) else ())
                                                                    } else ()) else ());
      
      (return s)
   }
}
