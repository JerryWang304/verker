
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

theory Enum__bool_aux

  use why3.Bool.Bool 
  
  function max  : int = (1)
  
  function min  : int = (0)
  
end

theory Enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool_aux 
  
  clone export enum.Enum with constant min = min, constant max = max
  
end

module Unsafe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root_unsigned_intP_safe

  use why3.Bool.Bool 
  
end

module Root_unsigned_intP_unsafe

  use why3.Bool.Bool 
  
end

module Root_char_xP_safe

  use why3.Bool.Bool 
  
end

module Root_char_xP_unsafe

  use why3.Bool.Bool 
  
end

module Root__BoolP_safe

  use why3.Bool.Bool 
  
end

module Root__BoolP_unsafe

  use why3.Bool.Bool 
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_switch_0_break_exc unit
  
  exception Goto_switch_1_break_exc unit
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_memcpy_safety
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
"expl:memcpy, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memcpy
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
  "expl:Function memcpy, safety" =
  fun
   (dest_2 : (pointer voidP)) (src_0 : (pointer voidP)) (count_0 : Uint64.t)
   (charP_charM_dest_2_74 : ref (memory voidP Int8.t))
   (voidP_dest_2_74_alloc_table : (alloc_table voidP))
   (voidP_src_0_75_alloc_table : (alloc_table voidP))
   (voidP_src_0_75_tag_table : (tag_table voidP)) (voidP_dest_2_74_tag_table
   : (tag_table voidP)) (charP_charM_src_0_75 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_0_75_alloc_table src_0) ->
     ((instanceof voidP_src_0_75_tag_table src_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_0_75_alloc_table src_0) i) /\
       ((<) i (offset_max voidP_src_0_75_alloc_table src_0))) ->
       (instanceof voidP_src_0_75_tag_table (shift src_0 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_2_74_alloc_table dest_2) ->
     ((instanceof voidP_dest_2_74_tag_table dest_2 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_2_74_alloc_table dest_2) i) /\
       ((<) i (offset_max voidP_dest_2_74_alloc_table dest_2))) ->
       (instanceof voidP_dest_2_74_tag_table (shift dest_2 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 16 13 42#
    (instanceof voidP_src_0_75_tag_table src_0 charP_tag))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 17 13 43#
    (instanceof voidP_dest_2_74_tag_table dest_2 charP_tag))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
     (((<=)
      (offset_min voidP_src_0_75_alloc_table
      (downcast voidP_src_0_75_tag_table src_0 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_src_0_75_alloc_table
      (downcast voidP_src_0_75_tag_table src_0 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_0) (1)))
     /\
     (forall __framac_tmp33 : int.
      ((((<=) (0) __framac_tmp33) /\
       ((<=) __framac_tmp33 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcpy.h" 19 13 46#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
    (((<=)
     (offset_min voidP_dest_2_74_alloc_table
     (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_dest_2_74_alloc_table
     (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_0) (1)))
    /\
    (forall __framac_tmp34 : int.
     ((((<=) (0) __framac_tmp34) /\
      ((<=) __framac_tmp34 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_0 = ref count_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_15 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13_0 = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_0 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_16 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_3 = ref (Safe_bit_uint64.any_  () ) in
    try
     begin
     (tmp_0_15 :=
      (let _jessie_924 =
      (#"/home/work/workspace/self/verker-gh/memcpy.c" 5 13 17#
      (downcast_  voidP_dest_2_74_tag_table dest_2 (charP_tag  ) )) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/memcpy.c" 5 1 5#
      "expl:Pointer index bounds" true) }); _jessie_924 end));
      begin
      (s_13_0 :=
       (let _jessie_923 =
       (#"/home/work/workspace/self/verker-gh/memcpy.c" 6 17 20#
       (downcast_  voidP_src_0_75_tag_table src_0 (charP_tag  ) )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/memcpy.c" 6 1 6#
       "expl:Pointer index bounds" true) }); _jessie_923 end));
       begin
       (ocount_0 :=
        (let _jessie_911 = !mutable_count_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memcpy.c" 7 11 17#
        "expl:Pointer index bounds" true) }); _jessie_911 end));
        'Loop_84:
        loop
        invariant { (#"whole_program.jc" 4860 6 3476# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 15 18 23#
            (Bit_uint64.to_int
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 15 18 23#
            !mutable_count_0))) }
         begin
         any unit
         requires { true } reads { charP_charM_dest_2_74, dest_2,
         mutable_count_0, src_0 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memcpy.c" 13 20 124#
            (forall i_62 : int.
             ((((<=) (0) i_62) /\
              ((<) i_62
              (Int.(-) (Bit_uint64.to_int !ocount_0)
              (Bit_uint64.to_int !mutable_count_0)))) ->
              (Int8.(=)
              (select !charP_charM_dest_2_74
              (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
              i_62))
              (select charP_charM_src_0_75
              (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
              i_62))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 59#
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 59#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 41#
             ((=)
             (sub_pointer !tmp_0_15
             (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
             (sub_pointer !s_13_0
             (downcast voidP_src_0_75_tag_table src_0 charP_tag))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 12 34 59#
            ((=)
            (sub_pointer !s_13_0
            (downcast voidP_src_0_75_tag_table src_0 charP_tag))
            (Int.(-) (Bit_uint64.to_int !ocount_0)
            (Bit_uint64.to_int !mutable_count_0)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 36#
             (same_block (downcast voidP_src_0_75_tag_table src_0 charP_tag)
             !s_13_0))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 36#
             ((<=)
             (sub_pointer (downcast voidP_src_0_75_tag_table src_0 charP_tag)
             !s_13_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 35 60#
             (same_block !s_13_0
             (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
             (Bit_uint64.to_int !ocount_0))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 35 60#
            ((<=)
            (sub_pointer !s_13_0
            (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
            (Bit_uint64.to_int !ocount_0))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 39#
             (same_block
             (downcast voidP_dest_2_74_tag_table dest_2 charP_tag) !tmp_0_15))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 39#
             ((<=)
             (sub_pointer
             (downcast voidP_dest_2_74_tag_table dest_2 charP_tag) !tmp_0_15)
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 36 64#
             (same_block !tmp_0_15
             (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
             (Bit_uint64.to_int !ocount_0))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 36 64#
            ((<=)
            (sub_pointer !tmp_0_15
            (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
            (Bit_uint64.to_int !ocount_0))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 40#
           (#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 40#
           ((#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 30#
            (Bit_uint64.(<=) (#"whole_program.jc" 4862 42 55#
            "expl:Integer cast" (Bit_uint64.of_int_const 0))
            !mutable_count_0))
           /\
           (#"/home/work/workspace/self/verker-gh/memcpy.c" 9 25 40#
           (Bit_uint64.(<=) !mutable_count_0 !ocount_0))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_2_3 :=
            (let _jessie_912 = !mutable_count_0 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 17 8 19#
            "expl:Pointer index bounds" true) }); _jessie_912 end));
            begin
            (mutable_count_0 :=
             (let _jessie_913 =
             (Safe_bit_uint64.(-%)  !mutable_count_0
              (#"whole_program.jc" 4909 62 75# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 1)) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memcpy.c" 17 8 19#
             "expl:Pointer index bounds" true) }); _jessie_913 end)); () end
           end;
            (if
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 17 8 19#
            (Safe_bit_uint64.(<>)  !tmp_2_3
             (#"whole_program.jc" 4912 51 64# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            (tmp_0_16 :=
             (let _jessie_914 = !tmp_0_15 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 3 8#
             "expl:Pointer index bounds" true) }); _jessie_914 end));
             begin
             (tmp_0_15 :=
              (let _jessie_915 =
              (shift_typesafe  !tmp_0_15
               (Safe_int32.to_int 
                (#"whole_program.jc" 4916 61 73# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 3 8#
              "expl:Pointer index bounds" true) }); _jessie_915 end));
              begin
              (tmp_1_3 :=
               (let _jessie_916 = !s_13_0 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 12 15#
               "expl:Pointer index bounds" true) }); _jessie_916 end));
               begin
               (s_13_0 :=
                (let _jessie_917 =
                (shift_typesafe  !s_13_0
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 4918 53 65# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 12 15#
                "expl:Pointer index bounds" true) }); _jessie_917 end));
                (let _jessie_919 =
                (let _jessie_918 =
                (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 11 15#
                "expl:Pointer dereference"
                (acc  voidP_src_0_75_alloc_table charP_charM_src_0_75
                 !tmp_1_3 )) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 2 15#
                "expl:Pointer index bounds" true) }); _jessie_918 end) in
                (let _jessie_920 = !tmp_0_16 in
                (let _jessie_921 = (0) in
                (let _jessie_922 = _jessie_920 in
                (#"/home/work/workspace/self/verker-gh/memcpy.c" 18 2 15#
                "expl:Pointer dereference"
                (upd  voidP_dest_2_74_alloc_table charP_charM_dest_2_74
                 _jessie_920 _jessie_919 )))))) end end end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_85 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end end with Goto_while_0_break_exc _jessie_83 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      any unit
      requires { true } reads { mutable_count_0 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/memcpy.c" 19 12 35#
        (Bit_uint64.(=) !mutable_count_0 (#"whole_program.jc" 4927 53 71#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
       () end;
      begin
      (return :=
       (let _jessie_925 = dest_2 in
       begin
       (assert {
       (#"whole_program.jc" 4931 7 20# "expl:Pointer index bounds" true) });
        _jessie_925 end)); (raise Return) end end end)))))); absurd  end with
    Return -> !return end))
  
end

module Function_memcpy_behaviors
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
"expl:memcpy, behaviors"

  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memcpy_ensures_default
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
  "expl:Function memcpy, default behavior" =
  fun
   (dest_2 : (pointer voidP)) (src_0 : (pointer voidP)) (count_0 : Uint64.t)
   (charP_charM_dest_2_74 : ref (memory voidP Int8.t))
   (voidP_dest_2_74_alloc_table : (alloc_table voidP))
   (voidP_src_0_75_alloc_table : (alloc_table voidP))
   (voidP_src_0_75_tag_table : (tag_table voidP)) (voidP_dest_2_74_tag_table
   : (tag_table voidP)) (charP_charM_src_0_75 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_0_75_alloc_table src_0) ->
     ((instanceof voidP_src_0_75_tag_table src_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_0_75_alloc_table src_0) i) /\
       ((<) i (offset_max voidP_src_0_75_alloc_table src_0))) ->
       (instanceof voidP_src_0_75_tag_table (shift src_0 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_2_74_alloc_table dest_2) ->
     ((instanceof voidP_dest_2_74_tag_table dest_2 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_2_74_alloc_table dest_2) i) /\
       ((<) i (offset_max voidP_dest_2_74_alloc_table dest_2))) ->
       (instanceof voidP_dest_2_74_tag_table (shift dest_2 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 16 13 42#
    (instanceof voidP_src_0_75_tag_table src_0 charP_tag))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 17 13 43#
    (instanceof voidP_dest_2_74_tag_table dest_2 charP_tag))
   /\
   (#"whole_program.jc" 4812 12 1638#
   ((#"/home/work/workspace/self/verker-gh/memcpy.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
     (((<=)
      (offset_min voidP_src_0_75_alloc_table
      (downcast voidP_src_0_75_tag_table src_0 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_src_0_75_alloc_table
      (downcast voidP_src_0_75_tag_table src_0 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_0) (1)))
     /\
     (forall __framac_tmp33 : int.
      ((((<=) (0) __framac_tmp33) /\
       ((<=) __framac_tmp33 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcpy.h" 19 13 46#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
    (((<=)
     (offset_min voidP_dest_2_74_alloc_table
     (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_dest_2_74_alloc_table
     (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_0) (1)))
    /\
    (forall __framac_tmp34 : int.
     ((((<=) (0) __framac_tmp34) /\
      ((<=) __framac_tmp34 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 4837 10 73# "expl:Assigns clause"
      (not_assigns voidP_dest_2_74_alloc_table voidP_dest_2_74_alloc_table
      (old !charP_charM_dest_2_74) !charP_charM_dest_2_74
      (pset_range
      (pset_singleton (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
      (0) (Int.(-) (Bit_uint64.to_int count_0) (1)))))
     /\
     (#"/home/work/workspace/self/verker-gh/memcpy.h" 21 12 99#
     "expl:Ensures clause"
     (forall i_63 : int.
      ((((<=) (0) i_63) /\ ((<) i_63 (Bit_uint64.to_int count_0))) ->
       (Int8.(=)
       (select !charP_charM_dest_2_74
       (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag) i_63))
       (select charP_charM_src_0_75
       (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag) i_63))))))))
     } diverges  ->
   (let mutable_count_0 = ref count_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_15 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13_0 = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_0 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_16 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_3 = ref (Unsafe_bit_uint64.any_  () ) in
    try
     begin
     (tmp_0_15 :=
      (downcast_  voidP_dest_2_74_tag_table dest_2 (charP_tag  ) ));
      begin
      (s_13_0 := (downcast_  voidP_src_0_75_tag_table src_0 (charP_tag  ) ));
       begin
       (ocount_0 := !mutable_count_0);
        'Loop_83:
        loop
        invariant
          { (((#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 40#
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 40#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 9 20 30#
               (Bit_uint64.(<=) (#"whole_program.jc" 4862 42 55#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_0))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 9 25 40#
              (Bit_uint64.(<=) !mutable_count_0 !ocount_0)))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 39#
               (same_block
               (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               !tmp_0_15))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 39#
               ((<=)
               (sub_pointer
               (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               !tmp_0_15) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 10 36 64#
               (same_block !tmp_0_15
               (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               (Bit_uint64.to_int !ocount_0))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 10 36 64#
              ((<=)
              (sub_pointer !tmp_0_15
              (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
              (Bit_uint64.to_int !ocount_0))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 36#
               (same_block
               (downcast voidP_src_0_75_tag_table src_0 charP_tag) !s_13_0))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 36#
               ((<=)
               (sub_pointer
               (downcast voidP_src_0_75_tag_table src_0 charP_tag) !s_13_0)
               (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 11 35 60#
               (same_block !s_13_0
               (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
               (Bit_uint64.to_int !ocount_0))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 11 35 60#
              ((<=)
              (sub_pointer !s_13_0
              (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
              (Bit_uint64.to_int !ocount_0))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 59#
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 59#
              ((#"/home/work/workspace/self/verker-gh/memcpy.c" 12 20 41#
               ((=)
               (sub_pointer !tmp_0_15
               (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
               (sub_pointer !s_13_0
               (downcast voidP_src_0_75_tag_table src_0 charP_tag))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcpy.c" 12 34 59#
              ((=)
              (sub_pointer !s_13_0
              (downcast voidP_src_0_75_tag_table src_0 charP_tag))
              (Int.(-) (Bit_uint64.to_int !ocount_0)
              (Bit_uint64.to_int !mutable_count_0)))))))
             &&
             (#"/home/work/workspace/self/verker-gh/memcpy.c" 13 20 124#
             (forall i_62 : int.
              ((((<=) (0) i_62) /\
               ((<) i_62
               (Int.(-) (Bit_uint64.to_int !ocount_0)
               (Bit_uint64.to_int !mutable_count_0)))) ->
               (Int8.(=)
               (select !charP_charM_dest_2_74
               (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               i_62))
               (select charP_charM_src_0_75
               (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
               i_62))))))))))
            /\
            (#"whole_program.jc" 4837 10 73# "expl:Assigns clause"
            (not_assigns voidP_dest_2_74_alloc_table
            voidP_dest_2_74_alloc_table (at !charP_charM_dest_2_74 'Init)
            !charP_charM_dest_2_74
            (pset_range
            (pset_singleton
            (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0)
            (Int.(-) (Bit_uint64.to_int (at !mutable_count_0 'Init)) (1)))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           (tmp_2_3 := !mutable_count_0);
            begin
            (mutable_count_0 :=
             (Unsafe_bit_uint64.(-%)  !mutable_count_0
              (#"whole_program.jc" 4909 62 75# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/memcpy.c" 17 8 19#
            (Unsafe_bit_uint64.(<>)  !tmp_2_3
             (#"whole_program.jc" 4912 51 64# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            (tmp_0_16 := !tmp_0_15);
             begin
             (tmp_0_15 :=
              (shift_  !tmp_0_15
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 4916 61 73# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              begin
              (tmp_1_3 := !s_13_0);
               begin
               (s_13_0 :=
                (shift_  !s_13_0
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 4918 53 65# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (let _jessie_904 = (acc  charP_charM_src_0_75 !tmp_1_3 ) in
                (let _jessie_905 = !tmp_0_16 in
                (let _jessie_906 = (0) in
                (let _jessie_907 = _jessie_905 in
                (upd  charP_charM_dest_2_74 _jessie_907 _jessie_904 ))))) end
              end end end end; (raise (Loop_continue_exc ())) end with
           Loop_continue_exc _jessie_85 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end end end with
     Goto_while_0_break_exc _jessie_83 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/memcpy.c" 19 12 35#
      "expl:Assertion in line 19"
      (Bit_uint64.(=) !mutable_count_0 (#"whole_program.jc" 4927 53 71#
      "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
      end; begin (return := dest_2); (raise Return) end end end)))))); 
     absurd  end with Return -> !return end))
  
end

module Function_memmove_safety
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
"expl:memmove, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, safety" =
  fun
   (dest_5 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_5_71 : ref (memory voidP Int8.t))
   (voidP_dest_5_71_alloc_table : (alloc_table voidP))
   (voidP_dest_5_71_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_5_71_alloc_table src_3) ->
     ((instanceof voidP_dest_5_71_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table src_3))) ->
       (instanceof voidP_dest_5_71_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_5_71_alloc_table dest_5) ->
     ((instanceof voidP_dest_5_71_tag_table dest_5 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table dest_5) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table dest_5))) ->
       (instanceof voidP_dest_5_71_tag_table (shift dest_5 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 15 13 43#
    (instanceof voidP_dest_5_71_tag_table dest_5 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 16 13 42#
    (instanceof voidP_dest_5_71_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp31 : int.
      ((((<=) (0) __framac_tmp31) /\
       ((<=) __framac_tmp31 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp32 : int.
      ((((<=) (0) __framac_tmp32) /\
       ((<=) __framac_tmp32 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memmove.h" 19 13 100#
   (((same_block dest_5 src_3) /\ (not (not (same_block dest_5 src_3)))) \/
   ((not (same_block dest_5 src_3)) /\ (not (same_block dest_5 src_3)))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_3_0 = ref (Safe_bit_uint64.any_  () ) in
    begin
    (orig_count :=
     (let _jessie_868 = !mutable_count_1 in
     begin
     (assert {
     (#"/home/work/workspace/self/verker-gh/memmove.c" 5 11 17#
     "expl:Pointer index bounds" true) }); _jessie_868 end));
     (if
     (#"/home/work/workspace/self/verker-gh/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 4623 23 37# (sub_pointer_  dest_5 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_13 :=
        (let _jessie_894 =
        (#"/home/work/workspace/self/verker-gh/memmove.c" 10 8 12#
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memmove.c" 10 2 12#
        "expl:Pointer index bounds" true) }); _jessie_894 end));
        begin
        (s_12_1 :=
         (let _jessie_882 =
         (#"/home/work/workspace/self/verker-gh/memmove.c" 11 6 9#
         (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/memmove.c" 11 2 9#
         "expl:Pointer index bounds" true) }); _jessie_882 end));
         'Loop_82:
         loop
         invariant { (#"whole_program.jc" 4627 9 5209# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/memmove.c" 18 19 24#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker-gh/memmove.c" 18 19 24#
             !mutable_count_1))) }
          begin
          any unit
          requires { true } reads { charP_charM_dest_5_71, dest_5,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 17 21 119#
             (forall i_57 : int.
              ((((<=) (0) i_57) /\
               ((<) i_57
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               i_57))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_57))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 16 21 127#
             (forall i_56 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_56)
               /\ ((<) i_56 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
              (same_block !s_12_1
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_12_1
             (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
              (same_block !tmp_0_13
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_13
             (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_13
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_12_1
             (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 4629 45 58#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_2 :=
             (let _jessie_883 = !mutable_count_1 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
             "expl:Pointer index bounds" true) }); _jessie_883 end));
             begin
             (mutable_count_1 :=
              (let _jessie_884 =
              (Safe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 4686 65 78# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
              "expl:Pointer index bounds" true) }); _jessie_884 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
             (Safe_bit_uint64.(<>)  !tmp_2_2
              (#"whole_program.jc" 4689 54 67# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0_14 :=
              (let _jessie_885 = !tmp_0_13 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memmove.c" 20 4 9#
              "expl:Pointer index bounds" true) }); _jessie_885 end));
              begin
              (tmp_0_13 :=
               (let _jessie_886 =
               (shift_typesafe  !tmp_0_13
                (Safe_int32.to_int 
                 (#"whole_program.jc" 4695 57 69# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memmove.c" 20 4 9#
               "expl:Pointer index bounds" true) }); _jessie_886 end));
               begin
               (tmp_1_2 :=
                (let _jessie_887 = !s_12_1 in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 20 13 16#
                "expl:Pointer index bounds" true) }); _jessie_887 end));
                begin
                (s_12_1 :=
                 (let _jessie_888 =
                 (shift_typesafe  !s_12_1
                  (Safe_int32.to_int 
                   (#"whole_program.jc" 4697 59 71# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 20 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_888 end));
                 (let _jessie_890 =
                 (let _jessie_889 =
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 20 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_5_71_alloc_table !charP_charM_dest_5_71
                  !tmp_1_2 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 20 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_889 end) in
                 (let _jessie_891 = !tmp_0_14 in
                 (let _jessie_892 = (0) in
                 (let _jessie_893 = _jessie_891 in
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 20 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_5_71_alloc_table charP_charM_dest_5_71
                  _jessie_891 _jessie_890 )))))) end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_5_71, dest_5,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_80 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_77 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp_0_13 :=
        (let _jessie_881 =
        (#"/home/work/workspace/self/verker-gh/memmove.c" 24 8 12#
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memmove.c" 24 2 12#
        "expl:Pointer index bounds" true) }); _jessie_881 end));
        begin
        (tmp_0_13 :=
         (let _jessie_880 =
         (shift_typesafe  !tmp_0_13
          (Safe_bit_uint64.to_int  !mutable_count_1 ) ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/memmove.c" 25 2 14#
         "expl:Pointer index bounds" true) }); _jessie_880 end));
         begin
         (s_12_1 :=
          (let _jessie_879 =
          (#"/home/work/workspace/self/verker-gh/memmove.c" 26 6 9#
          (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/memmove.c" 26 2 9#
          "expl:Pointer index bounds" true) }); _jessie_879 end));
          begin
          (s_12_1 :=
           (let _jessie_869 =
           (shift_typesafe  !s_12_1
            (Safe_bit_uint64.to_int  !mutable_count_1 ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/memmove.c" 27 2 12#
           "expl:Pointer index bounds" true) }); _jessie_869 end));
           'Loop_81:
           loop
           invariant { (#"whole_program.jc" 4722 9 4396# true) }
             variant {
               (#"/home/work/workspace/self/verker-gh/memmove.c" 34 19 24#
               (Bit_uint64.to_int
               (#"/home/work/workspace/self/verker-gh/memmove.c" 34 19 24#
               !mutable_count_1))) }
            begin
            any unit
            requires { true } reads { charP_charM_dest_5_71, dest_5,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 33 21 115#
               (forall i_59 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_59) /\
                 ((<) i_59 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                 i_59))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_59))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 32 21 105#
               (forall i_58 : int.
                ((((<=) (0) i_58) /\
                 ((<) i_58 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
                (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
                (same_block !s_12_1
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_12_1
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
                (same_block !tmp_0_13
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_13
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_13
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_12_1
               (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 4724 45 58#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3_0 :=
               (let _jessie_870 = !mutable_count_1 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
               "expl:Pointer index bounds" true) }); _jessie_870 end));
               begin
               (mutable_count_1 :=
                (let _jessie_871 =
                (Safe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 4775 65 78# "expl:Integer cast"
                 (Safe_bit_uint64.of_int_const 1)) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
                "expl:Pointer index bounds" true) }); _jessie_871 end)); ()
               end end;
               (if
               (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
               (Safe_bit_uint64.(<>)  !tmp_3_0
                (#"whole_program.jc" 4778 54 67# "expl:Integer cast"
                (Safe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp_0_13 :=
                (let _jessie_872 =
                (shift_typesafe  !tmp_0_13
                 (Int.(-_) 
                  (Safe_int32.to_int 
                   (#"whole_program.jc" 4783 57 69# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 36 4 9#
                "expl:Pointer index bounds" true) }); _jessie_872 end));
                begin
                (s_12_1 :=
                 (let _jessie_873 =
                 (shift_typesafe  !s_12_1
                  (Int.(-_) 
                   (Safe_int32.to_int 
                    (#"whole_program.jc" 4784 59 71# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 36 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_873 end));
                 (let _jessie_875 =
                 (let _jessie_874 =
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 36 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_5_71_alloc_table !charP_charM_dest_5_71
                  !s_12_1 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 36 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_874 end) in
                 (let _jessie_876 = !tmp_0_13 in
                 (let _jessie_877 = (0) in
                 (let _jessie_878 = _jessie_876 in
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 36 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_5_71_alloc_table charP_charM_dest_5_71
                  _jessie_876 _jessie_875 )))))) end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_5_71, dest_5,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker-gh/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_5_71
                  (shift
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_5_71
                  (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_82 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_78 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker-gh/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 4803 53 71#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end;
     begin
     (return :=
      (let _jessie_895 = dest_5 in
      begin
      (assert {
      (#"whole_program.jc" 4807 7 20# "expl:Pointer index bounds" true) });
       _jessie_895 end)); (raise Return) end end))))))); absurd  end with
    Return -> !return end))
  
end

module Function_memmove_behaviors
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
"expl:memmove, behaviors"

  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove_ensures_default
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, default behavior" =
  fun
   (dest_5 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_5_71 : ref (memory voidP Int8.t))
   (voidP_dest_5_71_alloc_table : (alloc_table voidP))
   (voidP_dest_5_71_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_5_71_alloc_table src_3) ->
     ((instanceof voidP_dest_5_71_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table src_3))) ->
       (instanceof voidP_dest_5_71_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_5_71_alloc_table dest_5) ->
     ((instanceof voidP_dest_5_71_tag_table dest_5 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table dest_5) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table dest_5))) ->
       (instanceof voidP_dest_5_71_tag_table (shift dest_5 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 15 13 43#
    (instanceof voidP_dest_5_71_tag_table dest_5 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 16 13 42#
    (instanceof voidP_dest_5_71_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp31 : int.
      ((((<=) (0) __framac_tmp31) /\
       ((<=) __framac_tmp31 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp32 : int.
      ((((<=) (0) __framac_tmp32) /\
       ((<=) __framac_tmp32 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memmove.h" 19 13 100#
   (((same_block dest_5 src_3) /\ (not (not (same_block dest_5 src_3)))) \/
   ((not (same_block dest_5 src_3)) /\ (not (same_block dest_5 src_3)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"whole_program.jc" 4591 10 73# "expl:Assigns clause"
     (not_assigns voidP_dest_5_71_alloc_table voidP_dest_5_71_alloc_table
     (old !charP_charM_dest_5_71) !charP_charM_dest_5_71
     (pset_range
     (pset_singleton (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
     (0) (Int.(-) (Bit_uint64.to_int count_1) (1)))))) } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3_0 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker-gh/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 4623 23 37# (sub_pointer_  dest_5 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (s_12_1 :=
         (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
         'Loop_76:
         loop
         invariant
           { (((#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 31#
                (Bit_uint64.(<=) (#"whole_program.jc" 4629 45 58#
                "expl:Integer cast" (Bit_uint64.of_int_const 0))
                !mutable_count_1))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 12 26 45#
               (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))
              &&
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 53#
                ((=)
                (sub_pointer !tmp_0_13
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 13 35 64#
               ((=)
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1))
               (sub_pointer !s_12_1
               (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
              &&
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
                (same_block
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
                (same_block !tmp_0_13
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
               ((<=)
               (sub_pointer !tmp_0_13
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
                (same_block
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
                (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
                (same_block !s_12_1
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
               ((<=)
               (sub_pointer !s_12_1
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 16 21 127#
               (forall i_56 : int.
                ((((<=)
                  (Int.(-) (Bit_uint64.to_int !orig_count)
                  (Bit_uint64.to_int !mutable_count_1)) i_56)
                 /\ ((<) i_56 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_56))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_56))))))
              &&
              (#"/home/work/workspace/self/verker-gh/memmove.c" 17 21 119#
              (forall i_57 : int.
               ((((<=) (0) i_57) /\
                ((<) i_57
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)))) ->
                (Int8.(=)
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                i_57))
                (select (at !charP_charM_dest_5_71 'Init)
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                i_57)))))))))))
             /\
             (#"whole_program.jc" 4591 10 73# "expl:Assigns clause"
             (not_assigns voidP_dest_5_71_alloc_table
             voidP_dest_5_71_alloc_table (at !charP_charM_dest_5_71 'Init)
             !charP_charM_dest_5_71
             (pset_range
             (pset_singleton
             (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0)
             (Int.(-) (Bit_uint64.to_int (at !mutable_count_1 'Init)) (1)))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_2_2 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 4686 65 78# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_2
              (#"whole_program.jc" 4689 54 67# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0_14 := !tmp_0_13);
              begin
              (tmp_0_13 :=
               (shift_  !tmp_0_13
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 4695 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_2 := !s_12_1);
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4697 59 71# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_806 = (acc  !charP_charM_dest_5_71 !tmp_1_2 )
                 in
                 (let _jessie_807 = !tmp_0_14 in
                 (let _jessie_808 = (0) in
                 (let _jessie_809 = _jessie_807 in
                 (upd  charP_charM_dest_5_71 _jessie_809 _jessie_806 )))))
                end end end end;
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memmove.c" 21 14 93#
              "expl:Assertion in line 21"
              (Int8.(=)
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1)) (1))))
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1)) (1)))))) }); () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_80 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_77 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (tmp_0_13 :=
         (shift_  !tmp_0_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_12_1 :=
          (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
          begin
          (s_12_1 :=
           (shift_  !s_12_1 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_75:
           loop
           invariant
             { (((#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 31#
                  (Bit_uint64.(<=) (#"whole_program.jc" 4724 45 58#
                  "expl:Integer cast" (Bit_uint64.of_int_const 0))
                  !mutable_count_1))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 28 26 45#
                 (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))
                &&
                ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 40#
                  ((=)
                  (sub_pointer !tmp_0_13
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
                  (Bit_uint64.to_int !mutable_count_1)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 29 35 51#
                 ((=) (Bit_uint64.to_int !mutable_count_1)
                 (sub_pointer !s_12_1
                 (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
                &&
                ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                  (same_block
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  !tmp_0_13))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  !tmp_0_13) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
                  (same_block !tmp_0_13
                  (shift
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
                 ((<=)
                 (sub_pointer !tmp_0_13
                 (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                  (same_block
                  (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  !s_12_1))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  !s_12_1) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
                  (same_block !s_12_1
                  (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
                 ((<=)
                 (sub_pointer !s_12_1
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker-gh/memmove.c" 32 21 105#
                 (forall i_58 : int.
                  ((((<=) (0) i_58) /\
                   ((<) i_58 (Bit_uint64.to_int !mutable_count_1))) ->
                   (Int8.(=)
                   (select !charP_charM_dest_5_71
                   (shift
                   (downcast voidP_dest_5_71_tag_table src_3 charP_tag) i_58))
                   (select (at !charP_charM_dest_5_71 'Init)
                   (shift
                   (downcast voidP_dest_5_71_tag_table src_3 charP_tag) i_58))))))
                &&
                (#"/home/work/workspace/self/verker-gh/memmove.c" 33 21 115#
                (forall i_59 : int.
                 ((((<=) (Bit_uint64.to_int !mutable_count_1) i_59) /\
                  ((<) i_59 (Bit_uint64.to_int !orig_count))) ->
                  (Int8.(=)
                  (select !charP_charM_dest_5_71
                  (shift
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag) i_59))
                  (select (at !charP_charM_dest_5_71 'Init)
                  (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  i_59)))))))))))
               /\
               (#"whole_program.jc" 4591 10 73# "expl:Assigns clause"
               (not_assigns voidP_dest_5_71_alloc_table
               voidP_dest_5_71_alloc_table (at !charP_charM_dest_5_71 'Init)
               !charP_charM_dest_5_71
               (pset_range
               (pset_singleton
               (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0)
               (Int.(-) (Bit_uint64.to_int (at !mutable_count_1 'Init)) (1)))))) }
             
            begin
            any unit requires { true } ensures { true } ;
             try
              begin
              begin
              begin
              (tmp_3_0 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 4775 65 78# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3_0
                (#"whole_program.jc" 4778 54 67# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp_0_13 :=
                (shift_  !tmp_0_13
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4783 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 4784 59 71# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_791 = (acc  !charP_charM_dest_5_71 !s_12_1 ) in
                 (let _jessie_792 = !tmp_0_13 in
                 (let _jessie_793 = (0) in
                 (let _jessie_794 = _jessie_792 in
                 (upd  charP_charM_dest_5_71 _jessie_794 _jessie_791 )))))
                end end;
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 37 14 59#
                "expl:Assertion in line 37"
                (Int8.(=)
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Bit_uint64.to_int !mutable_count_1)))
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !mutable_count_1))))) }); () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_82 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_78 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     (assert {
     (#"/home/work/workspace/self/verker-gh/memmove.c" 40 12 35#
     "expl:Assertion in line 40"
     (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 4803 53 71#
     "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
     end; begin (return := dest_5); (raise Return) end end))))))); absurd 
    end with Return -> !return end))
  
  let memmove_ensures_diff_addr
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, behavior diff_addr" =
  fun
   (dest_5 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_5_71 : ref (memory voidP Int8.t))
   (voidP_dest_5_71_alloc_table : (alloc_table voidP))
   (voidP_dest_5_71_tag_table : (tag_table voidP)) 
   requires {
   ((not (same_block dest_5 src_3)) /\
   (((allocated voidP_dest_5_71_alloc_table src_3) ->
     ((instanceof voidP_dest_5_71_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table src_3))) ->
       (instanceof voidP_dest_5_71_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_5_71_alloc_table dest_5) ->
     ((instanceof voidP_dest_5_71_tag_table dest_5 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table dest_5) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table dest_5))) ->
       (instanceof voidP_dest_5_71_tag_table (shift dest_5 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 15 13 43#
    (instanceof voidP_dest_5_71_tag_table dest_5 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 16 13 42#
    (instanceof voidP_dest_5_71_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp31 : int.
      ((((<=) (0) __framac_tmp31) /\
       ((<=) __framac_tmp31 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp32 : int.
      ((((<=) (0) __framac_tmp32) /\
       ((<=) __framac_tmp32 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memmove.h" 19 13 100#
   (((same_block dest_5 src_3) /\ (not (not (same_block dest_5 src_3)))) \/
   ((not (same_block dest_5 src_3)) /\ (not (same_block dest_5 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memmove.h" 27 14 99#
     "expl:Ensures clause"
     (forall i_60 : int.
      ((((<=) (0) i_60) /\ ((<) i_60 (Bit_uint64.to_int count_1))) ->
       (Int8.(=)
       (select !charP_charM_dest_5_71
       (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag) i_60))
       (select (old !charP_charM_dest_5_71)
       (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag) i_60)))))))
     } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3_0 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker-gh/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 4623 23 37# (sub_pointer_  dest_5 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (s_12_1 :=
         (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
         'Loop_80:
         loop
         invariant { (#"whole_program.jc" 4627 9 5209# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_5_71, dest_5,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 17 21 119#
             (forall i_57 : int.
              ((((<=) (0) i_57) /\
               ((<) i_57
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               i_57))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_57))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 16 21 127#
             (forall i_56 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_56)
               /\ ((<) i_56 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
              (same_block !s_12_1
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_12_1
             (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
              (same_block !tmp_0_13
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_13
             (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_13
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_12_1
             (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 4629 45 58#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_2 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 4686 65 78# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_2
              (#"whole_program.jc" 4689 54 67# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0_14 := !tmp_0_13);
              begin
              (tmp_0_13 :=
               (shift_  !tmp_0_13
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 4695 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_2 := !s_12_1);
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4697 59 71# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_862 = (acc  !charP_charM_dest_5_71 !tmp_1_2 )
                 in
                 (let _jessie_863 = !tmp_0_14 in
                 (let _jessie_864 = (0) in
                 (let _jessie_865 = _jessie_863 in
                 (upd  charP_charM_dest_5_71 _jessie_865 _jessie_862 )))))
                end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_5_71, dest_5,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_80 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_77 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (tmp_0_13 :=
         (shift_  !tmp_0_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_12_1 :=
          (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
          begin
          (s_12_1 :=
           (shift_  !s_12_1 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_79:
           loop
           invariant { (#"whole_program.jc" 4722 9 4396# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_5_71, dest_5,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 33 21 115#
               (forall i_59 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_59) /\
                 ((<) i_59 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                 i_59))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_59))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 32 21 105#
               (forall i_58 : int.
                ((((<=) (0) i_58) /\
                 ((<) i_58 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
                (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
                (same_block !s_12_1
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_12_1
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
                (same_block !tmp_0_13
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_13
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_13
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_12_1
               (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 4724 45 58#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3_0 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 4775 65 78# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3_0
                (#"whole_program.jc" 4778 54 67# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp_0_13 :=
                (shift_  !tmp_0_13
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4783 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 4784 59 71# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_847 = (acc  !charP_charM_dest_5_71 !s_12_1 ) in
                 (let _jessie_848 = !tmp_0_13 in
                 (let _jessie_849 = (0) in
                 (let _jessie_850 = _jessie_848 in
                 (upd  charP_charM_dest_5_71 _jessie_850 _jessie_847 )))))
                end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_5_71, dest_5,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker-gh/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_5_71
                  (shift
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_5_71
                  (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_82 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_78 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker-gh/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 4803 53 71#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_5); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
  let memmove_ensures_same_addr
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, behavior same_addr" =
  fun
   (dest_5 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_5_71 : ref (memory voidP Int8.t))
   (voidP_dest_5_71_alloc_table : (alloc_table voidP))
   (voidP_dest_5_71_tag_table : (tag_table voidP)) 
   requires {
   ((same_block dest_5 src_3) /\
   (((allocated voidP_dest_5_71_alloc_table src_3) ->
     ((instanceof voidP_dest_5_71_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table src_3))) ->
       (instanceof voidP_dest_5_71_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_5_71_alloc_table dest_5) ->
     ((instanceof voidP_dest_5_71_tag_table dest_5 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_5_71_alloc_table dest_5) i) /\
       ((<) i (offset_max voidP_dest_5_71_alloc_table dest_5))) ->
       (instanceof voidP_dest_5_71_tag_table (shift dest_5 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 15 13 43#
    (instanceof voidP_dest_5_71_tag_table dest_5 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 16 13 42#
    (instanceof voidP_dest_5_71_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp31 : int.
      ((((<=) (0) __framac_tmp31) /\
       ((<=) __framac_tmp31 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4560 12 2059#
   ((#"/home/work/workspace/self/verker-gh/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_5_71_alloc_table
      (downcast voidP_dest_5_71_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp32 : int.
      ((((<=) (0) __framac_tmp32) /\
       ((<=) __framac_tmp32 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memmove.h" 19 13 100#
   (((same_block dest_5 src_3) /\ (not (not (same_block dest_5 src_3)))) \/
   ((not (same_block dest_5 src_3)) /\ (not (same_block dest_5 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memmove.h" 24 14 99#
     "expl:Ensures clause"
     (forall i_61 : int.
      ((((<=) (0) i_61) /\ ((<) i_61 (Bit_uint64.to_int count_1))) ->
       (Int8.(=)
       (select !charP_charM_dest_5_71
       (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag) i_61))
       (select (old !charP_charM_dest_5_71)
       (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag) i_61)))))))
     } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3_0 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker-gh/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 4623 23 37# (sub_pointer_  dest_5 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (s_12_1 :=
         (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
         'Loop_78:
         loop
         invariant { (#"whole_program.jc" 4627 9 5209# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_5_71, dest_5,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 17 21 119#
             (forall i_57 : int.
              ((((<=) (0) i_57) /\
               ((<) i_57
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               i_57))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_57))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 16 21 127#
             (forall i_56 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_56)
               /\ ((<) i_56 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_5_71
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))
               (select (at !charP_charM_dest_5_71 'Init)
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               i_56))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
              (same_block !s_12_1
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_12_1
             (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              !tmp_0_13) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
              (same_block !tmp_0_13
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_13
             (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker-gh/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_13
              (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker-gh/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_12_1
             (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker-gh/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 4629 45 58#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker-gh/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_2 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 4686 65 78# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_2
              (#"whole_program.jc" 4689 54 67# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0_14 := !tmp_0_13);
              begin
              (tmp_0_13 :=
               (shift_  !tmp_0_13
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 4695 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_2 := !s_12_1);
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4697 59 71# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_834 = (acc  !charP_charM_dest_5_71 !tmp_1_2 )
                 in
                 (let _jessie_835 = !tmp_0_14 in
                 (let _jessie_836 = (0) in
                 (let _jessie_837 = _jessie_835 in
                 (upd  charP_charM_dest_5_71 _jessie_837 _jessie_834 )))))
                end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_5_71, dest_5,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_5_71
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_80 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_77 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp_0_13 :=
        (downcast_  voidP_dest_5_71_tag_table dest_5 (charP_tag  ) ));
        begin
        (tmp_0_13 :=
         (shift_  !tmp_0_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_12_1 :=
          (downcast_  voidP_dest_5_71_tag_table src_3 (charP_tag  ) ));
          begin
          (s_12_1 :=
           (shift_  !s_12_1 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_77:
           loop
           invariant { (#"whole_program.jc" 4722 9 4396# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_5_71, dest_5,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 33 21 115#
               (forall i_59 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_59) /\
                 ((<) i_59 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                 i_59))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_59))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 32 21 105#
               (forall i_58 : int.
                ((((<=) (0) i_58) /\
                 ((<) i_58 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_5_71
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))
                 (select (at !charP_charM_dest_5_71 'Init)
                 (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                 i_58))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table src_3 charP_tag) !s_12_1)
                (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
                (same_block !s_12_1
                (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_12_1
               (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                !tmp_0_13) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
                (same_block !tmp_0_13
                (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_13
               (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker-gh/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_13
                (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker-gh/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_12_1
               (downcast voidP_dest_5_71_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker-gh/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 4724 45 58#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker-gh/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3_0 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 4775 65 78# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker-gh/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3_0
                (#"whole_program.jc" 4778 54 67# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp_0_13 :=
                (shift_  !tmp_0_13
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 4783 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_12_1 :=
                 (shift_  !s_12_1
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 4784 59 71# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_819 = (acc  !charP_charM_dest_5_71 !s_12_1 ) in
                 (let _jessie_820 = !tmp_0_13 in
                 (let _jessie_821 = (0) in
                 (let _jessie_822 = _jessie_820 in
                 (upd  charP_charM_dest_5_71 _jessie_822 _jessie_819 )))))
                end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_5_71, dest_5,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker-gh/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_5_71
                  (shift
                  (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_5_71
                  (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_82 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_78 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker-gh/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 4803 53 71#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_5); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_unsigned_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function unsigned_charP_tag  : (tag_id
  voidP)
  
  axiom Unsigned_charP_parenttag_voidP :
  (parenttag unsigned_charP_tag voidP_tag)
  
  axiom Unsigned_charP_is_final :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p unsigned_charP_tag) ->
     ((=) (typeof voidP_tag_table p) unsigned_charP_tag))))
  
  predicate frame_tag_struct_unsigned_charP (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_unsigned_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_unsigned_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_unsigned_charP (p : (pointer voidP))
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_unsigned_charP (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_unsigned_charP (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) unsigned_charP_tag)
  
  predicate typeof_struct_unsigned_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) unsigned_charP_tag))))
  
  predicate instanceof_singleton_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p unsigned_charP_tag)
  
  predicate instanceof_struct_unsigned_charP (p : (pointer voidP)) (l : int)
  (r : int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) unsigned_charP_tag))))
  
  predicate right_valid_struct_unsigned_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_unsigned_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_unsigned_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_unsigned_charP (p : (pointer voidP)) (a :
  int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom Unsigned_charP_int : ((=) (int_of_tag unsigned_charP_tag) (6))
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Function_memcmp_safety
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
"expl:memcmp, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memcmp
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, safety" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_8_alloc_table : (alloc_table voidP)) (voidP_ct_9_alloc_table :
   (alloc_table voidP)) (voidP_ct_9_tag_table : (tag_table voidP))
   (voidP_cs_8_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_ct_9_alloc_table ct) ->
     ((instanceof voidP_ct_9_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_9_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_9_alloc_table ct))) ->
       (instanceof voidP_ct_9_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_8_alloc_table cs) ->
     ((instanceof voidP_cs_8_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_8_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_8_alloc_table cs))) ->
       (instanceof voidP_cs_8_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 25 13 39#
    (instanceof voidP_cs_8_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 26 13 39#
    (instanceof voidP_ct_9_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp5 : int.
      ((((<=) (0) __framac_tmp5) /\
       ((<=) __framac_tmp5 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp6 : int.
      ((((<=) (0) __framac_tmp6) /\
       ((<=) __framac_tmp6 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Safe_int32.any_  () ) in
     (let __retres_1 = ref (Safe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (let _jessie_189 =
       (#"whole_program.jc" 582 25 37# "expl:Integer cast"
       (Safe_int32.of_int (0))) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/memcmp.c" 50 1 4#
       "expl:Pointer index bounds" true) }); _jessie_189 end));
       begin
       (su1 :=
        (let _jessie_188 =
        (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 12 14#
        (downcast_  voidP_cs_8_tag_table cs (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 6 14#
        "expl:Pointer index bounds" true) }); _jessie_188 end));
        begin
        (su2 :=
         (let _jessie_183 =
         (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 22 24#
         (downcast_  voidP_ct_9_tag_table ct (unsigned_charP_tag  ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 16 24#
         "expl:Pointer index bounds" true) }); _jessie_183 end));
         'Loop_12:
         loop
         invariant { (#"whole_program.jc" 586 6 3523# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 64 18 23#
             (Uint64.to_int
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 64 18 23#
             !mutable_count))) }
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 629 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_8
               (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_9
               (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 588 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 35#
            (Safe_uint64.(<) 
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 27#
             "expl:Integer cast"
             (Safe_uint64_of_Safe_int32.cast 
              (#"whole_program.jc" 636 38 50# "expl:Integer cast"
              (Safe_int32.of_int (0))) )) !mutable_count )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (res_0 :=
              (let _jessie_184 =
              (Safe_int32.(-) 
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Safe_int32_of_Safe_uint8.cast 
                (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 13 17#
                "expl:Pointer dereference"
                (acc  voidP_cs_8_alloc_table
                 unsigned_charP_unsigned_charM_cs_8 !su1 )) ))
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Safe_int32_of_Safe_uint8.cast 
                (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 20 24#
                "expl:Pointer dereference"
                (acc  voidP_ct_9_alloc_table
                 unsigned_charP_unsigned_charM_ct_9 !su2 )) )) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 7 24#
              "expl:Pointer index bounds" true) }); _jessie_184 end));
              (if
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 6 30#
              (Safe_int32.(<>)  !res_0
               (#"whole_program.jc" 640 36 48# "expl:Integer cast"
               (Safe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_exc ())) else ());
              begin
              (su1 :=
               (let _jessie_185 =
               (shift_typesafe  !su1
                (Safe_int32.to_int 
                 (#"whole_program.jc" 642 46 58# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 37 42#
               "expl:Pointer index bounds" true) }); _jessie_185 end));
               begin
               (su2 :=
                (let _jessie_186 =
                (shift_typesafe  !su2
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 643 46 58# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 44 49#
                "expl:Pointer index bounds" true) }); _jessie_186 end));
                (mutable_count :=
                 (let _jessie_187 =
                 (Safe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 644 61 74# "expl:Integer cast"
                  (Safe_uint64.of_int (1))) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 51 58#
                 "expl:Pointer index bounds" true) }); _jessie_187 end)) end
              end end end; (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_11 -> () end end end;
         (raise (Goto_while_0_break_exc ())) end end end with
      Goto_while_0_break_exc _jessie_9 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_1 :=
        (let _jessie_190 = !res_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memcmp.c" 70 1 12#
        "expl:Pointer index bounds" true) }); _jessie_190 end));
        begin
        (return :=
         (let _jessie_191 = !__retres_1 in
         begin
         (assert {
         (#"whole_program.jc" 650 7 24# "expl:Pointer index bounds" true) });
          _jessie_191 end)); (raise Return) end end end end)))); absurd  end
    with Return -> !return end))
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Function_memcmp_behaviors
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
"expl:memcmp, behaviors"

  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memcmp_ensures_default
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, default behavior" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_8_alloc_table : (alloc_table voidP)) (voidP_ct_9_alloc_table :
   (alloc_table voidP)) (voidP_ct_9_tag_table : (tag_table voidP))
   (voidP_cs_8_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_ct_9_alloc_table ct) ->
     ((instanceof voidP_ct_9_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_9_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_9_alloc_table ct))) ->
       (instanceof voidP_ct_9_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_8_alloc_table cs) ->
     ((instanceof voidP_cs_8_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_8_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_8_alloc_table cs))) ->
       (instanceof voidP_cs_8_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 25 13 39#
    (instanceof voidP_cs_8_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 26 13 39#
    (instanceof voidP_ct_9_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp5 : int.
      ((((<=) (0) __framac_tmp5) /\
       ((<=) __framac_tmp5 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp6 : int.
      ((((<=) (0) __framac_tmp6) /\
       ((<=) __framac_tmp6 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))))))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 552 10 757# "expl:Behavior disjointness check"
    (not
    ((forall i_7_0 : int.
      ((((<=) (0) i_7_0) /\ ((<) i_7_0 (Uint64.to_int !mutable_count))) ->
       (Uint8.(=)
       (select unsigned_charP_unsigned_charM_cs_8
       (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_7_0))
       (select unsigned_charP_unsigned_charM_ct_9
       (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_7_0)))))
    /\
    (exists i_5_0 : int.
     (((<=) (0) i_5_0) /\
     (((<) i_5_0 (Uint64.to_int !mutable_count)) /\
     (Uint8.(<>)
     (select unsigned_charP_unsigned_charM_cs_8
     (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_5_0))
     (select unsigned_charP_unsigned_charM_ct_9
     (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_5_0)))))))))
    });
     (check {
     (#"whole_program.jc" 563 10 726# "expl:Behavior completeness check"
     ((exists i_5_1 : int.
       (((<=) (0) i_5_1) /\
       (((<) i_5_1 (Uint64.to_int !mutable_count)) /\
       (Uint8.(<>)
       (select unsigned_charP_unsigned_charM_cs_8
       (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_5_1))
       (select unsigned_charP_unsigned_charM_ct_9
       (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_5_1))))))
     \/
     (forall i_7_1 : int.
      ((((<=) (0) i_7_1) /\ ((<) i_7_1 (Uint64.to_int !mutable_count))) ->
       (Uint8.(=)
       (select unsigned_charP_unsigned_charM_cs_8
       (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_7_1))
       (select unsigned_charP_unsigned_charM_ct_9
       (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_7_1)))))))
     });
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_1 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 582 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_8_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 := (downcast_  voidP_ct_9_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_9:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 30#
               (Uint64.(<=) (#"whole_program.jc" 588 40 53#
               "expl:Integer cast" (Uint64.of_int (0))) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 25 48#
              (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
               (same_block
               (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
               ((<=)
               (sub_pointer
               (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1)
               (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
               (same_block !su1
               (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
               (Uint64.to_int (at !mutable_count 'Init)))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
              ((<=)
              (sub_pointer !su1
              (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
               (same_block
               (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
               ((<=)
               (sub_pointer
               (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2)
               (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
               (same_block !su2
               (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
               (Uint64.to_int (at !mutable_count 'Init)))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
              ((<=)
              (sub_pointer !su2
              (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
              ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 72#
               ((=)
               (sub_pointer !su1
               (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
               (sub_pointer !su2
               (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))
              /\
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 56 20 80#
              ((=)
              (sub_pointer !su2
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
              (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
              (Uint64.to_int !mutable_count)))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 58 20 125#
              (forall i_4 : int.
               ((((<=) (0) i_4) /\
                ((<) i_4
                (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
                (Uint64.to_int !mutable_count)))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_4))
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_4))))))
             &&
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 629 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 27#
             "expl:Integer cast"
             (Unsafe_uint64_of_Unsafe_int32.cast 
              (#"whole_program.jc" 636 38 50# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) !mutable_count )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_8 !su1 ) ))
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_9 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 640 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 642 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 643 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 644 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_11 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end end with Goto_while_0_break_exc _jessie_9 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_1 := !res_0);
        begin (return := !__retres_1); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let memcmp_ensures_diff
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, behavior diff" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_8_alloc_table : (alloc_table voidP)) (voidP_ct_9_alloc_table :
   (alloc_table voidP)) (voidP_ct_9_tag_table : (tag_table voidP))
   (voidP_cs_8_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
   requires {
   ((exists i_5 : int.
     (((<=) (0) i_5) /\
     (((<) i_5 (Uint64.to_int count)) /\
     (Uint8.(<>)
     (select unsigned_charP_unsigned_charM_cs_8
     (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_5))
     (select unsigned_charP_unsigned_charM_ct_9
     (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_5))))))
   /\
   (((allocated voidP_ct_9_alloc_table ct) ->
     ((instanceof voidP_ct_9_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_9_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_9_alloc_table ct))) ->
       (instanceof voidP_ct_9_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_8_alloc_table cs) ->
     ((instanceof voidP_cs_8_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_8_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_8_alloc_table cs))) ->
       (instanceof voidP_cs_8_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 25 13 39#
    (instanceof voidP_cs_8_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 26 13 39#
    (instanceof voidP_ct_9_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp5 : int.
      ((((<=) (0) __framac_tmp5) /\
       ((<=) __framac_tmp5 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp6 : int.
      ((((<=) (0) __framac_tmp6) /\
       ((<=) __framac_tmp6 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memcmp.c" 40 15 241#
     "expl:Ensures clause"
     (exists i_6 : int.
      (((<=) (0) i_6) /\
      (((<) i_6 (Uint64.to_int count)) /\
      ((forall j_1 : int.
        ((((<=) (0) j_1) /\ ((<) j_1 i_6)) ->
         (Uint8.(=)
         (select unsigned_charP_unsigned_charM_cs_8
         (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) j_1))
         (select unsigned_charP_unsigned_charM_ct_9
         (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) j_1)))))
      /\
      ((Uint8.(<>)
       (select unsigned_charP_unsigned_charM_cs_8
       (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_6))
       (select unsigned_charP_unsigned_charM_ct_9
       (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_6)))
      /\
      ((=) (Int32.to_int result)
      (Int.(-)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_cs_8
      (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_6)))
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_ct_9
      (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_6))))))))))))
     } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_1 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 582 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_8_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 := (downcast_  voidP_ct_9_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_11:
         loop
         invariant { (#"whole_program.jc" 586 6 3523# true) } 
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 629 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_8
               (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_9
               (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 588 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 27#
             "expl:Integer cast"
             (Unsafe_uint64_of_Unsafe_int32.cast 
              (#"whole_program.jc" 636 38 50# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) !mutable_count )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_8 !su1 ) ))
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_9 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 640 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 642 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 643 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 644 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_11 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end end with Goto_while_0_break_exc _jessie_9 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_1 := !res_0);
        begin (return := !__retres_1); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let memcmp_ensures_equal
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, behavior equal" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_8_alloc_table : (alloc_table voidP)) (voidP_ct_9_alloc_table :
   (alloc_table voidP)) (voidP_ct_9_tag_table : (tag_table voidP))
   (voidP_cs_8_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
   requires {
   ((forall i_7 : int.
     ((((<=) (0) i_7) /\ ((<) i_7 (Uint64.to_int count))) ->
      (Uint8.(=)
      (select unsigned_charP_unsigned_charM_cs_8
      (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) i_7))
      (select unsigned_charP_unsigned_charM_ct_9
      (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) i_7)))))
   /\
   (((allocated voidP_ct_9_alloc_table ct) ->
     ((instanceof voidP_ct_9_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_9_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_9_alloc_table ct))) ->
       (instanceof voidP_ct_9_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_8_alloc_table cs) ->
     ((instanceof voidP_cs_8_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_8_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_8_alloc_table cs))) ->
       (instanceof voidP_cs_8_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 25 13 39#
    (instanceof voidP_cs_8_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 26 13 39#
    (instanceof voidP_ct_9_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_8_alloc_table
      (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp5 : int.
      ((((<=) (0) __framac_tmp5) /\
       ((<=) __framac_tmp5 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 494 12 2275#
   ((#"/home/work/workspace/self/verker-gh/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_9_alloc_table
      (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp6 : int.
      ((((<=) (0) __framac_tmp6) /\
       ((<=) __framac_tmp6 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memcmp.c" 37 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 534 32 44# "expl:Integer cast"
     (Int32.of_int (0)))))) } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_1 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 582 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_8_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 := (downcast_  voidP_ct_9_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_10:
         loop
         invariant { (#"whole_program.jc" 586 6 3523# true) } 
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 629 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_8
               (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_9
               (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker-gh/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 588 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 66 26 27#
             "expl:Integer cast"
             (Unsafe_uint64_of_Unsafe_int32.cast 
              (#"whole_program.jc" 636 38 50# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) !mutable_count )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_8 !su1 ) ))
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_9 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 640 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 642 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 643 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 644 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_11 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end end with Goto_while_0_break_exc _jessie_9 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_1 := !res_0);
        begin (return := !__retres_1); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memset_safety
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
"expl:memset, safety"

  use enum.Uint64 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  let memset
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
  "expl:Function memset, safety" =
  fun
   (s_2_0 : (pointer voidP)) (c_13_1 : Int32.t) (count_2 : Uint64.t)
   (charP_charM_s_2_77 : ref (memory voidP Int8.t)) (voidP_s_2_77_alloc_table
   : (alloc_table voidP)) (voidP_s_2_77_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_s_2_77_alloc_table s_2_0) ->
     ((instanceof voidP_s_2_77_tag_table s_2_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_2_77_alloc_table s_2_0) i) /\
       ((<) i (offset_max voidP_s_2_77_alloc_table s_2_0))) ->
       (instanceof voidP_s_2_77_tag_table (shift s_2_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4936 12 769#
   ((#"/home/work/workspace/self/verker-gh/memset.h" 15 13 40#
    (instanceof voidP_s_2_77_tag_table s_2_0 charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memset.h" 16 13 43#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_2) (1))) then
    (((<=)
     (offset_min voidP_s_2_77_alloc_table
     (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_2_77_alloc_table
     (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_2) (1)))
    /\
    (forall __framac_tmp35 : int.
     ((((<=) (0) __framac_tmp35) /\
      ((<=) __framac_tmp35 (Int.(-) (Bit_uint64.to_int count_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_2 = ref count_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let xs = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_1 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_17 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_18 = ref (Safe_bit_uint64.any_  () ) in
    try
     begin
     (xs :=
      (let _jessie_948 =
      (#"/home/work/workspace/self/verker-gh/memset.c" 5 12 13#
      (downcast_  voidP_s_2_77_tag_table s_2_0 (charP_tag  ) )) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/memset.c" 5 1 5#
      "expl:Pointer index bounds" true) }); _jessie_948 end));
      begin
      (ocount_1 :=
       (let _jessie_938 = !mutable_count_2 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/memset.c" 6 11 17#
       "expl:Pointer index bounds" true) }); _jessie_938 end));
       'Loop_86:
       loop
       invariant { (#"whole_program.jc" 4976 6 2237# true) }
         variant { (#"/home/work/workspace/self/verker-gh/memset.c" 12 18 23#
           (Bit_uint64.to_int
           (#"/home/work/workspace/self/verker-gh/memset.c" 12 18 23#
           !mutable_count_2))) }
        begin
        any unit
        requires { true } reads { c_13_1, charP_charM_s_2_77,
        mutable_count_2, s_2_0 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/memset.c" 11 20 76#
           (forall p_33 : (pointer voidP).
            (((same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_33)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_33) (0))
             /\ ((same_block p_33 !xs) /\ ((<) (sub_pointer p_33 !xs) (0)))))
             ->
             (Bit_int8.(=) (select !charP_charM_s_2_77 p_33)
             (#"whole_program.jc" 5001 48 63# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13_1))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/memset.c" 10 20 44#
           ((=)
           (sub_pointer !xs
           (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
           (Int.(-) (Bit_uint64.to_int !ocount_1)
           (Bit_uint64.to_int !mutable_count_2))))
          /\
          ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
           (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 35#
            (same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
            !xs))
           /\
           (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 35#
            ((<=)
            (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
            !xs) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker-gh/memset.c" 9 33 57#
            (same_block !xs
            (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
            (Bit_uint64.to_int !ocount_1))))
           /\
           (#"/home/work/workspace/self/verker-gh/memset.c" 9 33 57#
           ((<=)
           (sub_pointer !xs
           (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
           (Bit_uint64.to_int !ocount_1))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.c" 8 20 40#
          (#"/home/work/workspace/self/verker-gh/memset.c" 8 20 40#
          ((#"/home/work/workspace/self/verker-gh/memset.c" 8 20 30#
           (Bit_uint64.(<=) (#"whole_program.jc" 4978 42 55#
           "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_count_2))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.c" 8 25 40#
          (Bit_uint64.(<=) !mutable_count_2 !ocount_1)))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_18 :=
           (let _jessie_939 = !mutable_count_2 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/memset.c" 14 8 19#
           "expl:Pointer index bounds" true) }); _jessie_939 end));
           begin
           (mutable_count_2 :=
            (let _jessie_940 =
            (Safe_bit_uint64.(-%)  !mutable_count_2
             (#"whole_program.jc" 5008 62 75# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 1)) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/memset.c" 14 8 19#
            "expl:Pointer index bounds" true) }); _jessie_940 end)); () end
          end;
           (if
           (#"/home/work/workspace/self/verker-gh/memset.c" 14 8 19#
           (Safe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 5011 52 65# "expl:Integer cast"
            (Safe_bit_uint64.of_int_const 0)) )) then ()
           else (raise (Goto_while_0_break_exc ())));
           begin
           (tmp_0_17 :=
            (let _jessie_941 = !xs in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/memset.c" 15 3 7#
            "expl:Pointer index bounds" true) }); _jessie_941 end));
            begin
            (xs :=
             (let _jessie_942 =
             (shift_typesafe  !xs
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 5015 49 61# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memset.c" 15 3 7#
             "expl:Pointer index bounds" true) }); _jessie_942 end));
             (let _jessie_944 =
             (let _jessie_943 =
             (#"/home/work/workspace/self/verker-gh/memset.c" 15 10 23#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_13_1 )) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memset.c" 15 2 23#
             "expl:Pointer index bounds" true) }); _jessie_943 end) in
             (let _jessie_945 = !tmp_0_17 in
             (let _jessie_946 = (0) in
             (let _jessie_947 = _jessie_945 in
             (#"/home/work/workspace/self/verker-gh/memset.c" 15 2 23#
             "expl:Pointer dereference"
             (upd  voidP_s_2_77_alloc_table charP_charM_s_2_77 _jessie_945
              _jessie_944 )))))) end end end; (raise (Loop_continue_exc ()))
          end with Loop_continue_exc _jessie_88 -> () end end end;
       (raise (Goto_while_0_break_exc ())) end end with
     Goto_while_0_break_exc _jessie_86 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      any unit
      requires { true } reads { mutable_count_2 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/memset.c" 16 12 35#
        (Bit_uint64.(=) !mutable_count_2 (#"whole_program.jc" 5024 53 71#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
       () end;
      begin
      (return :=
       (let _jessie_949 = s_2_0 in
       begin
       (assert {
       (#"whole_program.jc" 5028 7 17# "expl:Pointer index bounds" true) });
        _jessie_949 end)); (raise Return) end end end)))); absurd  end with
    Return -> !return end))
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memset_behaviors
#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
"expl:memset, behaviors"

  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  let memset_ensures_default
  #"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
  "expl:Function memset, default behavior" =
  fun
   (s_2_0 : (pointer voidP)) (c_13_1 : Int32.t) (count_2 : Uint64.t)
   (charP_charM_s_2_77 : ref (memory voidP Int8.t)) (voidP_s_2_77_alloc_table
   : (alloc_table voidP)) (voidP_s_2_77_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_s_2_77_alloc_table s_2_0) ->
     ((instanceof voidP_s_2_77_tag_table s_2_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_2_77_alloc_table s_2_0) i) /\
       ((<) i (offset_max voidP_s_2_77_alloc_table s_2_0))) ->
       (instanceof voidP_s_2_77_tag_table (shift s_2_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 4936 12 769#
   ((#"/home/work/workspace/self/verker-gh/memset.h" 15 13 40#
    (instanceof voidP_s_2_77_tag_table s_2_0 charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memset.h" 16 13 43#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_2) (1))) then
    (((<=)
     (offset_min voidP_s_2_77_alloc_table
     (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_2_77_alloc_table
     (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_2) (1)))
    /\
    (forall __framac_tmp35 : int.
     ((((<=) (0) __framac_tmp35) /\
      ((<=) __framac_tmp35 (Int.(-) (Bit_uint64.to_int count_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 4949 10 70# "expl:Assigns clause"
      (not_assigns voidP_s_2_77_alloc_table voidP_s_2_77_alloc_table (old
      !charP_charM_s_2_77) !charP_charM_s_2_77
      (pset_range
      (pset_singleton (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)) (0)
      (Int.(-) (Bit_uint64.to_int count_2) (1)))))
     /\
     (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
      "expl:Ensures clause"
      (forall p_34 : (pointer voidP).
       (((same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag) p_34)
        /\
        (((<=)
         (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag) p_34)
         (0))
        /\
        ((same_block p_34
         (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
         (Bit_uint64.to_int count_2)))
        /\
        ((<)
        (sub_pointer p_34
        (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
        (Bit_uint64.to_int count_2))) (0))))) ->
        (Bit_int8.(=) (select !charP_charM_s_2_77 p_34)
        (#"whole_program.jc" 4962 52 76# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_13_1))))))
     /\
     (#"/home/work/workspace/self/verker-gh/memset.h" 20 12 24#
     "expl:Ensures clause" ((=) result s_2_0))))))) } diverges  ->
   (let mutable_count_2 = ref count_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let xs = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_1 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_17 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_18 = ref (Unsafe_bit_uint64.any_  () ) in
    try
     begin
     (xs := (downcast_  voidP_s_2_77_tag_table s_2_0 (charP_tag  ) ));
      begin
      (ocount_1 := !mutable_count_2);
       'Loop_85:
       loop
       invariant
         { (((#"/home/work/workspace/self/verker-gh/memset.c" 8 20 40#
             (#"/home/work/workspace/self/verker-gh/memset.c" 8 20 40#
             ((#"/home/work/workspace/self/verker-gh/memset.c" 8 20 30#
              (Bit_uint64.(<=) (#"whole_program.jc" 4978 42 55#
              "expl:Integer cast" (Bit_uint64.of_int_const 0))
              !mutable_count_2))
             /\
             (#"/home/work/workspace/self/verker-gh/memset.c" 8 25 40#
             (Bit_uint64.(<=) !mutable_count_2 !ocount_1)))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
             (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 35#
              (same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              !xs))
             /\
             (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker-gh/memset.c" 9 20 35#
              ((<=)
              (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              !xs) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker-gh/memset.c" 9 33 57#
              (same_block !xs
              (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              (Bit_uint64.to_int !ocount_1))))
             /\
             (#"/home/work/workspace/self/verker-gh/memset.c" 9 33 57#
             ((<=)
             (sub_pointer !xs
             (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
             (Bit_uint64.to_int !ocount_1))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memset.c" 10 20 44#
             ((=)
             (sub_pointer !xs
             (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
             (Int.(-) (Bit_uint64.to_int !ocount_1)
             (Bit_uint64.to_int !mutable_count_2))))
            &&
            (#"/home/work/workspace/self/verker-gh/memset.c" 11 20 76#
            (forall p_33 : (pointer voidP).
             (((same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
               p_33)
              /\
              (((<=)
               (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
               p_33) (0))
              /\ ((same_block p_33 !xs) /\ ((<) (sub_pointer p_33 !xs) (0)))))
              ->
              (Bit_int8.(=) (select !charP_charM_s_2_77 p_33)
              (#"whole_program.jc" 5001 48 63# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_13_1)))))))))
           /\
           (#"whole_program.jc" 4949 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_77_alloc_table voidP_s_2_77_alloc_table (at
           !charP_charM_s_2_77 'Init) !charP_charM_s_2_77
           (pset_range
           (pset_singleton (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
           (0) (Int.(-) (Bit_uint64.to_int (at !mutable_count_2 'Init)) (1)))))) }
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_18 := !mutable_count_2);
           begin
           (mutable_count_2 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_2
             (#"whole_program.jc" 5008 62 75# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker-gh/memset.c" 14 8 19#
           (Unsafe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 5011 52 65# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) )) then ()
           else (raise (Goto_while_0_break_exc ())));
           begin
           (tmp_0_17 := !xs);
            begin
            (xs :=
             (shift_  !xs
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 5015 49 61# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (let _jessie_932 =
             (#"/home/work/workspace/self/verker-gh/memset.c" 15 10 23#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_13_1 )) in
             (let _jessie_933 = !tmp_0_17 in
             (let _jessie_934 = (0) in
             (let _jessie_935 = _jessie_933 in
             (upd  charP_charM_s_2_77 _jessie_935 _jessie_932 ))))) end end
          end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_88 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end end with Goto_while_0_break_exc _jessie_86 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/memset.c" 16 12 35#
      "expl:Assertion in line 16"
      (Bit_uint64.(=) !mutable_count_2 (#"whole_program.jc" 5024 53 71#
      "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
      end; begin (return := s_2_0); (raise Return) end end end)))); absurd 
    end with Return -> !return end))
  
end

theory Root_unsigned_intP

  use why3.Bool.Bool 
  
  type unsigned_intP 
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

theory Axiomatic_Ctype

  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function tolower int : int
  
  axiom A_0 #"/home/work/workspace/self/verker-gh/ctype.h" 59 13 32#
  "expl:Axiom a" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 59 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 831 22 34# "expl:Integer cast"
  (Int8.of_int (65)))))
  (Int8.to_int (#"whole_program.jc" 831 52 64# "expl:Integer cast"
  (Int8.of_int (97))))))
  
  axiom B #"/home/work/workspace/self/verker-gh/ctype.h" 59 43 62#
  "expl:Axiom b" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 59 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 834 22 34# "expl:Integer cast"
  (Int8.of_int (66)))))
  (Int8.to_int (#"whole_program.jc" 834 52 64# "expl:Integer cast"
  (Int8.of_int (98))))))
  
  axiom C_36 #"/home/work/workspace/self/verker-gh/ctype.h" 59 73 92#
  "expl:Axiom c" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 59 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 837 22 34# "expl:Integer cast"
  (Int8.of_int (67)))))
  (Int8.to_int (#"whole_program.jc" 837 52 64# "expl:Integer cast"
  (Int8.of_int (99))))))
  
  axiom D #"/home/work/workspace/self/verker-gh/ctype.h" 60 13 32#
  "expl:Axiom d" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 60 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 840 22 34# "expl:Integer cast"
  (Int8.of_int (68)))))
  (Int8.to_int (#"whole_program.jc" 841 15 28# "expl:Integer cast"
  (Int8.of_int (100))))))
  
  axiom E #"/home/work/workspace/self/verker-gh/ctype.h" 60 43 62#
  "expl:Axiom e" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 60 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 844 22 34# "expl:Integer cast"
  (Int8.of_int (69)))))
  (Int8.to_int (#"whole_program.jc" 845 15 28# "expl:Integer cast"
  (Int8.of_int (101))))))
  
  axiom F #"/home/work/workspace/self/verker-gh/ctype.h" 60 73 92#
  "expl:Axiom f" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 60 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 848 22 34# "expl:Integer cast"
  (Int8.of_int (70)))))
  (Int8.to_int (#"whole_program.jc" 849 15 28# "expl:Integer cast"
  (Int8.of_int (102))))))
  
  axiom G #"/home/work/workspace/self/verker-gh/ctype.h" 61 13 32#
  "expl:Axiom g" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 61 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 852 22 34# "expl:Integer cast"
  (Int8.of_int (71)))))
  (Int8.to_int (#"whole_program.jc" 853 15 28# "expl:Integer cast"
  (Int8.of_int (103))))))
  
  axiom H #"/home/work/workspace/self/verker-gh/ctype.h" 61 43 62#
  "expl:Axiom h" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 61 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 856 22 34# "expl:Integer cast"
  (Int8.of_int (72)))))
  (Int8.to_int (#"whole_program.jc" 857 15 28# "expl:Integer cast"
  (Int8.of_int (104))))))
  
  axiom I #"/home/work/workspace/self/verker-gh/ctype.h" 61 73 92#
  "expl:Axiom i" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 61 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 860 22 34# "expl:Integer cast"
  (Int8.of_int (73)))))
  (Int8.to_int (#"whole_program.jc" 861 15 28# "expl:Integer cast"
  (Int8.of_int (105))))))
  
  axiom J #"/home/work/workspace/self/verker-gh/ctype.h" 62 13 32#
  "expl:Axiom j" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 62 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 864 22 34# "expl:Integer cast"
  (Int8.of_int (74)))))
  (Int8.to_int (#"whole_program.jc" 865 15 28# "expl:Integer cast"
  (Int8.of_int (106))))))
  
  axiom K #"/home/work/workspace/self/verker-gh/ctype.h" 62 43 62#
  "expl:Axiom k" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 62 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 868 22 34# "expl:Integer cast"
  (Int8.of_int (75)))))
  (Int8.to_int (#"whole_program.jc" 869 15 28# "expl:Integer cast"
  (Int8.of_int (107))))))
  
  axiom L #"/home/work/workspace/self/verker-gh/ctype.h" 62 73 92#
  "expl:Axiom l" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 62 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 872 22 34# "expl:Integer cast"
  (Int8.of_int (76)))))
  (Int8.to_int (#"whole_program.jc" 873 15 28# "expl:Integer cast"
  (Int8.of_int (108))))))
  
  axiom M #"/home/work/workspace/self/verker-gh/ctype.h" 63 13 32#
  "expl:Axiom m" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 63 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 876 22 34# "expl:Integer cast"
  (Int8.of_int (77)))))
  (Int8.to_int (#"whole_program.jc" 877 15 28# "expl:Integer cast"
  (Int8.of_int (109))))))
  
  axiom N #"/home/work/workspace/self/verker-gh/ctype.h" 63 43 62#
  "expl:Axiom n" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 63 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 880 22 34# "expl:Integer cast"
  (Int8.of_int (78)))))
  (Int8.to_int (#"whole_program.jc" 881 15 28# "expl:Integer cast"
  (Int8.of_int (110))))))
  
  axiom O #"/home/work/workspace/self/verker-gh/ctype.h" 63 73 92#
  "expl:Axiom o" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 63 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 884 22 34# "expl:Integer cast"
  (Int8.of_int (79)))))
  (Int8.to_int (#"whole_program.jc" 885 15 28# "expl:Integer cast"
  (Int8.of_int (111))))))
  
  axiom P_35 #"/home/work/workspace/self/verker-gh/ctype.h" 64 13 32#
  "expl:Axiom p" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 64 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 888 22 34# "expl:Integer cast"
  (Int8.of_int (80)))))
  (Int8.to_int (#"whole_program.jc" 889 15 28# "expl:Integer cast"
  (Int8.of_int (112))))))
  
  axiom Q #"/home/work/workspace/self/verker-gh/ctype.h" 64 43 62#
  "expl:Axiom q" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 64 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 892 22 34# "expl:Integer cast"
  (Int8.of_int (81)))))
  (Int8.to_int (#"whole_program.jc" 893 15 28# "expl:Integer cast"
  (Int8.of_int (113))))))
  
  axiom R_0 #"/home/work/workspace/self/verker-gh/ctype.h" 64 73 92#
  "expl:Axiom r" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 64 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 896 22 34# "expl:Integer cast"
  (Int8.of_int (82)))))
  (Int8.to_int (#"whole_program.jc" 897 15 28# "expl:Integer cast"
  (Int8.of_int (114))))))
  
  axiom S_48 #"/home/work/workspace/self/verker-gh/ctype.h" 65 13 32#
  "expl:Axiom s" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 65 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 900 22 34# "expl:Integer cast"
  (Int8.of_int (83)))))
  (Int8.to_int (#"whole_program.jc" 901 15 28# "expl:Integer cast"
  (Int8.of_int (115))))))
  
  axiom T_17 #"/home/work/workspace/self/verker-gh/ctype.h" 65 43 62#
  "expl:Axiom t" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 65 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 904 22 34# "expl:Integer cast"
  (Int8.of_int (84)))))
  (Int8.to_int (#"whole_program.jc" 905 15 28# "expl:Integer cast"
  (Int8.of_int (116))))))
  
  axiom U #"/home/work/workspace/self/verker-gh/ctype.h" 65 73 92#
  "expl:Axiom u" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 65 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 908 22 34# "expl:Integer cast"
  (Int8.of_int (85)))))
  (Int8.to_int (#"whole_program.jc" 909 15 28# "expl:Integer cast"
  (Int8.of_int (117))))))
  
  axiom V_0 #"/home/work/workspace/self/verker-gh/ctype.h" 66 13 32#
  "expl:Axiom v" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 66 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 912 22 34# "expl:Integer cast"
  (Int8.of_int (86)))))
  (Int8.to_int (#"whole_program.jc" 913 15 28# "expl:Integer cast"
  (Int8.of_int (118))))))
  
  axiom W #"/home/work/workspace/self/verker-gh/ctype.h" 66 43 62#
  "expl:Axiom w" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 66 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 916 22 34# "expl:Integer cast"
  (Int8.of_int (87)))))
  (Int8.to_int (#"whole_program.jc" 917 15 28# "expl:Integer cast"
  (Int8.of_int (119))))))
  
  axiom X #"/home/work/workspace/self/verker-gh/ctype.h" 66 73 92#
  "expl:Axiom x" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 66 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 920 22 34# "expl:Integer cast"
  (Int8.of_int (88)))))
  (Int8.to_int (#"whole_program.jc" 921 15 28# "expl:Integer cast"
  (Int8.of_int (120))))))
  
  axiom Y #"/home/work/workspace/self/verker-gh/ctype.h" 67 13 32#
  "expl:Axiom y" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 67 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 924 22 34# "expl:Integer cast"
  (Int8.of_int (89)))))
  (Int8.to_int (#"whole_program.jc" 925 15 28# "expl:Integer cast"
  (Int8.of_int (121))))))
  
  axiom Z #"/home/work/workspace/self/verker-gh/ctype.h" 67 43 62#
  "expl:Axiom z" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 67 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 928 22 34# "expl:Integer cast"
  (Int8.of_int (90)))))
  (Int8.to_int (#"whole_program.jc" 929 15 28# "expl:Integer cast"
  (Int8.of_int (122))))))
  
  predicate isupper (c_0 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 797 5 17# "expl:Integer cast"
      (Int8.of_int (65)))) c_0)
     /\
     ((<=) c_0
     (Int8.to_int (#"whole_program.jc" 797 50 62# "expl:Integer cast"
     (Int8.of_int (90))))))
  
  axiom Pl #"/home/work/workspace/self/verker-gh/ctype.h" 69 14 64#
  "expl:Axiom pl" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 69 14 64#
  (forall c_9_0 : int.
   ((not (isupper c_9_0)) -> ((=) (tolower c_9_0) c_9_0))))
  
  predicate islower (c : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 794 5 17# "expl:Integer cast"
      (Int8.of_int (97)))) c)
     /\
     ((<=) c
     (Int8.to_int (#"whole_program.jc" 794 46 59# "expl:Integer cast"
     (Int8.of_int (122))))))
  
  function toupper int : int
  
  axiom Pu #"/home/work/workspace/self/verker-gh/ctype.h" 70 14 64#
  "expl:Axiom pu" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 70 14 64#
  (forall c_10_0 : int.
   ((not (islower c_10_0)) -> ((=) (toupper c_10_0) c_10_0))))
  
  axiom Tl #"/home/work/workspace/self/verker-gh/ctype.h" 71 14 73#
  "expl:Axiom tl" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 71 14 73#
  (forall c_11_0 : int.
   ((not (islower c_11_0)) -> ((=) (toupper (tolower c_11_0)) c_11_0))))
  
  axiom Tu #"/home/work/workspace/self/verker-gh/ctype.h" 72 14 73#
  "expl:Axiom tu" :
  (#"/home/work/workspace/self/verker-gh/ctype.h" 72 14 73#
  (forall c_12_0 : int.
   ((not (isupper c_12_0)) -> ((=) (tolower (toupper c_12_0)) c_12_0))))
  
  predicate isalpha (c_1 : int) = ((isupper c_1) \/ (islower c_1))
  
  predicate isdigit (c_2 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 803 5 17# "expl:Integer cast"
      (Int8.of_int (48)))) c_2)
     /\
     ((<=) c_2
     (Int8.to_int (#"whole_program.jc" 803 50 62# "expl:Integer cast"
     (Int8.of_int (57))))))
  
  predicate isodigit (c_3 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 806 5 17# "expl:Integer cast"
      (Int8.of_int (48)))) c_3)
     /\
     ((<=) c_3
     (Int8.to_int (#"whole_program.jc" 806 50 62# "expl:Integer cast"
     (Int8.of_int (55))))))
  
  predicate isalnum (c_4 : int) = ((isdigit c_4) \/ (isalpha c_4))
  
  predicate isspace (c_5 : int)
  =
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 812 16 28# "expl:Integer cast"
      (Int8.of_int (32)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 813 17 29# "expl:Integer cast"
      (Int8.of_int (12)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 814 16 28# "expl:Integer cast"
      (Int8.of_int (10)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 815 15 27# "expl:Integer cast"
      (Int8.of_int (13)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 816 14 25# "expl:Integer cast"
      (Int8.of_int (9)))))
     \/
     ((=) c_5
     (Int8.to_int (#"whole_program.jc" 817 13 25# "expl:Integer cast"
     (Int8.of_int (11))))))))))
  
  predicate isxdigit (c_6 : int)
  =
     ((isdigit c_6) \/
     ((((<=)
       (Int8.to_int (#"whole_program.jc" 821 8 20# "expl:Integer cast"
       (Int8.of_int (97)))) c_6)
      /\
      ((<=) c_6
      (Int8.to_int (#"whole_program.jc" 822 16 29# "expl:Integer cast"
      (Int8.of_int (102))))))
     \/
     (((<=)
      (Int8.to_int (#"whole_program.jc" 823 7 19# "expl:Integer cast"
      (Int8.of_int (65)))) c_6)
     /\
     ((<=) c_6
     (Int8.to_int (#"whole_program.jc" 824 15 27# "expl:Integer cast"
     (Int8.of_int (70))))))))
  
end

module Function__tolower_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _tolower
  (c_1_0 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 122 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_1_0)))) }
  
end

module Function_isxdigit_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isxdigit_0
  (c_10 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 91 12 36#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isxdigit (Int8.to_int c_10)))) }
  
end

module Function__parse_integer_fixup_radix_safety
#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
"expl:_parse_integer_fixup_radix, safety"

  use enum.Uint32 
  
  use Safe_uint32_of_Safe_int32 
  
  use Safe_uint32 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import core.Jessie_acc_offset_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isxdigit_0_safe 
  
  use Function__tolower_safe 
  
  use why3.Bool.Bool 
  
  let _parse_integer_fixup_radix
  #"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, safety" =
  fun
   (s_12 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
   Uint32.t)) (unsigned_intP_base_88_alloc_table : (alloc_table
   unsigned_intP)) (voidP_s_87_alloc_table : (alloc_table voidP))
   (voidP_s_87_tag_table : (tag_table voidP)) (charP_charM_s_87 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_87_alloc_table s_12) ->
     (((=) (typeof voidP_s_87_tag_table s_12) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_87_alloc_table s_12) i) /\
       ((<) i (offset_max voidP_s_87_alloc_table s_12))) ->
       ((=) (typeof voidP_s_87_tag_table (shift s_12 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((<=) (offset_min voidP_s_87_alloc_table s_12) (0)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((>=) (offset_max voidP_s_87_alloc_table s_12) (2)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((<=) (offset_min unsigned_intP_base_88_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((>=) (offset_max unsigned_intP_base_88_alloc_table base) (0)))
   /\ (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_12 = ref s_12 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_19 = ref (Safe_int8.any_  () ) in
    (let tmp_0_20 = ref (Safe_enum__bool.any_  () ) in
    (let tmp_1_4 = ref (Safe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 5 15#
    (Safe_uint32.(=) 
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 5 10#
     "expl:Pointer dereference"
     (acc  unsigned_intP_base_88_alloc_table
      !unsigned_intP_unsigned_intM_base_88 base ))
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 14 15#
     "expl:Integer cast"
     (Safe_uint32_of_Safe_int32.cast 
      (#"whole_program.jc" 5210 35 47# "expl:Integer cast"
      (Safe_int32.of_int (0))) )) ))
    then
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 17#
     (Safe_int32.(=) 
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Safe_int32_of_Safe_int8.cast 
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 10#
       "expl:Pointer dereference"
       (acc  voidP_s_87_alloc_table charP_charM_s_87 !mutable_s_12 )) ))
      (#"whole_program.jc" 5217 68 81# "expl:Integer cast"
      (Safe_int32.of_int (48))) ))
     then
      begin
      (tmp_0_19 :=
       (let _jessie_1155 =
       (let _jessie_1156 =
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 16 20#
       "expl:Pointer dereference"
       (acc_offset_typesafe  voidP_s_87_alloc_table charP_charM_s_87
        !mutable_s_12 (1) )) in
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower_safe._tolower  _jessie_1156 ))) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Pointer index bounds" true) }); _jessie_1155 end));
       (if
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 28#
       (Safe_int32.(=) 
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_0_19 ))
        (#"whole_program.jc" 5227 68 82# "expl:Integer cast"
        (Safe_int32.of_int (120))) ))
       then
        begin
        (tmp_0_20 :=
         (let _jessie_1162 =
         (let _jessie_1163 =
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 41 45#
         "expl:Pointer dereference"
         (acc_offset_typesafe  voidP_s_87_alloc_table charP_charM_s_87
          !mutable_s_12 (2) )) in
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0_safe.isxdigit_0  _jessie_1163 ))) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Pointer index bounds" true) }); _jessie_1162 end));
         (if
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         (Safe_enum__bool.(<>)  !tmp_0_20
          (#"whole_program.jc" 5238 68 80# "expl:Integer cast"
          (Safe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_1170 =
          (let _jessie_1169 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 12 14#
          "expl:Integer cast"
          (Safe_uint32_of_Safe_int32.cast 
           (#"whole_program.jc" 5241 80 93# "expl:Integer cast"
           (Safe_int32.of_int (16))) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 4 14#
          "expl:Pointer index bounds" true) }); _jessie_1169 end) in
          (let _jessie_1171 = base in
          (let _jessie_1172 = (0) in
          (let _jessie_1173 = _jessie_1171 in
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 4 14#
          "expl:Pointer dereference"
          (upd  unsigned_intP_base_88_alloc_table
           unsigned_intP_unsigned_intM_base_88 _jessie_1171 _jessie_1170 ))))))
         else
          (let _jessie_1165 =
          (let _jessie_1164 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
          "expl:Integer cast"
          (Safe_uint32_of_Safe_int32.cast 
           (#"whole_program.jc" 5244 80 92# "expl:Integer cast"
           (Safe_int32.of_int (8))) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 4 13#
          "expl:Pointer index bounds" true) }); _jessie_1164 end) in
          (let _jessie_1166 = base in
          (let _jessie_1167 = (0) in
          (let _jessie_1168 = _jessie_1166 in
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 4 13#
          "expl:Pointer dereference"
          (upd  unsigned_intP_base_88_alloc_table
           unsigned_intP_unsigned_intM_base_88 _jessie_1166 _jessie_1165 )))))))
        end
       else
        (let _jessie_1158 =
        (let _jessie_1157 =
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
        "expl:Integer cast"
        (Safe_uint32_of_Safe_int32.cast 
         (#"whole_program.jc" 5248 80 92# "expl:Integer cast"
         (Safe_int32.of_int (8))) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 4 13#
        "expl:Pointer index bounds" true) }); _jessie_1157 end) in
        (let _jessie_1159 = base in
        (let _jessie_1160 = (0) in
        (let _jessie_1161 = _jessie_1159 in
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 4 13#
        "expl:Pointer dereference"
        (upd  unsigned_intP_base_88_alloc_table
         unsigned_intP_unsigned_intM_base_88 _jessie_1159 _jessie_1158 )))))))
      end
     else
      (let _jessie_1151 =
      (let _jessie_1150 =
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 11 13#
      "expl:Integer cast"
      (Safe_uint32_of_Safe_int32.cast 
       (#"whole_program.jc" 5252 79 92# "expl:Integer cast"
       (Safe_int32.of_int (10))) )) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 3 13#
      "expl:Pointer index bounds" true) }); _jessie_1150 end) in
      (let _jessie_1152 = base in
      (let _jessie_1153 = (0) in
      (let _jessie_1154 = _jessie_1152 in
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 3 13#
      "expl:Pointer dereference"
      (upd  unsigned_intP_base_88_alloc_table
       unsigned_intP_unsigned_intM_base_88 _jessie_1152 _jessie_1151 )))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 5 16#
     (Safe_uint32.(=) 
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 5 10#
      "expl:Pointer dereference"
      (acc  unsigned_intP_base_88_alloc_table
       !unsigned_intP_unsigned_intM_base_88 base ))
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 14 16#
      "expl:Integer cast"
      (Safe_uint32_of_Safe_int32.cast 
       (#"whole_program.jc" 5254 35 48# "expl:Integer cast"
       (Safe_int32.of_int (16))) )) ))
     then
      (if
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 31#
      (Safe_int32.(=) 
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Safe_int32_of_Safe_int8.cast 
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 24#
        "expl:Pointer dereference"
        (acc  voidP_s_87_alloc_table charP_charM_s_87 !mutable_s_12 )) ))
       (#"whole_program.jc" 5261 68 81# "expl:Integer cast"
       (Safe_int32.of_int (48))) ))
      then
       begin
       (tmp_1_4 :=
        (let _jessie_1174 =
        (let _jessie_1175 =
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 44 48#
        "expl:Pointer dereference"
        (acc_offset_typesafe  voidP_s_87_alloc_table charP_charM_s_87
         !mutable_s_12 (1) )) in
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower_safe._tolower  _jessie_1175 ))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Pointer index bounds" true) }); _jessie_1174 end));
        (if
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 56#
        (Safe_int32.(=) 
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_1_4 ))
         (#"whole_program.jc" 5272 68 82# "expl:Integer cast"
         (Safe_int32.of_int (120))) ))
        then
         (mutable_s_12 :=
          (let _jessie_1176 =
          (shift_typesafe  !mutable_s_12
           (Safe_int32.to_int 
            (#"whole_program.jc" 5276 68 80# "expl:Integer cast"
            (Safe_int32.of_int (2))) ) ) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 15 2 8#
          "expl:Pointer index bounds" true) }); _jessie_1176 end)) else ())
       end else ()) else ());
     begin
     (return :=
      (let _jessie_1177 = !mutable_s_12 in
      begin
      (assert {
      (#"whole_program.jc" 5279 7 15# "expl:Pointer index bounds" true) });
       _jessie_1177 end)); (raise Return) end end))); absurd  end with Return
    -> !return end))
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Function__tolower

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _tolower
  (c_1_0 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 122 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_1_0)))) }
  
end

module Function_isxdigit_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isxdigit_0
  (c_10 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 91 12 36#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isxdigit (Int8.to_int c_10)))) }
  
end

theory Axiomatic_IntBase

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  predicate is_hex (s_45 : (pointer voidP)) (charP_charM_s_45_84_at_L :
  (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_45_84_at_L (shift s_45 (0)))
      (#"whole_program.jc" 5156 29 41# "expl:Integer cast" (Int8.of_int
      (48))))
     /\
     (((=)
      (tolower
      (Int8.to_int (select charP_charM_s_45_84_at_L (shift s_45 (1)))))
      (Int8.to_int (#"whole_program.jc" 5158 12 25# "expl:Integer cast"
      (Int8.of_int (120)))))
     /\
     (isxdigit
     (Int8.to_int (select charP_charM_s_45_84_at_L (shift s_45 (2)))))))
  
  predicate is_oct (s_46 : (pointer voidP)) (charP_charM_s_46_85_at_L :
  (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_46_85_at_L (shift s_46 (0)))
      (#"whole_program.jc" 5162 28 40# "expl:Integer cast" (Int8.of_int
      (48))))
     /\ (not (is_hex s_46 charP_charM_s_46_85_at_L)))
  
  predicate is_dec (s_47 : (pointer voidP)) (charP_charM_s_47_86_at_L :
  (memory voidP Int8.t))
  =
     ((not (is_hex s_47 charP_charM_s_47_86_at_L)) /\
     (not (is_oct s_47 charP_charM_s_47_86_at_L)))
  
end

module Function__parse_integer_fixup_radix_behaviors
#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
"expl:_parse_integer_fixup_radix, behaviors"

  use Unsafe_uint32_of_Unsafe_int32 
  
  use Unsafe_uint32 
  
  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isxdigit_0 
  
  use Function__tolower 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let _parse_integer_fixup_radix_ensures_default
  #"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, default behavior" =
  fun
   (s_12 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
   Uint32.t)) (unsigned_intP_base_88_alloc_table : (alloc_table
   unsigned_intP)) (voidP_s_87_alloc_table : (alloc_table voidP))
   (voidP_s_87_tag_table : (tag_table voidP)) (charP_charM_s_87 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_87_alloc_table s_12) ->
     (((=) (typeof voidP_s_87_tag_table s_12) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_87_alloc_table s_12) i) /\
       ((<) i (offset_max voidP_s_87_alloc_table s_12))) ->
       ((=) (typeof voidP_s_87_tag_table (shift s_12 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((<=) (offset_min voidP_s_87_alloc_table s_12) (0)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((>=) (offset_max voidP_s_87_alloc_table s_12) (2)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((<=) (offset_min unsigned_intP_base_88_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((>=) (offset_max unsigned_intP_base_88_alloc_table base) (0)))
   /\ (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 5177 10 28# "expl:Assigns clause"
      (not_assigns unsigned_intP_base_88_alloc_table
      unsigned_intP_base_88_alloc_table (old
      !unsigned_intP_unsigned_intM_base_88)
      !unsigned_intP_unsigned_intM_base_88 (pset_singleton base)))
     /\
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 16 12 44#
     "expl:Ensures clause"
     (((=) result s_12) \/ ((=) result (shift s_12 (2))))))) }  ->
   (let mutable_s_12 = ref s_12 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_19 = ref (Unsafe_int8.any_  () ) in
    (let tmp_0_20 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1_4 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 14 15#
     "expl:Integer cast"
     (Unsafe_uint32_of_Unsafe_int32.cast 
      (#"whole_program.jc" 5210 35 47# "expl:Integer cast"
      (Unsafe_int32.of_int (0))) )) ))
    then
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5216 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 5217 68 81# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp_0_19 :=
       (let _jessie_1072 =
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5223 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_1072 ))));
       (if
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_19 ))
        (#"whole_program.jc" 5227 68 82# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0_20 :=
         (let _jessie_1079 =
         (acc  charP_charM_s_87
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5234 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_1079 ))));
         (if
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0_20
          (#"whole_program.jc" 5238 68 80# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_1086 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 12 14#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5241 80 93# "expl:Integer cast"
           (Unsafe_int32.of_int (16))) )) in
          (let _jessie_1087 = base in
          (let _jessie_1088 = (0) in
          (let _jessie_1089 = _jessie_1087 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1089 _jessie_1086
           )))))
         else
          (let _jessie_1081 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5244 80 92# "expl:Integer cast"
           (Unsafe_int32.of_int (8))) )) in
          (let _jessie_1082 = base in
          (let _jessie_1083 = (0) in
          (let _jessie_1084 = _jessie_1082 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1084 _jessie_1081
           )))))) end
       else
        (let _jessie_1074 =
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
        "expl:Integer cast"
        (Unsafe_uint32_of_Unsafe_int32.cast 
         (#"whole_program.jc" 5248 80 92# "expl:Integer cast"
         (Unsafe_int32.of_int (8))) )) in
        (let _jessie_1075 = base in
        (let _jessie_1076 = (0) in
        (let _jessie_1077 = _jessie_1075 in
        (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1077 _jessie_1074 ))))))
      end
     else
      (let _jessie_1067 =
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 11 13#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5252 79 92# "expl:Integer cast"
       (Unsafe_int32.of_int (10))) )) in
      (let _jessie_1068 = base in
      (let _jessie_1069 = (0) in
      (let _jessie_1070 = _jessie_1068 in
      (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1070 _jessie_1067 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 14 16#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5254 35 48# "expl:Integer cast"
       (Unsafe_int32.of_int (16))) )) ))
     then
      (if
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5260 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 5261 68 81# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1_4 :=
        (let _jessie_1091 =
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5268 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_1091 ))));
        (if
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1_4 ))
         (#"whole_program.jc" 5272 68 82# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_12 :=
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5276 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_12); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
  let _parse_integer_fixup_radix_ensures_guess
  #"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, behavior guess" =
  fun
   (s_12 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
   Uint32.t)) (unsigned_intP_base_88_alloc_table : (alloc_table
   unsigned_intP)) (voidP_s_87_alloc_table : (alloc_table voidP))
   (voidP_s_87_tag_table : (tag_table voidP)) (charP_charM_s_87 : (memory
   voidP Int8.t)) 
   requires {
   ((Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
    (#"whole_program.jc" 5181 33 46# "expl:Integer cast" (Uint32.of_int
    (0))))
   /\
   (((allocated voidP_s_87_alloc_table s_12) ->
     (((=) (typeof voidP_s_87_tag_table s_12) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_87_alloc_table s_12) i) /\
       ((<) i (offset_max voidP_s_87_alloc_table s_12))) ->
       ((=) (typeof voidP_s_87_tag_table (shift s_12 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((<=) (offset_min voidP_s_87_alloc_table s_12) (0)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((>=) (offset_max voidP_s_87_alloc_table s_12) (2)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((<=) (offset_min unsigned_intP_base_88_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((>=) (offset_max unsigned_intP_base_88_alloc_table base) (0)))
   /\ (#"whole_program.jc" 5170 12 415# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
      "expl:Ensures clause"
      ((is_hex s_12 charP_charM_s_87) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
       (#"whole_program.jc" 5184 37 51# "expl:Integer cast" (Uint32.of_int
       (16))))))
     /\
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 20 15 39#
      "expl:Ensures clause"
      ((is_oct s_12 charP_charM_s_87) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
       (#"whole_program.jc" 5187 39 52# "expl:Integer cast" (Uint32.of_int
       (8))))))
     /\
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 21 15 40#
      "expl:Ensures clause"
      ((is_dec s_12 charP_charM_s_87) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
       (#"whole_program.jc" 5190 41 55# "expl:Integer cast" (Uint32.of_int
       (10))))))
     /\
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 22 15 45#
      "expl:Ensures clause"
      ((is_hex s_12 charP_charM_s_87) -> ((=) result (shift s_12 (2)))))
     /\
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 23 15 54#
     "expl:Ensures clause"
     (((is_oct s_12 charP_charM_s_87) \/ (is_dec s_12 charP_charM_s_87)) ->
      ((=) result s_12))))))))))))) }  ->
   (let mutable_s_12 = ref s_12 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_19 = ref (Unsafe_int8.any_  () ) in
    (let tmp_0_20 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1_4 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 14 15#
     "expl:Integer cast"
     (Unsafe_uint32_of_Unsafe_int32.cast 
      (#"whole_program.jc" 5210 35 47# "expl:Integer cast"
      (Unsafe_int32.of_int (0))) )) ))
    then
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5216 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 5217 68 81# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp_0_19 :=
       (let _jessie_1100 =
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5223 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_1100 ))));
       (if
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_19 ))
        (#"whole_program.jc" 5227 68 82# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0_20 :=
         (let _jessie_1107 =
         (acc  charP_charM_s_87
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5234 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_1107 ))));
         (if
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0_20
          (#"whole_program.jc" 5238 68 80# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_1114 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 12 14#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5241 80 93# "expl:Integer cast"
           (Unsafe_int32.of_int (16))) )) in
          (let _jessie_1115 = base in
          (let _jessie_1116 = (0) in
          (let _jessie_1117 = _jessie_1115 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1117 _jessie_1114
           )))))
         else
          (let _jessie_1109 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5244 80 92# "expl:Integer cast"
           (Unsafe_int32.of_int (8))) )) in
          (let _jessie_1110 = base in
          (let _jessie_1111 = (0) in
          (let _jessie_1112 = _jessie_1110 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1112 _jessie_1109
           )))))) end
       else
        (let _jessie_1102 =
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
        "expl:Integer cast"
        (Unsafe_uint32_of_Unsafe_int32.cast 
         (#"whole_program.jc" 5248 80 92# "expl:Integer cast"
         (Unsafe_int32.of_int (8))) )) in
        (let _jessie_1103 = base in
        (let _jessie_1104 = (0) in
        (let _jessie_1105 = _jessie_1103 in
        (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1105 _jessie_1102 ))))))
      end
     else
      (let _jessie_1095 =
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 11 13#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5252 79 92# "expl:Integer cast"
       (Unsafe_int32.of_int (10))) )) in
      (let _jessie_1096 = base in
      (let _jessie_1097 = (0) in
      (let _jessie_1098 = _jessie_1096 in
      (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1098 _jessie_1095 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 14 16#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5254 35 48# "expl:Integer cast"
       (Unsafe_int32.of_int (16))) )) ))
     then
      (if
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5260 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 5261 68 81# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1_4 :=
        (let _jessie_1119 =
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5268 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_1119 ))));
        (if
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1_4 ))
         (#"whole_program.jc" 5272 68 82# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_12 :=
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5276 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_12); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
  let _parse_integer_fixup_radix_ensures_shift
  #"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, behavior shift" =
  fun
   (s_12 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
   Uint32.t)) (unsigned_intP_base_88_alloc_table : (alloc_table
   unsigned_intP)) (voidP_s_87_alloc_table : (alloc_table voidP))
   (voidP_s_87_tag_table : (tag_table voidP)) (charP_charM_s_87 : (memory
   voidP Int8.t)) 
   requires {
   (((Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
     (#"whole_program.jc" 5197 35 49# "expl:Integer cast" (Uint32.of_int
     (16))))
    /\
    ((Int8.(=) (select charP_charM_s_87 (shift s_12 (0)))
     (#"whole_program.jc" 5198 31 43# "expl:Integer cast" (Int8.of_int
     (48))))
    /\
    ((=) (tolower (Int8.to_int (select charP_charM_s_87 (shift s_12 (1)))))
    (Int8.to_int (#"whole_program.jc" 5200 15 28# "expl:Integer cast"
    (Int8.of_int (120)))))))
   /\
   (((allocated voidP_s_87_alloc_table s_12) ->
     (((=) (typeof voidP_s_87_tag_table s_12) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_87_alloc_table s_12) i) /\
       ((<) i (offset_max voidP_s_87_alloc_table s_12))) ->
       ((=) (typeof voidP_s_87_tag_table (shift s_12 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((<=) (offset_min voidP_s_87_alloc_table s_12) (0)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415#
     ((>=) (offset_max voidP_s_87_alloc_table s_12) (2)))
    /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415#
    ((#"whole_program.jc" 5170 12 415# ((=) true true)) /\
    (#"whole_program.jc" 5170 12 415# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((<=) (offset_min unsigned_intP_base_88_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 5170 12 415#
   ((#"whole_program.jc" 5170 12 415#
    ((>=) (offset_max unsigned_intP_base_88_alloc_table base) (0)))
   /\ (#"whole_program.jc" 5170 12 415# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 26 15 37#
     "expl:Ensures clause" ((=) result (shift s_12 (2))))) }  ->
   (let mutable_s_12 = ref s_12 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_19 = ref (Unsafe_int8.any_  () ) in
    (let tmp_0_20 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1_4 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 5 14 15#
     "expl:Integer cast"
     (Unsafe_uint32_of_Unsafe_int32.cast 
      (#"whole_program.jc" 5210 35 47# "expl:Integer cast"
      (Unsafe_int32.of_int (0))) )) ))
    then
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5216 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 5217 68 81# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp_0_19 :=
       (let _jessie_1128 =
       (acc  charP_charM_s_87
        (shift_  !mutable_s_12
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 5223 68 80# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_1128 ))));
       (if
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_19 ))
        (#"whole_program.jc" 5227 68 82# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0_20 :=
         (let _jessie_1135 =
         (acc  charP_charM_s_87
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5234 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_1135 ))));
         (if
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0_20
          (#"whole_program.jc" 5238 68 80# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_1142 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 8 12 14#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5241 80 93# "expl:Integer cast"
           (Unsafe_int32.of_int (16))) )) in
          (let _jessie_1143 = base in
          (let _jessie_1144 = (0) in
          (let _jessie_1145 = _jessie_1143 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1145 _jessie_1142
           )))))
         else
          (let _jessie_1137 =
          (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
          "expl:Integer cast"
          (Unsafe_uint32_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5244 80 92# "expl:Integer cast"
           (Unsafe_int32.of_int (8))) )) in
          (let _jessie_1138 = base in
          (let _jessie_1139 = (0) in
          (let _jessie_1140 = _jessie_1138 in
          (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1140 _jessie_1137
           )))))) end
       else
        (let _jessie_1130 =
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 10 12 13#
        "expl:Integer cast"
        (Unsafe_uint32_of_Unsafe_int32.cast 
         (#"whole_program.jc" 5248 80 92# "expl:Integer cast"
         (Unsafe_int32.of_int (8))) )) in
        (let _jessie_1131 = base in
        (let _jessie_1132 = (0) in
        (let _jessie_1133 = _jessie_1131 in
        (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1133 _jessie_1130 ))))))
      end
     else
      (let _jessie_1123 =
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 12 11 13#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5252 79 92# "expl:Integer cast"
       (Unsafe_int32.of_int (10))) )) in
      (let _jessie_1124 = base in
      (let _jessie_1125 = (0) in
      (let _jessie_1126 = _jessie_1124 in
      (upd  unsigned_intP_unsigned_intM_base_88 _jessie_1126 _jessie_1123 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_88 base )
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 14 16#
      "expl:Integer cast"
      (Unsafe_uint32_of_Unsafe_int32.cast 
       (#"whole_program.jc" 5254 35 48# "expl:Integer cast"
       (Unsafe_int32.of_int (16))) )) ))
     then
      (if
      (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5260 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 5261 68 81# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1_4 :=
        (let _jessie_1147 =
        (acc  charP_charM_s_87
         (shift_  !mutable_s_12
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 5268 68 80# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_1147 ))));
        (if
        (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1_4 ))
         (#"whole_program.jc" 5272 68 82# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_12 :=
          (shift_  !mutable_s_12
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5276 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_12); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
end

theory Axiomatic_CheckBytes8

  use enum.Uint8 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function check_bytes8 (pointer voidP) Uint8.t int (memory voidP Uint8.t) :
  (pointer voidP)
  
  lemma Check_bytes8_shift1
  #"/home/work/workspace/self/verker-gh/check_bytes8.h" 11 7 212#
  "expl:Lemma check_bytes8_shift1" :
  (forall voidP_start_0_92_alloc_table_at_L : (alloc_table voidP).
   (forall unsigned_charP_unsigned_charM_start_0_92_at_L : (memory voidP
    Uint8.t).
    (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 11 7 212#
    (forall start_0_0 : (pointer voidP).
     (forall value_0_0 : Uint8.t.
      (forall bytes_0_0 : int.
       ((((>) bytes_0_0 (0)) /\
        ((if ((<=) (0) (Int.(-) bytes_0_0 (1))) then
          (((<=) (offset_min voidP_start_0_92_alloc_table_at_L start_0_0)
           (0))
          /\
          (((>=) (offset_max voidP_start_0_92_alloc_table_at_L start_0_0)
           (Int.(-) bytes_0_0 (1)))
          /\
          (forall __framac_tmp1 : int.
           ((((<=) (0) __framac_tmp1) /\
            ((<=) __framac_tmp1 (Int.(-) bytes_0_0 (1)))) -> ((=) true true)))))
          else ((=) true true))
        /\
        (Uint8.(=)
        (select unsigned_charP_unsigned_charM_start_0_92_at_L start_0_0)
        value_0_0))) ->
        ((=)
        (check_bytes8 start_0_0 value_0_0 bytes_0_0
        unsigned_charP_unsigned_charM_start_0_92_at_L)
        (check_bytes8 (shift start_0_0 (1)) value_0_0 (Int.(-) bytes_0_0 (1))
        unsigned_charP_unsigned_charM_start_0_92_at_L)))))))))
  
  lemma Check_bytes8_stop
  #"/home/work/workspace/self/verker-gh/check_bytes8.h" 15 7 176#
  "expl:Lemma check_bytes8_stop" :
  (forall voidP_start_1_95_alloc_table_at_L : (alloc_table voidP).
   (forall unsigned_charP_unsigned_charM_start_1_95_at_L : (memory voidP
    Uint8.t).
    (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 15 7 176#
    (forall start_1_0 : (pointer voidP).
     (forall value_1 : Uint8.t.
      (forall bytes_1 : int.
       ((((>) bytes_1 (0)) /\
        ((if ((<=) (0) (Int.(-) bytes_1 (1))) then
          (((<=) (offset_min voidP_start_1_95_alloc_table_at_L start_1_0)
           (0))
          /\
          (((>=) (offset_max voidP_start_1_95_alloc_table_at_L start_1_0)
           (Int.(-) bytes_1 (1)))
          /\
          (forall __framac_tmp2 : int.
           ((((<=) (0) __framac_tmp2) /\
            ((<=) __framac_tmp2 (Int.(-) bytes_1 (1)))) -> ((=) true true)))))
          else ((=) true true))
        /\
        (Uint8.(<>)
        (select unsigned_charP_unsigned_charM_start_1_95_at_L start_1_0)
        value_1))) ->
        ((=)
        (check_bytes8 start_1_0 value_1 bytes_1
        unsigned_charP_unsigned_charM_start_1_95_at_L) start_1_0))))))))
  
  lemma Check_bytes8_stop_bytes_zero
  #"/home/work/workspace/self/verker-gh/check_bytes8.h" 19 7 81#
  "expl:Lemma check_bytes8_stop_bytes_zero" :
  (forall unsigned_charP_unsigned_charM_start_2_97_at_L : (memory voidP
   Uint8.t).
   (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 19 7 81#
   (forall start_2 : (pointer voidP).
    (forall value_2 : Uint8.t.
     ((=)
     (check_bytes8 start_2 value_2 (0)
     unsigned_charP_unsigned_charM_start_2_97_at_L) null)))))
  
  axiom Check_bytes8_definition :
  (forall start_0 : (pointer voidP).
   (forall value : Uint8.t.
    (forall bytes : int.
     (forall unsigned_charP_unsigned_charM_start_2_at_L : (memory voidP
      Uint8.t)
      [(check_bytes8 start_0 value bytes
       unsigned_charP_unsigned_charM_start_2_at_L)] .
      ((=)
      (check_bytes8 start_0 value bytes
      unsigned_charP_unsigned_charM_start_2_at_L)
      (if ((=) bytes (0)) then null else
       (if
        (Uint8.(<>)
        (select unsigned_charP_unsigned_charM_start_2_at_L start_0) value)
        then start_0 else
        (check_bytes8 (shift start_0 (1)) value (Int.(-) bytes (1))
        unsigned_charP_unsigned_charM_start_2_at_L))))))))
  
end

module Function_check_bytes8_0_safety
#"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
"expl:check_bytes8, safety"

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint32 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  let check_bytes8_0
  #"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, safety" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_4_alloc_table : (alloc_table voidP)) (voidP_start_4_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_start_4 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_start_4_alloc_table start_1) ->
     (((=) (typeof voidP_start_4_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_4_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_4_alloc_table start_1))) ->
       ((=) (typeof voidP_start_4_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_4_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_4_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp3 : int.
     ((((<=) (0) __framac_tmp3) /\
      ((<=) __framac_tmp3 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true)))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Safe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart :=
        (let _jessie_121 = !mutable_start_1 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 5 11 13#
        "expl:Pointer index bounds" true) }); _jessie_121 end));
        begin
        (obytes :=
         (let _jessie_117 = !mutable_bytes_0 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 6 11 19#
         "expl:Pointer index bounds" true) }); _jessie_117 end));
         'Loop_4:
         loop
         invariant { (#"whole_program.jc" 232 6 2294# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 13 18 23#
             (Uint32.to_int
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 13 18 23#
             !mutable_bytes_0))) }
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_4)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_4)))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 11 20 70#
             (forall i_1 : (pointer voidP).
              (((same_block !ostart i_1) /\
               (((<=) (sub_pointer !ostart i_1) (0)) /\
               ((same_block i_1 !mutable_start_1) /\
               ((<) (sub_pointer i_1 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_1)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 234 38 51# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 15 8 13#
            (Safe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 264 47 60# "expl:Integer cast"
             (Safe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 21#
             (Safe_int32.(<>) 
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Safe_int32_of_Safe_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 12#
               "expl:Pointer dereference"
               (acc  voidP_start_4_alloc_table
                unsigned_charP_unsigned_charM_start_4 !mutable_start_1 )) ))
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 16 21#
              "expl:Integer cast" (Safe_int32_of_Safe_uint8.cast  value_0 ))
              ))
             then
              begin
              (__retres :=
               (let _jessie_118 = !mutable_start_1 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 17 3 24#
               "expl:Pointer index bounds" true) }); _jessie_118 end));
               (raise (Return_label_exc ())) end else ());
              begin
              (mutable_start_1 :=
               (let _jessie_119 =
               (shift_typesafe  !mutable_start_1
                (Safe_int32.to_int 
                 (#"whole_program.jc" 273 51 63# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 18 2 9#
               "expl:Pointer index bounds" true) }); _jessie_119 end));
               (mutable_bytes_0 :=
                (let _jessie_120 =
                (Safe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 274 61 74# "expl:Integer cast"
                 (Safe_uint32.of_int (1))) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 19 2 9#
                "expl:Pointer index bounds" true) }); _jessie_120 end)) end
             end end; (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_4 -> () end end end;
         (raise (Goto_while_0_break_exc ())) end end with
       Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 281 59 72#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_4) null)) } ; () end;
        (__retres :=
         (let _jessie_122 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 23 1 20#
         "expl:Pointer index bounds" true) }); _jessie_122 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_123 = !__retres in
       begin
       (assert {
       (#"whole_program.jc" 294 7 22# "expl:Pointer index bounds" true) });
        _jessie_123 end)); (raise Return) end end))); absurd  end with Return
    -> !return end)))
  
end

module Function_check_bytes8_0_behaviors
#"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
"expl:check_bytes8, behaviors"

  use Unsafe_uint32 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  let check_bytes8_ensures_default
  #"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, default behavior" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_4_alloc_table : (alloc_table voidP)) (voidP_start_4_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_start_4 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_start_4_alloc_table start_1) ->
     (((=) (typeof voidP_start_4_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_4_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_4_alloc_table start_1))) ->
       ((=) (typeof voidP_start_4_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_4_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_4_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp3 : int.
     ((((<=) (0) __framac_tmp3) /\
      ((<=) __framac_tmp3 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 26 12 56#
     "expl:Ensures clause"
     ((=) result
     (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
     unsigned_charP_unsigned_charM_start_4)))) } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 178 10 1475# "expl:Behavior disjointness check"
    (not
    ((exists i_3_0 : (pointer voidP).
      ((same_block !mutable_start_1 i_3_0) /\
      (((<=) (sub_pointer !mutable_start_1 i_3_0) (0)) /\
      ((same_block i_3_0
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      (((<)
       (sub_pointer i_3_0
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))
      /\
      (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_4 i_3_0)
      value_0))))))
    /\
    (forall i_2_0 : (pointer voidP).
     (((same_block !mutable_start_1 i_2_0) /\
      (((<=) (sub_pointer !mutable_start_1 i_2_0) (0)) /\
      ((same_block i_2_0
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      ((<)
      (sub_pointer i_2_0
      (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))))) ->
      (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_2_0)
      value_0)))))) });
     (check {
     (#"whole_program.jc" 201 10 1365# "expl:Behavior completeness check"
     ((forall i_2_1 : (pointer voidP).
       (((same_block !mutable_start_1 i_2_1) /\
        (((<=) (sub_pointer !mutable_start_1 i_2_1) (0)) /\
        ((same_block i_2_1
         (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
        /\
        ((<)
        (sub_pointer i_2_1
        (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))))) ->
        (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_2_1)
        value_0)))
     \/
     (exists i_3_1 : (pointer voidP).
      ((same_block !mutable_start_1 i_3_1) /\
      (((<=) (sub_pointer !mutable_start_1 i_3_1) (0)) /\
      ((same_block i_3_1
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      (((<)
       (sub_pointer i_3_1
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))
      /\
      (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_4 i_3_1)
      value_0)))))))) });
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_1:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
              ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 30#
               (Uint32.(<=) (#"whole_program.jc" 234 38 51#
               "expl:Integer cast" (Uint32.of_int (0))) !mutable_bytes_0))
              /\
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 25 40#
              (Uint32.(<=) !mutable_bytes_0 !obytes)))))
             &&
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
               (same_block !ostart !mutable_start_1))
              /\
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
               ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
               (same_block !mutable_start_1
               (shift !ostart (Uint32.to_int !obytes))))
              /\
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
              ((<=)
              (sub_pointer !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 10 20 52#
              ((=) (sub_pointer !mutable_start_1 !ostart)
              (Int.(-) (Uint32.to_int !obytes)
              (Uint32.to_int !mutable_bytes_0))))
             &&
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 11 20 70#
              (forall i_1 : (pointer voidP).
               (((same_block !ostart i_1) /\
                (((<=) (sub_pointer !ostart i_1) (0)) /\
                ((same_block i_1 !mutable_start_1) /\
                ((<) (sub_pointer i_1 !mutable_start_1) (0))))) ->
                (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_1)
                value_0))))
             &&
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_4)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_4))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 264 47 60# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_4 !mutable_start_1 )
               ))
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 273 51 63# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 274 61 74# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 21 12 22#
        "expl:Assertion in line 21"
        (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 281 59 72#
        "expl:Integer cast" (Uint32.of_int (0))))) }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 22 12 56#
        "expl:Assertion in line 22"
        ((=)
        (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
        unsigned_charP_unsigned_charM_start_4) null)) }); () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
  let check_bytes8_ensures_found
  #"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, behavior found" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_4_alloc_table : (alloc_table voidP)) (voidP_start_4_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_start_4 : (memory
   voidP Uint8.t)) 
   requires {
   ((exists i_3 : (pointer voidP).
     ((same_block start_1 i_3) /\
     (((<=) (sub_pointer start_1 i_3) (0)) /\
     ((same_block i_3 (shift start_1 (Uint32.to_int bytes_0))) /\
     (((<) (sub_pointer i_3 (shift start_1 (Uint32.to_int bytes_0))) (0)) /\
     (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_4 i_3) value_0))))))
   /\
   (((allocated voidP_start_4_alloc_table start_1) ->
     (((=) (typeof voidP_start_4_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_4_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_4_alloc_table start_1))) ->
       ((=) (typeof voidP_start_4_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_4_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_4_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp3 : int.
     ((((<=) (0) __framac_tmp3) /\
      ((<=) __framac_tmp3 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
      "expl:Ensures clause"
      (same_block start_1
      (downcast voidP_start_4_tag_table result unsigned_charP_tag)))
     /\
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer start_1
      (downcast voidP_start_4_tag_table result unsigned_charP_tag)) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
      "expl:Ensures clause"
      (same_block
      (downcast voidP_start_4_tag_table result unsigned_charP_tag)
      (shift start_1 (Uint32.to_int bytes_0))))
     /\
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
      "expl:Ensures clause"
      ((<)
      (sub_pointer
      (downcast voidP_start_4_tag_table result unsigned_charP_tag)
      (shift start_1 (Uint32.to_int bytes_0))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 30 15 40#
      "expl:Ensures clause"
      (Uint8.(<>)
      (select unsigned_charP_unsigned_charM_start_4
      (downcast voidP_start_4_tag_table result unsigned_charP_tag)) value_0))
     /\
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 31 15 72#
     "expl:Ensures clause"
     (forall j_0 : (pointer voidP).
      (((same_block start_1 j_0) /\
       (((<=) (sub_pointer start_1 j_0) (0)) /\
       ((same_block j_0
        (downcast voidP_start_4_tag_table result unsigned_charP_tag))
       /\
       ((<)
       (sub_pointer j_0
       (downcast voidP_start_4_tag_table result unsigned_charP_tag)) (0)))))
       ->
       (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 j_0) value_0))))))))))))))))
     } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_2:
         loop
         invariant { (#"whole_program.jc" 232 6 2294# true) } 
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_4)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_4)))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 11 20 70#
             (forall i_1 : (pointer voidP).
              (((same_block !ostart i_1) /\
               (((<=) (sub_pointer !ostart i_1) (0)) /\
               ((same_block i_1 !mutable_start_1) /\
               ((<) (sub_pointer i_1 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_1)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 234 38 51# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 264 47 60# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_4 !mutable_start_1 )
               ))
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 273 51 63# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 274 61 74# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 281 59 72#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_4) null)) } ; () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
  let check_bytes8_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, behavior not_exists" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_4_alloc_table : (alloc_table voidP)) (voidP_start_4_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_start_4 : (memory
   voidP Uint8.t)) 
   requires {
   ((forall i_2 : (pointer voidP).
     (((same_block start_1 i_2) /\
      (((<=) (sub_pointer start_1 i_2) (0)) /\
      ((same_block i_2 (shift start_1 (Uint32.to_int bytes_0))) /\
      ((<) (sub_pointer i_2 (shift start_1 (Uint32.to_int bytes_0))) (0)))))
      ->
      (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_2) value_0)))
   /\
   (((allocated voidP_start_4_alloc_table start_1) ->
     (((=) (typeof voidP_start_4_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_4_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_4_alloc_table start_1))) ->
       ((=) (typeof voidP_start_4_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_4_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_4_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp3 : int.
     ((((<=) (0) __framac_tmp3) /\
      ((<=) __framac_tmp3 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 34 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_3:
         loop
         invariant { (#"whole_program.jc" 232 6 2294# true) } 
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_4)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_4)))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 11 20 70#
             (forall i_1 : (pointer voidP).
              (((same_block !ostart i_1) /\
               (((<=) (sub_pointer !ostart i_1) (0)) /\
               ((same_block i_1 !mutable_start_1) /\
               ((<) (sub_pointer i_1 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_1)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 234 38 51# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 264 47 60# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_4 !mutable_start_1 )
               ))
              (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 273 51 63# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 274 61 74# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 281 59 72#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_4) null)) } ; () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
end

theory Root__BoolP

  use why3.Bool.Bool 
  
  type _BoolP 
  
end

module Safe_enum__bool_of_Safe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Function_kstrtobool_safety
#"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
"expl:kstrtobool, safety"

  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool_of_Safe_int32 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_eq_pointer_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import core.Jessie_acc_offset_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, safety" =
  fun
   (s_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_83 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_83_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_82_alloc_table : (alloc_table voidP))
   (voidP_s_0_82_tag_table : (tag_table voidP)) (charP_charM_s_0_82 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_82_alloc_table s_0) ->
     (((=) (typeof voidP_s_0_82_tag_table s_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_82_alloc_table s_0) i) /\
       ((<) i (offset_max voidP_s_0_82_alloc_table s_0))) ->
       ((=) (typeof voidP_s_0_82_tag_table (shift s_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_0 null) \/
    (((<=) (offset_min voidP_s_0_82_alloc_table s_0) (0)) /\
    (((>=) (offset_max voidP_s_0_82_alloc_table s_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((<=) (offset_min _BoolP_res_83_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((>=) (offset_max _BoolP_res_83_alloc_table res) (0)))
   /\ (#"whole_program.jc" 5054 12 455# ((=) true true)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_16 = ref (Safe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb 
        (#"whole_program.jc" 5090 25 36#
        (neq_pointer  voidP_s_0_82_alloc_table voidP_s_0_82_alloc_table s_0
         (null  ) )) ))
       then
        begin
        (__retres_16 :=
         (let _jessie_1037 =
         (#"whole_program.jc" 5091 35 49# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 6 2 13#
         "expl:Pointer index bounds" true) }); _jessie_1037 end));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_94 =
        (let _jessie_1038 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Safe_int32_of_Safe_int8.cast 
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
         "expl:Pointer dereference"
         (acc  voidP_s_0_82_alloc_table charP_charM_s_0_82 s_0 )) )) in
        begin (assert { ("expl:Pointer index bounds" true) }); _jessie_1038
        end) in
        begin
        (if
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
         (Safe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          "expl:Integer cast" (Safe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
         (Safe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          "expl:Integer cast" (Safe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
        (Safe_int32.(=)  _jessie_94
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         "expl:Integer cast" (Safe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_1041 =
         (let _jessie_1040 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Safe_enum__bool_of_Safe_int32.cast 
          (#"whole_program.jc" 5100 60 72# "expl:Integer cast"
          (Safe_int32.of_int (1))) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 2 13#
         "expl:Pointer index bounds" true) }); _jessie_1040 end) in
         (let _jessie_1042 = res in
         (let _jessie_1043 = (0) in
         (let _jessie_1044 = _jessie_1042 in
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 2 13#
         "expl:Pointer dereference"
         (upd  _BoolP_res_83_alloc_table _BoolP__BoolM_res_83 _jessie_1042
          _jessie_1041 ))))));
          begin
          (__retres_16 :=
           (let _jessie_1039 =
           (#"whole_program.jc" 5101 37 49# "expl:Integer cast"
           (Safe_int32.of_int (0))) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 13 2 11#
           "expl:Pointer index bounds" true) }); _jessie_1039 end));
           (raise (Return_label_exc ())) end end else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Safe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Safe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Safe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Safe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Safe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Safe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Safe_int32.of_int (121))) ))))))))))))
         then
          begin
          (let _jessie_1047 =
          (let _jessie_1046 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Safe_enum__bool_of_Safe_int32.cast 
           (#"whole_program.jc" 5108 60 72# "expl:Integer cast"
           (Safe_int32.of_int (0))) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 2 14#
          "expl:Pointer index bounds" true) }); _jessie_1046 end) in
          (let _jessie_1048 = res in
          (let _jessie_1049 = (0) in
          (let _jessie_1050 = _jessie_1048 in
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 2 14#
          "expl:Pointer dereference"
          (upd  _BoolP_res_83_alloc_table _BoolP__BoolM_res_83 _jessie_1048
           _jessie_1047 ))))));
           begin
           (__retres_16 :=
            (let _jessie_1045 =
            (#"whole_program.jc" 5109 37 49# "expl:Integer cast"
            (Safe_int32.of_int (0))) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 18 2 11#
            "expl:Pointer index bounds" true) }); _jessie_1045 end));
            (raise (Return_label_exc ())) end end else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
           "expl:Integer cast" (Safe_int32.of_int (79))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
           "expl:Integer cast" (Safe_int32.of_int (111))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Safe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Safe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Safe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Safe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Safe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Safe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Safe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Safe_int32.of_int (121))) ))))))))))))))))
         then
          try
           begin
           ();
            (let _jessie_92 =
            (let _jessie_1051 =
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
            "expl:Integer cast"
            (Safe_int32_of_Safe_int8.cast 
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
             "expl:Pointer dereference"
             (acc_offset_typesafe  voidP_s_0_82_alloc_table
              charP_charM_s_0_82 s_0 (1) )) )) in
            begin
            (assert { ("expl:Pointer index bounds" true) }); _jessie_1051 end)
            in
            begin
            (if
            (#"whole_program.jc" 5117 19 92#
            ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
             (Safe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              "expl:Integer cast" (Safe_int32.of_int (78))) ))
            ||
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
            (Safe_int32.(=)  _jessie_92
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             "expl:Integer cast" (Safe_int32.of_int (110))) ))))
            then
             begin
             (let _jessie_1054 =
             (let _jessie_1053 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
             "expl:Integer cast"
             (Safe_enum__bool_of_Safe_int32.cast 
              (#"whole_program.jc" 5120 65 77# "expl:Integer cast"
              (Safe_int32.of_int (1))) )) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 3 14#
             "expl:Pointer index bounds" true) }); _jessie_1053 end) in
             (let _jessie_1055 = res in
             (let _jessie_1056 = (0) in
             (let _jessie_1057 = _jessie_1055 in
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 3 14#
             "expl:Pointer dereference"
             (upd  _BoolP_res_83_alloc_table _BoolP__BoolM_res_83
              _jessie_1055 _jessie_1054 ))))));
              begin
              (__retres_16 :=
               (let _jessie_1052 =
               (#"whole_program.jc" 5121 42 54# "expl:Integer cast"
               (Safe_int32.of_int (0))) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 25 3 12#
               "expl:Pointer index bounds" true) }); _jessie_1052 end));
               (raise (Return_label_exc ())) end end else ());
             (if
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
              (Safe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
               "expl:Integer cast" (Safe_int32.of_int (70))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
              (Safe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
               "expl:Integer cast" (Safe_int32.of_int (102))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              (Safe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
               "expl:Integer cast" (Safe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             (Safe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
              "expl:Integer cast" (Safe_int32.of_int (110))) ))))))))
             then
              begin
              (let _jessie_1060 =
              (let _jessie_1059 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
              "expl:Integer cast"
              (Safe_enum__bool_of_Safe_int32.cast 
               (#"whole_program.jc" 5127 65 77# "expl:Integer cast"
               (Safe_int32.of_int (0))) )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 3 15#
              "expl:Pointer index bounds" true) }); _jessie_1059 end) in
              (let _jessie_1061 = res in
              (let _jessie_1062 = (0) in
              (let _jessie_1063 = _jessie_1061 in
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 3 15#
              "expl:Pointer dereference"
              (upd  _BoolP_res_83_alloc_table _BoolP__BoolM_res_83
               _jessie_1061 _jessie_1060 ))))));
               begin
               (__retres_16 :=
                (let _jessie_1058 =
                (#"whole_program.jc" 5128 42 54# "expl:Integer cast"
                (Safe_int32.of_int (0))) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 29 3 12#
                "expl:Pointer index bounds" true) }); _jessie_1058 end));
                (raise (Return_label_exc ())) end end else ());
             (if (true)
             then begin (); (raise (Goto_switch_1_break_exc ())) end 
             else ()) end); (raise (Goto_switch_1_break_exc ())) end with
           Goto_switch_1_break_exc _jessie_89 ->
           'Switch_1_break: 'Switch_1_break: () end else ());
         (if (true) then begin (); (raise (Goto_switch_0_break_exc ())) end
         else ()) end); (raise (Goto_switch_0_break_exc ())) end with
       Goto_switch_0_break_exc _jessie_90 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_16 :=
         (let _jessie_1064 =
         (#"whole_program.jc" 5147 32 46# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 37 1 12#
         "expl:Pointer index bounds" true) }); _jessie_1064 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_91 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_1065 = !__retres_16 in
       begin
       (assert {
       (#"whole_program.jc" 5149 7 25# "expl:Pointer index bounds" true) });
        _jessie_1065 end)); (raise Return) end end); absurd  end with Return
    -> !return end)
  
end

theory Logic_kstrtobool_fmt_true

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_true (s_43 : (pointer voidP))
  (charP_charM_s_43_80_at_L : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (0)))
      (#"whole_program.jc" 5042 28 40# "expl:Integer cast" (Int8.of_int
      (89))))
     \/
     ((Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (0)))
      (#"whole_program.jc" 5043 29 42# "expl:Integer cast" (Int8.of_int
      (121))))
     \/
     ((Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (0)))
      (#"whole_program.jc" 5044 28 40# "expl:Integer cast" (Int8.of_int
      (49))))
     \/
     (((Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (0)))
       (#"whole_program.jc" 5045 29 42# "expl:Integer cast" (Int8.of_int
       (111))))
      \/
      (Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (0)))
      (#"whole_program.jc" 5046 30 42# "expl:Integer cast" (Int8.of_int
      (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (1)))
      (#"whole_program.jc" 5047 30 42# "expl:Integer cast" (Int8.of_int
      (78))))
     \/
     (Int8.(=) (select charP_charM_s_43_80_at_L (shift s_43 (1)))
     (#"whole_program.jc" 5048 31 44# "expl:Integer cast" (Int8.of_int
     (110)))))))))
  
end

theory Logic_kstrtobool_fmt_false

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_false (s_42 : (pointer voidP))
  (charP_charM_s_42_79_at_L : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (0)))
      (#"whole_program.jc" 5033 28 40# "expl:Integer cast" (Int8.of_int
      (78))))
     \/
     ((Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (0)))
      (#"whole_program.jc" 5034 29 42# "expl:Integer cast" (Int8.of_int
      (110))))
     \/
     ((Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (0)))
      (#"whole_program.jc" 5035 28 40# "expl:Integer cast" (Int8.of_int
      (48))))
     \/
     (((Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (0)))
       (#"whole_program.jc" 5036 29 42# "expl:Integer cast" (Int8.of_int
       (111))))
      \/
      (Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (0)))
      (#"whole_program.jc" 5037 30 42# "expl:Integer cast" (Int8.of_int
      (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (1)))
      (#"whole_program.jc" 5038 30 42# "expl:Integer cast" (Int8.of_int
      (70))))
     \/
     (Int8.(=) (select charP_charM_s_42_79_at_L (shift s_42 (1)))
     (#"whole_program.jc" 5039 31 44# "expl:Integer cast" (Int8.of_int
     (102)))))))))
  
end

theory Logic_kstrtobool_fmt

  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt (s_44 : (pointer voidP)) (charP_charM_s_44_81_at_L
  : (memory voidP Int8.t))
  =
     ((kstrtobool_fmt_true s_44 charP_charM_s_44_81_at_L) \/
     (kstrtobool_fmt_false s_44 charP_charM_s_44_81_at_L))
  
end

module Unsafe_enum__bool_of_Unsafe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Function_kstrtobool_behaviors
#"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
"expl:kstrtobool, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool_of_Unsafe_int32 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool_ensures_CORRECT
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior CORRECT" =
  fun
   (s_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_83 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_83_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_82_alloc_table : (alloc_table voidP))
   (voidP_s_0_82_tag_table : (tag_table voidP)) (charP_charM_s_0_82 : (memory
   voidP Int8.t)) 
   requires {
   ((((<>) s_0 null) /\ (kstrtobool_fmt s_0 charP_charM_s_0_82)) /\
   (((allocated voidP_s_0_82_alloc_table s_0) ->
     (((=) (typeof voidP_s_0_82_tag_table s_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_82_alloc_table s_0) i) /\
       ((<) i (offset_max voidP_s_0_82_alloc_table s_0))) ->
       ((=) (typeof voidP_s_0_82_tag_table (shift s_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_0 null) \/
    (((<=) (offset_min voidP_s_0_82_alloc_table s_0) (0)) /\
    (((>=) (offset_max voidP_s_0_82_alloc_table s_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((<=) (offset_min _BoolP_res_83_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((>=) (offset_max _BoolP_res_83_alloc_table res) (0)))
   /\ (#"whole_program.jc" 5054 12 455# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 5072 10 20# "expl:Assigns clause"
      (not_assigns _BoolP_res_83_alloc_table _BoolP_res_83_alloc_table (old
      !_BoolP__BoolM_res_83) !_BoolP__BoolM_res_83 (pset_singleton res)))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_true s_0 charP_charM_s_0_82) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
       (#"whole_program.jc" 5074 59 71# "expl:Integer cast"
       (Enum__bool.of_int (1))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_false s_0 charP_charM_s_0_82) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
       (#"whole_program.jc" 5076 61 73# "expl:Integer cast"
       (Enum__bool.of_int (0))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 5077 48 60# "expl:Integer cast"
     (Int32.of_int (0)))))))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_16 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0 (null  ) ) ))
       then
        begin
        (__retres_16 :=
         (#"whole_program.jc" 5091 35 49# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_94 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_82
          (shift_  s_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5096 55 67# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        begin
        (if
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
        (Unsafe_int32.(=)  _jessie_94
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_1012 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"whole_program.jc" 5100 60 72# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_1013 = res in
         (let _jessie_1014 = (0) in
         (let _jessie_1015 = _jessie_1013 in
         (upd  _BoolP__BoolM_res_83 _jessie_1015 _jessie_1012 )))));
          begin
          (__retres_16 :=
           (#"whole_program.jc" 5101 37 49# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))
         then
          begin
          (let _jessie_1018 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5108 60 72# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_1019 = res in
          (let _jessie_1020 = (0) in
          (let _jessie_1021 = _jessie_1019 in
          (upd  _BoolP__BoolM_res_83 _jessie_1021 _jessie_1018 )))));
           begin
           (__retres_16 :=
            (#"whole_program.jc" 5109 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))))))
         then
          try
           begin
           ();
            (let _jessie_92 =
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_s_0_82
              (shift_  s_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 5117 60 72# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ) ) )) in
            begin
            (if
            (#"whole_program.jc" 5117 19 92#
            ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
            ||
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
            (Unsafe_int32.(=)  _jessie_92
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
            then
             begin
             (let _jessie_1025 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
             "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"whole_program.jc" 5120 65 77# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) in
             (let _jessie_1026 = res in
             (let _jessie_1027 = (0) in
             (let _jessie_1028 = _jessie_1026 in
             (upd  _BoolP__BoolM_res_83 _jessie_1028 _jessie_1025 )))));
              begin
              (__retres_16 :=
               (#"whole_program.jc" 5121 42 54# "expl:Integer cast"
               (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
             end else ());
             (if
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))))
             then
              begin
              (let _jessie_1031 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"whole_program.jc" 5127 65 77# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) in
              (let _jessie_1032 = res in
              (let _jessie_1033 = (0) in
              (let _jessie_1034 = _jessie_1032 in
              (upd  _BoolP__BoolM_res_83 _jessie_1034 _jessie_1031 )))));
               begin
               (__retres_16 :=
                (#"whole_program.jc" 5128 42 54# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end else ());
             (if (true)
             then begin (); (raise (Goto_switch_1_break_exc ())) end 
             else ()) end); (raise (Goto_switch_1_break_exc ())) end with
           Goto_switch_1_break_exc _jessie_89 ->
           'Switch_1_break: 'Switch_1_break: () end else ());
         (if (true) then begin (); (raise (Goto_switch_0_break_exc ())) end
         else ()) end); (raise (Goto_switch_0_break_exc ())) end with
       Goto_switch_0_break_exc _jessie_90 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_16 :=
         (#"whole_program.jc" 5147 32 46# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_91 ->
      'Return_label:
      'Return_label: begin (return := !__retres_16); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_INVAL
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior INVAL" =
  fun
   (s_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_83 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_83_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_82_alloc_table : (alloc_table voidP))
   (voidP_s_0_82_tag_table : (tag_table voidP)) (charP_charM_s_0_82 : (memory
   voidP Int8.t)) 
   requires {
   ((((=) s_0 null) \/ (not (kstrtobool_fmt s_0 charP_charM_s_0_82))) /\
   (((allocated voidP_s_0_82_alloc_table s_0) ->
     (((=) (typeof voidP_s_0_82_tag_table s_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_82_alloc_table s_0) i) /\
       ((<) i (offset_max voidP_s_0_82_alloc_table s_0))) ->
       ((=) (typeof voidP_s_0_82_tag_table (shift s_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_0 null) \/
    (((<=) (offset_min voidP_s_0_82_alloc_table s_0) (0)) /\
    (((>=) (offset_max voidP_s_0_82_alloc_table s_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((<=) (offset_min _BoolP_res_83_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((>=) (offset_max _BoolP_res_83_alloc_table res) (0)))
   /\ (#"whole_program.jc" 5054 12 455# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 5068 10 18# "expl:Assigns clause"
      (not_assigns _BoolP_res_83_alloc_table _BoolP_res_83_alloc_table (old
      !_BoolP__BoolM_res_83) !_BoolP__BoolM_res_83 pset_empty))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 5069 33 50# "expl:Integer cast"
     (Int32.of_int (Int.(-_) (22)))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_16 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0 (null  ) ) ))
       then
        begin
        (__retres_16 :=
         (#"whole_program.jc" 5091 35 49# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_94 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_82
          (shift_  s_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5096 55 67# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        begin
        (if
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
        (Unsafe_int32.(=)  _jessie_94
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_983 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"whole_program.jc" 5100 60 72# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_984 = res in
         (let _jessie_985 = (0) in
         (let _jessie_986 = _jessie_984 in
         (upd  _BoolP__BoolM_res_83 _jessie_986 _jessie_983 )))));
          begin
          (__retres_16 :=
           (#"whole_program.jc" 5101 37 49# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))
         then
          begin
          (let _jessie_989 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5108 60 72# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_990 = res in
          (let _jessie_991 = (0) in
          (let _jessie_992 = _jessie_990 in
          (upd  _BoolP__BoolM_res_83 _jessie_992 _jessie_989 )))));
           begin
           (__retres_16 :=
            (#"whole_program.jc" 5109 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))))))
         then
          try
           begin
           ();
            (let _jessie_92 =
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_s_0_82
              (shift_  s_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 5117 60 72# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ) ) )) in
            begin
            (if
            (#"whole_program.jc" 5117 19 92#
            ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
            ||
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
            (Unsafe_int32.(=)  _jessie_92
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
            then
             begin
             (let _jessie_996 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
             "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"whole_program.jc" 5120 65 77# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) in
             (let _jessie_997 = res in
             (let _jessie_998 = (0) in
             (let _jessie_999 = _jessie_997 in
             (upd  _BoolP__BoolM_res_83 _jessie_999 _jessie_996 )))));
              begin
              (__retres_16 :=
               (#"whole_program.jc" 5121 42 54# "expl:Integer cast"
               (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
             end else ());
             (if
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))))
             then
              begin
              (let _jessie_1002 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"whole_program.jc" 5127 65 77# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) in
              (let _jessie_1003 = res in
              (let _jessie_1004 = (0) in
              (let _jessie_1005 = _jessie_1003 in
              (upd  _BoolP__BoolM_res_83 _jessie_1005 _jessie_1002 )))));
               begin
               (__retres_16 :=
                (#"whole_program.jc" 5128 42 54# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end else ());
             (if (true)
             then begin (); (raise (Goto_switch_1_break_exc ())) end 
             else ()) end); (raise (Goto_switch_1_break_exc ())) end with
           Goto_switch_1_break_exc _jessie_89 ->
           'Switch_1_break: 'Switch_1_break: () end else ());
         (if (true) then begin (); (raise (Goto_switch_0_break_exc ())) end
         else ()) end); (raise (Goto_switch_0_break_exc ())) end with
       Goto_switch_0_break_exc _jessie_90 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_16 :=
         (#"whole_program.jc" 5147 32 46# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_91 ->
      'Return_label:
      'Return_label: begin (return := !__retres_16); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_default
  #"/home/work/workspace/self/verker-gh/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, default behavior" =
  fun
   (s_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_83 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_83_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_82_alloc_table : (alloc_table voidP))
   (voidP_s_0_82_tag_table : (tag_table voidP)) (charP_charM_s_0_82 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_82_alloc_table s_0) ->
     (((=) (typeof voidP_s_0_82_tag_table s_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_82_alloc_table s_0) i) /\
       ((<) i (offset_max voidP_s_0_82_alloc_table s_0))) ->
       ((=) (typeof voidP_s_0_82_tag_table (shift s_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
    (((=) s_0 null) \/
    (((<=) (offset_min voidP_s_0_82_alloc_table s_0) (0)) /\
    (((>=) (offset_max voidP_s_0_82_alloc_table s_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((<=) (offset_min _BoolP_res_83_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 5054 12 455#
   ((#"whole_program.jc" 5054 12 455#
    ((>=) (offset_max _BoolP_res_83_alloc_table res) (0)))
   /\ (#"whole_program.jc" 5054 12 455# ((=) true true)))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 5062 46 58# "expl:Integer cast"
       (Int32.of_int (0))))
      \/
      (Int32.(=) result (#"whole_program.jc" 5063 47 64# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22)))))))
     /\
     (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
     "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 5064 47 64# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22))))) -> ((=) res res))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 5079 10 249# "expl:Behavior disjointness check"
    (not
    ((((=) s_0 null) \/ (not (kstrtobool_fmt s_0 charP_charM_s_0_82))) /\
    (((<>) s_0 null) /\ (kstrtobool_fmt s_0 charP_charM_s_0_82))))) });
     (check {
     (#"whole_program.jc" 5084 10 201# "expl:Behavior completeness check"
     ((((<>) s_0 null) /\ (kstrtobool_fmt s_0 charP_charM_s_0_82)) \/
     (((=) s_0 null) \/ (not (kstrtobool_fmt s_0 charP_charM_s_0_82))))) });
     (let __retres_16 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0 (null  ) ) ))
       then
        begin
        (__retres_16 :=
         (#"whole_program.jc" 5091 35 49# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Return_label_exc ())) end else ());
        (let _jessie_94 =
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_82
          (shift_  s_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 5096 55 67# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        begin
        (if
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 5096 14 87#
        ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
        (Unsafe_int32.(=)  _jessie_94
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_954 =
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 12 9 13#
         "expl:Integer cast"
         (Unsafe_enum__bool_of_Unsafe_int32.cast 
          (#"whole_program.jc" 5100 60 72# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) )) in
         (let _jessie_955 = res in
         (let _jessie_956 = (0) in
         (let _jessie_957 = _jessie_955 in
         (upd  _BoolP__BoolM_res_83 _jessie_957 _jessie_954 )))));
          begin
          (__retres_16 :=
           (#"whole_program.jc" 5101 37 49# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
        else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))
         then
          begin
          (let _jessie_960 =
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 17 9 14#
          "expl:Integer cast"
          (Unsafe_enum__bool_of_Unsafe_int32.cast 
           (#"whole_program.jc" 5108 60 72# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_961 = res in
          (let _jessie_962 = (0) in
          (let _jessie_963 = _jessie_961 in
          (upd  _BoolP__BoolM_res_83 _jessie_963 _jessie_960 )))));
           begin
           (__retres_16 :=
            (#"whole_program.jc" 5109 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
          end else ());
         (if
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 20 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 19 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 16 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 15 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 14 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (110))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 11 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
         ||
         (#"whole_program.jc" 5096 14 87#
         ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
          (Unsafe_int32.(=)  _jessie_94
           (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 10 8 9#
           "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
         ||
         (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
         (Unsafe_int32.(=)  _jessie_94
          (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 9 8 9#
          "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))))))))))))
         then
          try
           begin
           ();
            (let _jessie_92 =
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 21 10 14#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_s_0_82
              (shift_  s_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 5117 60 72# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ) ) )) in
            begin
            (if
            (#"whole_program.jc" 5117 19 92#
            ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
            ||
            (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
            (Unsafe_int32.(=)  _jessie_92
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
            then
             begin
             (let _jessie_967 =
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 24 10 14#
             "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"whole_program.jc" 5120 65 77# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) in
             (let _jessie_968 = res in
             (let _jessie_969 = (0) in
             (let _jessie_970 = _jessie_968 in
             (upd  _BoolP__BoolM_res_83 _jessie_970 _jessie_967 )))));
              begin
              (__retres_16 :=
               (#"whole_program.jc" 5121 42 54# "expl:Integer cast"
               (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end
             end else ());
             (if
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 27 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 26 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))
             ||
             (#"whole_program.jc" 5117 19 92#
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
              (Unsafe_int32.(=)  _jessie_92
               (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 23 9 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
             (Unsafe_int32.(=)  _jessie_92
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 22 9 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))))
             then
              begin
              (let _jessie_973 =
              (#"/home/work/workspace/self/verker-gh/kstrtobool.c" 28 10 15#
              "expl:Integer cast"
              (Unsafe_enum__bool_of_Unsafe_int32.cast 
               (#"whole_program.jc" 5127 65 77# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) in
              (let _jessie_974 = res in
              (let _jessie_975 = (0) in
              (let _jessie_976 = _jessie_974 in
              (upd  _BoolP__BoolM_res_83 _jessie_976 _jessie_973 )))));
               begin
               (__retres_16 :=
                (#"whole_program.jc" 5128 42 54# "expl:Integer cast"
                (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ()))
               end end else ());
             (if (true)
             then begin (); (raise (Goto_switch_1_break_exc ())) end 
             else ()) end); (raise (Goto_switch_1_break_exc ())) end with
           Goto_switch_1_break_exc _jessie_89 ->
           'Switch_1_break: 'Switch_1_break: () end else ());
         (if (true) then begin (); (raise (Goto_switch_0_break_exc ())) end
         else ()) end); (raise (Goto_switch_0_break_exc ())) end with
       Goto_switch_0_break_exc _jessie_90 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_16 :=
         (#"whole_program.jc" 5147 32 46# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_91 ->
      'Return_label:
      'Return_label: begin (return := !__retres_16); (raise Return) end end);
     absurd  end with Return -> !return end)
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memchr_safety
#"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44# "expl:memchr, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_bit_uint8_of_Safe_bit_int32 
  
  use Safe_bit_uint64_of_Safe_bit_int32 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int32_of_Safe_bit_uint8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memchr #"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44#
  "expl:Function memchr, safety" =
  fun
   (s_1 : (pointer voidP)) (c_11 : Int32.t) (n_1 : Uint64.t)
   (voidP_s_1_6_alloc_table : (alloc_table voidP)) (voidP_s_1_6_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP
   Uint8.t)) 
   requires {
   (((allocated voidP_s_1_6_alloc_table s_1) ->
     ((instanceof voidP_s_1_6_tag_table s_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_6_alloc_table s_1) i) /\
       ((<) i (offset_max voidP_s_1_6_alloc_table s_1))) ->
       (instanceof voidP_s_1_6_tag_table (shift s_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 299 12 768#
   ((#"/home/work/workspace/self/verker-gh/memchr.h" 16 13 38#
    (instanceof voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n_1) (1))) then
    (((<=)
     (offset_min voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n_1) (1)))
    /\
    (forall __framac_tmp4 : int.
     ((((<=) (0) __framac_tmp4) /\
      ((<=) __framac_tmp4 (Int.(-) (Bit_uint64.to_int n_1) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_n_1 = ref n_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_0 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (let _jessie_148 =
        (#"/home/work/workspace/self/verker-gh/memchr.c" 5 26 27#
        (downcast_  voidP_s_1_6_tag_table s_1 (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memchr.c" 5 1 6#
        "expl:Pointer index bounds" true) }); _jessie_148 end));
        'Loop_8:
        loop
        invariant { (#"whole_program.jc" 428 6 2570# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/memchr.c" 10 18 19#
            (Bit_uint64.to_int
            (#"/home/work/workspace/self/verker-gh/memchr.c" 10 18 19#
            !mutable_n_1))) }
         begin
         any unit
         requires { true } reads { c_11, mutable_n_1, s_1 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 9 20 70#
            (forall k_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
               (0))
              /\ ((same_block k_1 !p_4) /\ ((<) (sub_pointer k_1 !p_4) (0)))))
              ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 k_1)
              (#"whole_program.jc" 454 54 70# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n_1 'Init))
            (Bit_uint64.to_int !mutable_n_1))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
             (same_block !p_4
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n_1 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 430 38 51#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n_1))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n_1 (at !mutable_n_1 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0 :=
            (let _jessie_149 = !mutable_n_1 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 16#
            "expl:Pointer index bounds" true) }); _jessie_149 end));
            begin
            (mutable_n_1 :=
             (let _jessie_150 =
             (Safe_bit_uint64.(-%)  !mutable_n_1
              (#"whole_program.jc" 460 58 71# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 1)) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 16#
             "expl:Pointer index bounds" true) }); _jessie_150 end)); () end
           end;
            (if
            (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 23#
            (Safe_bit_uint64.(<>)  !tmp_0
             (#"/home/work/workspace/self/verker-gh/memchr.c" 12 22 23#
             "expl:Integer cast"
             (Safe_bit_uint64_of_Safe_bit_int32.cast 
              (#"whole_program.jc" 463 45 57# "expl:Integer cast"
              (Safe_bit_int32.of_int_const 0)) )) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            begin
            (tmp :=
             (let _jessie_151 = !p_4 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/memchr.c" 13 33 36#
             "expl:Pointer index bounds" true) }); _jessie_151 end));
             begin
             (p_4 :=
              (let _jessie_152 =
              (shift_typesafe  !p_4
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 468 46 58# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 33 36#
              "expl:Pointer index bounds" true) }); _jessie_152 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 36#
             (Safe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Safe_bit_uint8_of_Safe_bit_int32.cast_modulo  c_11 )) ))
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/memchr.c" 13 32 36#
               "expl:Pointer dereference"
               (acc  voidP_s_1_6_alloc_table
                unsigned_charP_unsigned_charM_s_1_6 !tmp )) )) ))
             then
              begin
              (__retres_0 :=
               (let _jessie_153 =
               (shift_typesafe  !p_4
                (Int.(-_) 
                 (Safe_bit_int32.to_int 
                  (#"whole_program.jc" 474 62 74# "expl:Integer cast"
                  (Safe_bit_int32.of_int_const 1)) ) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memchr.c" 14 3 26#
               "expl:Pointer index bounds" true) }); _jessie_153 end));
               (raise (Return_label_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_8 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_5 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n_1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n_1 (#"whole_program.jc" 484 57 75#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end;
        (__retres_0 :=
         (let _jessie_154 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/memchr.c" 18 1 20#
         "expl:Pointer index bounds" true) }); _jessie_154 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_155 = !__retres_0 in
       begin
       (assert {
       (#"whole_program.jc" 489 7 24# "expl:Pointer index bounds" true) });
        _jessie_155 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end))
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memchr_behaviors
#"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44#
"expl:memchr, behaviors"

  use Unsafe_bit_uint8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_uint64_of_Unsafe_bit_int32 
  
  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int32_of_Unsafe_bit_uint8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memchr_ensures_default
  #"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44#
  "expl:Function memchr, default behavior" =
  fun
   (s_1 : (pointer voidP)) (c_11 : Int32.t) (n_1 : Uint64.t)
   (voidP_s_1_6_alloc_table : (alloc_table voidP)) (voidP_s_1_6_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP
   Uint8.t)) 
   requires {
   (((allocated voidP_s_1_6_alloc_table s_1) ->
     ((instanceof voidP_s_1_6_tag_table s_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_6_alloc_table s_1) i) /\
       ((<) i (offset_max voidP_s_1_6_alloc_table s_1))) ->
       (instanceof voidP_s_1_6_tag_table (shift s_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 299 12 768#
   ((#"/home/work/workspace/self/verker-gh/memchr.h" 16 13 38#
    (instanceof voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n_1) (1))) then
    (((<=)
     (offset_min voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n_1) (1)))
    /\
    (forall __framac_tmp4 : int.
     ((((<=) (0) __framac_tmp4) /\
      ((<=) __framac_tmp4 (Int.(-) (Bit_uint64.to_int n_1) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_n_1 = ref n_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 360 10 1969# "expl:Behavior disjointness check"
    (not
    ((exists p_0_0 : (pointer voidP).
      ((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_0_0)
      /\
      (((<=)
       (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_0_0) (0))
      /\
      ((same_block p_0_0
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n_1)))
      /\
      (((<)
       (sub_pointer p_0_0
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n_1))) (0))
      /\
      (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_6 p_0_0)
      (#"whole_program.jc" 374 42 58# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))))
    /\
    (forall p_2 : (pointer voidP).
     (((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_2)
      /\
      (((<=)
       (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_2) (0))
      /\
      ((same_block p_2
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n_1)))
      /\
      ((<)
      (sub_pointer p_2
      (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      (Bit_uint64.to_int !mutable_n_1))) (0))))) ->
      (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p_2)
      (#"whole_program.jc" 388 43 59# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))) });
     (check {
     (#"whole_program.jc" 390 10 1800# "expl:Behavior completeness check"
     ((forall p_3 : (pointer voidP).
       (((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
         p_3)
        /\
        (((<=)
         (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
         p_3) (0))
        /\
        ((same_block p_3
         (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
         (Bit_uint64.to_int !mutable_n_1)))
        /\
        ((<)
        (sub_pointer p_3
        (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
        (Bit_uint64.to_int !mutable_n_1))) (0))))) ->
        (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p_3)
        (#"whole_program.jc" 402 58 74# "expl:Integer cast"
        (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))
     \/
     (exists p_0_1 : (pointer voidP).
      ((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_0_1)
      /\
      (((<=)
       (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p_0_1) (0))
      /\
      ((same_block p_0_1
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n_1)))
      /\
      (((<)
       (sub_pointer p_0_1
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n_1))) (0))
      /\
      (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_6 p_0_1)
      (#"whole_program.jc" 416 40 56# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))))) });
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_0 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_6_tag_table s_1 (unsigned_charP_tag  ) ));
        'Loop_5:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
             (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
             ((#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 26#
              (Bit_uint64.(<=) (#"whole_program.jc" 430 38 51#
              "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n_1))
             /\
             (#"/home/work/workspace/self/verker-gh/memchr.c" 6 25 40#
             (Bit_uint64.(<=) !mutable_n_1 (at !mutable_n_1 'Init))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
             (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
              (same_block
              (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4))
             /\
             (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
              ((<=)
              (sub_pointer
              (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4)
              (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
              (same_block !p_4
              (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
              (Bit_uint64.to_int (at !mutable_n_1 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
             ((<=)
             (sub_pointer !p_4
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n_1 'Init)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 8 20 43#
             ((=)
             (sub_pointer !p_4
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
             (Int.(-) (Bit_uint64.to_int (at !mutable_n_1 'Init))
             (Bit_uint64.to_int !mutable_n_1))))
            &&
            (#"/home/work/workspace/self/verker-gh/memchr.c" 9 20 70#
            (forall k_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
               (0))
              /\ ((same_block k_1 !p_4) /\ ((<) (sub_pointer k_1 !p_4) (0)))))
              ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 k_1)
              (#"whole_program.jc" 454 54 70# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           (tmp_0 := !mutable_n_1);
            begin
            (mutable_n_1 :=
             (Unsafe_bit_uint64.(-%)  !mutable_n_1
              (#"whole_program.jc" 460 58 71# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0
             (#"/home/work/workspace/self/verker-gh/memchr.c" 12 22 23#
             "expl:Integer cast"
             (Unsafe_bit_uint64_of_Unsafe_bit_int32.cast 
              (#"whole_program.jc" 463 45 57# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 0)) )) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            begin
            (tmp := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 468 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11 )) ))
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_6 !tmp ) )) ))
             then
              begin
              (__retres_0 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 474 62 74# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Return_label_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_8 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_5 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memchr.c" 17 12 31#
        "expl:Assertion in line 17"
        (Bit_uint64.(=) !mutable_n_1 (#"whole_program.jc" 484 57 75#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) });
         () end; (__retres_0 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
  let memchr_ensures_found
  #"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44#
  "expl:Function memchr, behavior found" =
  fun
   (s_1 : (pointer voidP)) (c_11 : Int32.t) (n_1 : Uint64.t)
   (voidP_s_1_6_alloc_table : (alloc_table voidP)) (voidP_s_1_6_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP
   Uint8.t)) 
   requires {
   ((exists p_0 : (pointer voidP).
     ((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      p_0)
     /\
     (((<=)
      (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      p_0) (0))
     /\
     ((same_block p_0
      (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      (Bit_uint64.to_int n_1)))
     /\
     (((<)
      (sub_pointer p_0
      (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      (Bit_uint64.to_int n_1))) (0))
     /\
     (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_6 p_0)
     (#"whole_program.jc" 323 37 53# "expl:Integer cast"
     (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))))
   /\
   (((allocated voidP_s_1_6_alloc_table s_1) ->
     ((instanceof voidP_s_1_6_tag_table s_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_6_alloc_table s_1) i) /\
       ((<) i (offset_max voidP_s_1_6_alloc_table s_1))) ->
       (instanceof voidP_s_1_6_tag_table (shift s_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 299 12 768#
   ((#"/home/work/workspace/self/verker-gh/memchr.h" 16 13 38#
    (instanceof voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n_1) (1))) then
    (((<=)
     (offset_min voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n_1) (1)))
    /\
    (forall __framac_tmp4 : int.
     ((((<=) (0) __framac_tmp4) /\
      ((<=) __framac_tmp4 (Int.(-) (Bit_uint64.to_int n_1) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
      "expl:Ensures clause" (same_block s_1 result))
     /\
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_1 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
      "expl:Ensures clause"
      (same_block result (shift s_1 (Bit_uint64.to_int n_1))))
     /\
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
      "expl:Ensures clause"
      ((<=) (sub_pointer result (shift s_1 (Bit_uint64.to_int n_1))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memchr.h" 22 15 77#
      "expl:Ensures clause"
      (forall p_1 : (pointer voidP).
       (((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
         p_1)
        /\
        (((<=)
         (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
         p_1) (0))
        /\
        ((same_block p_1
         (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
        /\
        ((<)
        (sub_pointer p_1
        (downcast voidP_s_1_6_tag_table result unsigned_charP_tag)) (0)))))
        ->
        (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p_1)
        (#"whole_program.jc" 346 37 62# "expl:Integer cast"
        (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
     /\
     (#"/home/work/workspace/self/verker-gh/memchr.h" 23 15 42#
     "expl:Ensures clause"
     (Bit_uint8.(=)
     (select unsigned_charP_unsigned_charM_s_1_6
     (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
     (#"whole_program.jc" 348 34 59# "expl:Integer cast"
     (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))))))))))) } diverges  ->
   (let mutable_n_1 = ref n_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_0 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_6_tag_table s_1 (unsigned_charP_tag  ) ));
        'Loop_6:
        loop
        invariant { (#"whole_program.jc" 428 6 2570# true) } 
         begin
         any unit
         requires { true } reads { c_11, mutable_n_1, s_1 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 9 20 70#
            (forall k_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
               (0))
              /\ ((same_block k_1 !p_4) /\ ((<) (sub_pointer k_1 !p_4) (0)))))
              ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 k_1)
              (#"whole_program.jc" 454 54 70# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n_1 'Init))
            (Bit_uint64.to_int !mutable_n_1))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
             (same_block !p_4
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n_1 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 430 38 51#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n_1))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n_1 (at !mutable_n_1 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0 := !mutable_n_1);
            begin
            (mutable_n_1 :=
             (Unsafe_bit_uint64.(-%)  !mutable_n_1
              (#"whole_program.jc" 460 58 71# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0
             (#"/home/work/workspace/self/verker-gh/memchr.c" 12 22 23#
             "expl:Integer cast"
             (Unsafe_bit_uint64_of_Unsafe_bit_int32.cast 
              (#"whole_program.jc" 463 45 57# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 0)) )) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            begin
            (tmp := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 468 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11 )) ))
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_6 !tmp ) )) ))
             then
              begin
              (__retres_0 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 474 62 74# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Return_label_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_8 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_5 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n_1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n_1 (#"whole_program.jc" 484 57 75#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end; (__retres_0 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
  let memchr_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/memchr.c" 3 5 44#
  "expl:Function memchr, behavior not_exists" =
  fun
   (s_1 : (pointer voidP)) (c_11 : Int32.t) (n_1 : Uint64.t)
   (voidP_s_1_6_alloc_table : (alloc_table voidP)) (voidP_s_1_6_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP
   Uint8.t)) 
   requires {
   ((forall p : (pointer voidP).
     (((same_block (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p)
      /\
      (((<=)
       (sub_pointer (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       p) (0))
      /\
      ((same_block p
       (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
       (Bit_uint64.to_int n_1)))
      /\
      ((<)
      (sub_pointer p
      (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
      (Bit_uint64.to_int n_1))) (0))))) ->
      (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p)
      (#"whole_program.jc" 357 35 51# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))
   /\
   (((allocated voidP_s_1_6_alloc_table s_1) ->
     ((instanceof voidP_s_1_6_tag_table s_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_6_alloc_table s_1) i) /\
       ((<) i (offset_max voidP_s_1_6_alloc_table s_1))) ->
       (instanceof voidP_s_1_6_tag_table (shift s_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 299 12 768#
   ((#"/home/work/workspace/self/verker-gh/memchr.h" 16 13 38#
    (instanceof voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n_1) (1))) then
    (((<=)
     (offset_min voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_6_alloc_table
     (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n_1) (1)))
    /\
    (forall __framac_tmp4 : int.
     ((((<=) (0) __framac_tmp4) /\
      ((<=) __framac_tmp4 (Int.(-) (Bit_uint64.to_int n_1) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memchr.h" 26 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_n_1 = ref n_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_0 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_6_tag_table s_1 (unsigned_charP_tag  ) ));
        'Loop_7:
        loop
        invariant { (#"whole_program.jc" 428 6 2570# true) } 
         begin
         any unit
         requires { true } reads { c_11, mutable_n_1, s_1 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 9 20 70#
            (forall k_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) k_1)
               (0))
              /\ ((same_block k_1 !p_4) /\ ((<) (sub_pointer k_1 !p_4) (0)))))
              ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 k_1)
              (#"whole_program.jc" 454 54 70# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n_1 'Init))
            (Bit_uint64.to_int !mutable_n_1))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
             (same_block !p_4
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n_1 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker-gh/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 430 38 51#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n_1))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n_1 (at !mutable_n_1 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0 := !mutable_n_1);
            begin
            (mutable_n_1 :=
             (Unsafe_bit_uint64.(-%)  !mutable_n_1
              (#"whole_program.jc" 460 58 71# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0
             (#"/home/work/workspace/self/verker-gh/memchr.c" 12 22 23#
             "expl:Integer cast"
             (Unsafe_bit_uint64_of_Unsafe_bit_int32.cast 
              (#"whole_program.jc" 463 45 57# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 0)) )) )) then ()
            else (raise (Goto_while_0_break_exc ())));
            begin
            begin
            (tmp := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 468 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker-gh/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11 )) ))
              (#"/home/work/workspace/self/verker-gh/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_6 !tmp ) )) ))
             then
              begin
              (__retres_0 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 474 62 74# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Return_label_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_8 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_5 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n_1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n_1 (#"whole_program.jc" 484 57 75#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end; (__retres_0 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
end

module Function_memscan_safety
#"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
"expl:memscan, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memscan #"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
  "expl:Function memscan, safety" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_2 : Uint64.t)
   (voidP_addr_10_alloc_table : (alloc_table voidP)) (voidP_addr_10_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_10 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_addr_10_alloc_table addr) ->
     ((instanceof voidP_addr_10_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_10_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_10_alloc_table addr))) ->
       (instanceof voidP_addr_10_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 655 12 781#
   ((#"/home/work/workspace/self/verker-gh/memscan.h" 16 13 41#
    (instanceof voidP_addr_10_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
    (((<=)
     (offset_min voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_2) (1)))
    /\
    (forall __framac_tmp7 : int.
     ((((<=) (0) __framac_tmp7) /\
      ((<=) __framac_tmp7 (Int.(-) (Uint64.to_int size_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_size_2 = ref size_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_2 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (let _jessie_210 =
        (#"/home/work/workspace/self/verker-gh/memscan.c" 5 20 24#
        (downcast_  voidP_addr_10_tag_table addr (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/memscan.c" 5 1 9#
        "expl:Pointer index bounds" true) }); _jessie_210 end));
        'Loop_16:
        loop
        invariant { (#"whole_program.jc" 734 6 2568# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/memscan.c" 13 18 22#
            (Uint64.to_int
            (#"/home/work/workspace/self/verker-gh/memscan.c" 13 18 22#
            !mutable_size_2))) }
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 11 20 113#
            (forall i_8 : int.
             ((((<=) (0) i_8) /\
              ((<) i_8
              (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
              (Uint64.to_int !mutable_size_2)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_8)))
              (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_2 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_2 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
            (Uint64.to_int !mutable_size_2))))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 736 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_2))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_2 (at !mutable_size_2 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/memscan.c" 15 8 12#
           (Safe_uint64.(<>)  !mutable_size_2
            (#"whole_program.jc" 769 49 62# "expl:Integer cast"
            (Safe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 13#
            (Safe_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Safe_int32_of_Safe_uint8.cast 
              (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 8#
              "expl:Pointer dereference"
              (acc  voidP_addr_10_alloc_table
               unsigned_charP_unsigned_charM_addr_10 !p_0_2 )) )) c_12 ))
            then
             begin
             (__retres_2 :=
              (let _jessie_211 = !p_0_2 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memscan.c" 17 3 20#
              "expl:Pointer index bounds" true) }); _jessie_211 end));
              (raise (Return_label_exc ())) end else ());
             begin
             (p_0_2 :=
              (let _jessie_212 =
              (shift_typesafe  !p_0_2
               (Safe_int32.to_int 
                (#"whole_program.jc" 778 49 61# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/memscan.c" 18 2 5#
              "expl:Pointer index bounds" true) }); _jessie_212 end));
              (mutable_size_2 :=
               (let _jessie_213 =
               (Safe_uint64.(-)  !mutable_size_2
                (#"whole_program.jc" 780 58 71# "expl:Integer cast"
                (Safe_uint64.of_int (1))) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/memscan.c" 19 2 8#
               "expl:Pointer index bounds" true) }); _jessie_213 end)) end
            end end; (raise (Loop_continue_exc ())) end with
           Loop_continue_exc _jessie_15 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end with Goto_while_0_break_exc
       _jessie_12 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_2 :=
         (let _jessie_214 = !p_0_2 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/memscan.c" 21 1 18#
         "expl:Pointer index bounds" true) }); _jessie_214 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_13 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_215 = !__retres_2 in
       begin
       (assert {
       (#"whole_program.jc" 787 7 24# "expl:Pointer index bounds" true) });
        _jessie_215 end)); (raise Return) end end)); absurd  end with Return
    -> !return end))
  
end

module Function_memscan_behaviors
#"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
"expl:memscan, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memscan_ensures_default
  #"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
  "expl:Function memscan, default behavior" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_2 : Uint64.t)
   (voidP_addr_10_alloc_table : (alloc_table voidP)) (voidP_addr_10_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_10 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_addr_10_alloc_table addr) ->
     ((instanceof voidP_addr_10_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_10_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_10_alloc_table addr))) ->
       (instanceof voidP_addr_10_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 655 12 781#
   ((#"/home/work/workspace/self/verker-gh/memscan.h" 16 13 41#
    (instanceof voidP_addr_10_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
    (((<=)
     (offset_min voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_2) (1)))
    /\
    (forall __framac_tmp7 : int.
     ((((<=) (0) __framac_tmp7) /\
      ((<=) __framac_tmp7 (Int.(-) (Uint64.to_int size_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
      "expl:Ensures clause" (same_block addr result))
     /\
     (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
      "expl:Ensures clause" (same_block addr result))
     /\
     (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
      "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
      "expl:Ensures clause"
      (same_block result (shift addr (Uint64.to_int size_2))))
     /\
     (#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
     "expl:Ensures clause"
     ((<=) (sub_pointer result (shift addr (Uint64.to_int size_2))) (0)))))))))))))
     } diverges  ->
   (let mutable_size_2 = ref size_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 704 10 818# "expl:Behavior disjointness check"
    (not
    ((exists i_10_0 : int.
      (((<=) (0) i_10_0) /\
      (((<) i_10_0 (Uint64.to_int !mutable_size_2)) /\
      ((=)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_10
      (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
      i_10_0))) (Int32.to_int c_12)))))
    /\
    (forall i_9_0 : int.
     ((((<=) (0) i_9_0) /\ ((<) i_9_0 (Uint64.to_int !mutable_size_2))) ->
      ((<>)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_10
      (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
      i_9_0))) (Int32.to_int c_12))))))) });
     (check {
     (#"whole_program.jc" 717 10 698# "expl:Behavior completeness check"
     ((forall i_9_1 : int.
       ((((<=) (0) i_9_1) /\ ((<) i_9_1 (Uint64.to_int !mutable_size_2))) ->
        ((<>)
        (Uint8.to_int
        (select unsigned_charP_unsigned_charM_addr_10
        (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
        i_9_1))) (Int32.to_int c_12))))
     \/
     (exists i_10_1 : int.
      (((<=) (0) i_10_1) /\
      (((<) i_10_1 (Uint64.to_int !mutable_size_2)) /\
      ((=)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_10
      (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
      i_10_1))) (Int32.to_int c_12))))))) });
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_2 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_10_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_13:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
             (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
             ((#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 29#
              (Uint64.(<=) (#"whole_program.jc" 736 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !mutable_size_2))
             /\
             (#"/home/work/workspace/self/verker-gh/memscan.c" 7 25 46#
             (Uint64.(<=) !mutable_size_2 (at !mutable_size_2 'Init))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 8 20 58#
             ((=)
             (sub_pointer !p_0_2
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
             (Uint64.to_int !mutable_size_2))))
            &&
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 9 20 59#
             (same_block !p_0_2
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)))
            &&
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
             (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
              (same_block
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
              !p_0_2))
             /\
             (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
              !p_0_2) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
              (same_block !p_0_2
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
              (Uint64.to_int (at !mutable_size_2 'Init)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
             ((<=)
             (sub_pointer !p_0_2
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_2 'Init)))) (0))))))))))
            &&
            (#"/home/work/workspace/self/verker-gh/memscan.c" 11 20 113#
            (forall i_8 : int.
             ((((<=) (0) i_8) /\
              ((<) i_8
              (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
              (Uint64.to_int !mutable_size_2)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_8)))
              (Int32.to_int c_12))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_2
            (#"whole_program.jc" 769 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_10 !p_0_2 ) )) c_12 ))
            then
             begin (__retres_2 := !p_0_2); (raise (Return_label_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 778 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_2 :=
               (Unsafe_uint64.(-)  !mutable_size_2
                (#"whole_program.jc" 780 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_12 ->
       'While_0_break: 'While_0_break: begin (); (__retres_2 := !p_0_2) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_13 ->
      'Return_label:
      'Return_label: begin (return := !__retres_2); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let memscan_ensures_found
  #"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
  "expl:Function memscan, behavior found" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_2 : Uint64.t)
   (voidP_addr_10_alloc_table : (alloc_table voidP)) (voidP_addr_10_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_10 : (memory
   voidP Uint8.t)) 
   requires {
   ((exists i_10 : int.
     (((<=) (0) i_10) /\
     (((<) i_10 (Uint64.to_int size_2)) /\
     ((=)
     (Uint8.to_int
     (select unsigned_charP_unsigned_charM_addr_10
     (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_10)))
     (Int32.to_int c_12)))))
   /\
   (((allocated voidP_addr_10_alloc_table addr) ->
     ((instanceof voidP_addr_10_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_10_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_10_alloc_table addr))) ->
       (instanceof voidP_addr_10_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 655 12 781#
   ((#"/home/work/workspace/self/verker-gh/memscan.h" 16 13 41#
    (instanceof voidP_addr_10_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
    (((<=)
     (offset_min voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_2) (1)))
    /\
    (forall __framac_tmp7 : int.
     ((((<=) (0) __framac_tmp7) /\
      ((<=) __framac_tmp7 (Int.(-) (Uint64.to_int size_2) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memscan.h" 23 15 199#
     "expl:Ensures clause"
     (exists i_11 : int.
      (((<=) (0) i_11) /\
      (((<) i_11 (Uint64.to_int size_2)) /\
      ((forall j_2 : int.
        ((((<=) (0) j_2) /\ ((<) j_2 i_11)) ->
         ((<>)
         (Uint8.to_int
         (select unsigned_charP_unsigned_charM_addr_10
         (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
         j_2))) (Int32.to_int c_12))))
      /\
      (((=)
       (Uint8.to_int
       (select unsigned_charP_unsigned_charM_addr_10
       (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
       i_11))) (Int32.to_int c_12))
      /\ ((=) result (shift addr i_11))))))))) } diverges  ->
   (let mutable_size_2 = ref size_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_2 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_10_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_14:
        loop
        invariant { (#"whole_program.jc" 734 6 2568# true) } 
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 11 20 113#
            (forall i_8 : int.
             ((((<=) (0) i_8) /\
              ((<) i_8
              (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
              (Uint64.to_int !mutable_size_2)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_8)))
              (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_2 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_2 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
            (Uint64.to_int !mutable_size_2))))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 736 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_2))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_2 (at !mutable_size_2 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_2
            (#"whole_program.jc" 769 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_10 !p_0_2 ) )) c_12 ))
            then
             begin (__retres_2 := !p_0_2); (raise (Return_label_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 778 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_2 :=
               (Unsafe_uint64.(-)  !mutable_size_2
                (#"whole_program.jc" 780 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_12 ->
       'While_0_break: 'While_0_break: begin (); (__retres_2 := !p_0_2) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_13 ->
      'Return_label:
      'Return_label: begin (return := !__retres_2); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let memscan_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/memscan.c" 3 5 45#
  "expl:Function memscan, behavior not_exists" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_2 : Uint64.t)
   (voidP_addr_10_alloc_table : (alloc_table voidP)) (voidP_addr_10_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_10 : (memory
   voidP Uint8.t)) 
   requires {
   ((forall i_9 : int.
     ((((<=) (0) i_9) /\ ((<) i_9 (Uint64.to_int size_2))) ->
      ((<>)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_10
      (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_9)))
      (Int32.to_int c_12))))
   /\
   (((allocated voidP_addr_10_alloc_table addr) ->
     ((instanceof voidP_addr_10_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_10_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_10_alloc_table addr))) ->
       (instanceof voidP_addr_10_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 655 12 781#
   ((#"/home/work/workspace/self/verker-gh/memscan.h" 16 13 41#
    (instanceof voidP_addr_10_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker-gh/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
    (((<=)
     (offset_min voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_10_alloc_table
     (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_2) (1)))
    /\
    (forall __framac_tmp7 : int.
     ((((<=) (0) __framac_tmp7) /\
      ((<=) __framac_tmp7 (Int.(-) (Uint64.to_int size_2) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/memscan.h" 29 15 37#
     "expl:Ensures clause" ((=) result (shift addr (Uint64.to_int size_2)))))
     } diverges  ->
   (let mutable_size_2 = ref size_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_2 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_10_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_15:
        loop
        invariant { (#"whole_program.jc" 734 6 2568# true) } 
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 11 20 113#
            (forall i_8 : int.
             ((((<=) (0) i_8) /\
              ((<) i_8
              (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
              (Uint64.to_int !mutable_size_2)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_8)))
              (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_2 'Init)))))
            /\
            (#"/home/work/workspace/self/verker-gh/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_2 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_2 'Init))
            (Uint64.to_int !mutable_size_2))))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 736 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_2))
           /\
           (#"/home/work/workspace/self/verker-gh/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_2 (at !mutable_size_2 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_2
            (#"whole_program.jc" 769 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_10 !p_0_2 ) )) c_12 ))
            then
             begin (__retres_2 := !p_0_2); (raise (Return_label_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 778 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_2 :=
               (Unsafe_uint64.(-)  !mutable_size_2
                (#"whole_program.jc" 780 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_12 ->
       'While_0_break: 'While_0_break: begin (); (__retres_2 := !p_0_2) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_13 ->
      'Return_label:
      'Return_label: begin (return := !__retres_2); (raise Return) end end));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_Strlen

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate valid_str (s : (pointer voidP)) (voidP_s_12_alloc_table_at_L :
  (alloc_table voidP)) (charP_charM_s_12_at_L : (memory voidP Int8.t))
  =
     (exists n_1_0 : Uint64.t.
      ((Int8.(=)
       (select charP_charM_s_12_at_L (shift s (Uint64.to_int n_1_0)))
       (#"whole_program.jc" 1045 42 53# "expl:Integer cast" (Int8.of_int
       (0))))
      /\
      (if ((<=) (0) (Uint64.to_int n_1_0)) then
       (((<=) (offset_min voidP_s_12_alloc_table_at_L s) (0)) /\
       (((>=) (offset_max voidP_s_12_alloc_table_at_L s)
        (Uint64.to_int n_1_0))
       /\
       (forall __framac_tmp8 : int.
        ((((<=) (0) __framac_tmp8) /\
         ((<=) __framac_tmp8 (Uint64.to_int n_1_0))) -> ((=) true true)))))
       else ((=) true true))))
  
  lemma Valid_str_shift1
  #"/home/work/workspace/self/verker-gh/strlen.h" 12 7 102#
  "expl:Lemma valid_str_shift1" :
  (forall voidP_s_0_134_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_0_134_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 12 7 102#
    (forall s_0_0 : (pointer voidP).
     (((Int8.(<>) (select charP_charM_s_0_134_at_L s_0_0)
       (#"whole_program.jc" 1059 30 41# "expl:Integer cast" (Int8.of_int
       (0))))
      /\
      (valid_str s_0_0 voidP_s_0_134_alloc_table_at_L
      charP_charM_s_0_134_at_L)) ->
      (valid_str (shift s_0_0 (1)) voidP_s_0_134_alloc_table_at_L
      charP_charM_s_0_134_at_L))))))
  
  lemma Valid_str_strend
  #"/home/work/workspace/self/verker-gh/strlen.h" 18 7 87#
  "expl:Lemma valid_str_strend" :
  (forall voidP_s_1_135_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_1_135_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 18 7 87#
    (forall s_1_0 : (pointer voidP).
     (((((<=) (offset_min voidP_s_1_135_alloc_table_at_L s_1_0) (0)) /\
       (((>=) (offset_max voidP_s_1_135_alloc_table_at_L s_1_0) (0)) /\
       ((=) true true)))
      /\
      (Int8.(=) (select charP_charM_s_1_135_at_L s_1_0)
      (#"whole_program.jc" 1067 31 42# "expl:Integer cast" (Int8.of_int
      (0))))) ->
      (valid_str s_1_0 voidP_s_1_135_alloc_table_at_L
      charP_charM_s_1_135_at_L))))))
  
  function strlen (pointer voidP) (memory voidP Int8.t) :
  Uint64.t
  
  lemma Strlen_before_null
  #"/home/work/workspace/self/verker-gh/strlen.h" 26 7 106#
  "expl:Lemma strlen_before_null" :
  (forall voidP_s_3_136_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_3_136_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 26 7 106#
    (forall s_3_0 : (pointer voidP).
     (forall i_12 : int.
      (((valid_str s_3_0 voidP_s_3_136_alloc_table_at_L
        charP_charM_s_3_136_at_L)
       /\
       (((<=) (0) i_12) /\
       ((<) i_12 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_136_at_L)))))
       ->
       (Int8.(<>) (select charP_charM_s_3_136_at_L (shift s_3_0 i_12))
       (#"whole_program.jc" 1080 41 52# "expl:Integer cast" (Int8.of_int
       (0))))))))))
  
  lemma Strlen_at_null
  #"/home/work/workspace/self/verker-gh/strlen.h" 31 7 71#
  "expl:Lemma strlen_at_null" :
  (forall voidP_s_4_137_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_4_137_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 31 7 71#
    (forall s_4_0 : (pointer voidP).
     ((valid_str s_4_0 voidP_s_4_137_alloc_table_at_L
      charP_charM_s_4_137_at_L) ->
      (Int8.(=)
      (select charP_charM_s_4_137_at_L
      (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_137_at_L))))
      (#"whole_program.jc" 1085 62 73# "expl:Integer cast" (Int8.of_int
      (0)))))))))
  
  lemma Strlen_shift
  #"/home/work/workspace/self/verker-gh/strlen.h" 35 7 125#
  "expl:Lemma strlen_shift" :
  (forall voidP_s_5_138_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_5_138_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 35 7 125#
    (forall s_5_0 : (pointer voidP).
     (forall i_13 : Uint64.t.
      (((valid_str s_5_0 voidP_s_5_138_alloc_table_at_L
        charP_charM_s_5_138_at_L)
       /\ (Uint64.(<=) i_13 (strlen s_5_0 charP_charM_s_5_138_at_L))) ->
       ((=)
       (Uint64.to_int
       (strlen (shift s_5_0 (Uint64.to_int i_13)) charP_charM_s_5_138_at_L))
       (Int.(-) (Uint64.to_int (strlen s_5_0 charP_charM_s_5_138_at_L))
       (Uint64.to_int i_13)))))))))
  
  lemma Strlen_shift_ex
  #"/home/work/workspace/self/verker-gh/strlen.h" 41 7 126#
  "expl:Lemma strlen_shift_ex" :
  (forall voidP_s_6_139_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_6_139_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 41 7 126#
    (forall s_6_0 : (pointer voidP).
     (forall i_14 : Uint64.t.
      (((valid_str s_6_0 voidP_s_6_139_alloc_table_at_L
        charP_charM_s_6_139_at_L)
       /\
       ((Uint64.(<) (#"whole_program.jc" 1097 41 54# "expl:Integer cast"
        (Uint64.of_int (0))) i_14)
       /\ (Uint64.(<=) i_14 (strlen s_6_0 charP_charM_s_6_139_at_L)))) ->
       (Uint64.(<)
       (strlen (shift s_6_0 (Uint64.to_int i_14)) charP_charM_s_6_139_at_L)
       (strlen s_6_0 charP_charM_s_6_139_at_L))))))))
  
  lemma Strlen_shift1
  #"/home/work/workspace/self/verker-gh/strlen.h" 47 7 103#
  "expl:Lemma strlen_shift1" :
  (forall voidP_s_7_140_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_7_140_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 47 7 103#
    (forall s_7_0 : (pointer voidP).
     (((valid_str s_7_0 voidP_s_7_140_alloc_table_at_L
       charP_charM_s_7_140_at_L)
      /\
      (Int8.(<>) (select charP_charM_s_7_140_at_L s_7_0)
      (#"whole_program.jc" 1103 51 62# "expl:Integer cast" (Int8.of_int
      (0))))) ->
      ((=) (Uint64.to_int (strlen s_7_0 charP_charM_s_7_140_at_L))
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_7_0 (1)) charP_charM_s_7_140_at_L)))))))))
  
  lemma Strlen_pointers
  #"/home/work/workspace/self/verker-gh/strlen.h" 52 7 254#
  "expl:Lemma strlen_pointers" :
  (forall voidP_s_8_141_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_8_141_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 52 7 254#
    (forall s_8_0 : (pointer voidP).
     (forall sc : (pointer voidP).
      (((valid_str s_8_0 voidP_s_8_141_alloc_table_at_L
        charP_charM_s_8_141_at_L)
       /\
       ((valid_str sc voidP_s_8_141_alloc_table_at_L
        charP_charM_s_8_141_at_L)
       /\
       ((same_block s_8_0 sc) /\
       ((same_block s_8_0 sc) /\
       (((<=) (sub_pointer s_8_0 sc) (0)) /\
       (forall i_15 : int.
        ((((<=) (0) i_15) /\ ((<=) i_15 (sub_pointer sc s_8_0))) ->
         (Int8.(<>) (select charP_charM_s_8_141_at_L (shift s_8_0 i_15))
         (#"whole_program.jc" 1116 46 57# "expl:Integer cast" (Int8.of_int
         (0))))))))))) ->
       (Uint64.(<=) (strlen sc charP_charM_s_8_141_at_L)
       (strlen s_8_0 charP_charM_s_8_141_at_L))))))))
  
  lemma Strlen_main #"/home/work/workspace/self/verker-gh/strlen.h" 61 7 159#
  "expl:Lemma strlen_main" :
  (forall voidP_s_9_143_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_9_143_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 61 7 159#
    (forall s_9_0 : (pointer voidP).
     (forall n_2 : Uint64.t.
      (((valid_str s_9_0 voidP_s_9_143_alloc_table_at_L
        charP_charM_s_9_143_at_L)
       /\
       ((Int8.(=)
        (select charP_charM_s_9_143_at_L (shift s_9_0 (Uint64.to_int n_2)))
        (#"whole_program.jc" 1123 55 66# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       (forall i_16 : Uint64.t.
        ((Uint64.(<) i_16 n_2) ->
         (Int8.(<>)
         (select charP_charM_s_9_143_at_L (shift s_9_0 (Uint64.to_int i_16)))
         (#"whole_program.jc" 1126 59 70# "expl:Integer cast" (Int8.of_int
         (0)))))))) ->
       (Uint64.(=) (strlen s_9_0 charP_charM_s_9_143_at_L) n_2)))))))
  
  lemma Valid_str_shiftn
  #"/home/work/workspace/self/verker-gh/strlen.h" 68 7 123#
  "expl:Lemma valid_str_shiftn" :
  (forall voidP_s_10_144_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_10_144_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strlen.h" 68 7 123#
    (forall s_10_0 : (pointer voidP).
     (forall i_17 : int.
      (((valid_str s_10_0 voidP_s_10_144_alloc_table_at_L
        charP_charM_s_10_144_at_L)
       /\
       (((<=) (0) i_17) /\
       ((<) i_17 (Uint64.to_int (strlen s_10_0 charP_charM_s_10_144_at_L)))))
       ->
       (valid_str (shift s_10_0 i_17) voidP_s_10_144_alloc_table_at_L
       charP_charM_s_10_144_at_L)))))))
  
  axiom Strlen_definition :
  (forall s_2 : (pointer voidP).
   (forall charP_charM_s_2_13_at_L : (memory voidP Int8.t)
    [(strlen s_2 charP_charM_s_2_13_at_L)] .
    ((=) (strlen s_2 charP_charM_s_2_13_at_L)
    (if
     (Int8.(=) (select charP_charM_s_2_13_at_L (shift s_2 (0)))
     (#"whole_program.jc" 1071 30 41# "expl:Integer cast" (Int8.of_int (0))))
     then (#"whole_program.jc" 1071 48 61# "expl:Integer cast" (Uint64.of_int
     (0))) else (#"whole_program.jc" 1071 67 255# "expl:Integer cast"
     (Uint64.of_int
     (Int.(+) (1)
     (Uint64.to_int (strlen (shift s_2 (1)) charP_charM_s_2_13_at_L)))))))))
  
end

module Function_isspace_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isspace_0
  (c_8_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 87 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isspace (Int8.to_int c_8_0)))) }
  
end

module Function_skip_spaces_0_safety
#"/home/work/workspace/self/verker-gh/skip_spaces.c" 3 5 34#
"expl:skip_spaces, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_enum__bool 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isspace_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let skip_spaces_0
  #"/home/work/workspace/self/verker-gh/skip_spaces.c" 3 5 34#
  "expl:Function skip_spaces, safety" =
  fun
   (str_0 : (pointer voidP)) (voidP_str_16_alloc_table : (alloc_table voidP))
   (voidP_str_16_tag_table : (tag_table voidP)) (charP_charM_str_16 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_str_16_alloc_table str_0) ->
     (((=) (typeof voidP_str_16_tag_table str_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_str_16_alloc_table str_0) i) /\
       ((<) i (offset_max voidP_str_16_alloc_table str_0))) ->
       ((=) (typeof voidP_str_16_tag_table (shift str_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 52 13 27#
   (valid_str str_0 voidP_str_16_alloc_table charP_charM_str_16))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_str_0 = ref str_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let ostr = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_0 = ref (Safe_enum__bool.any_  () ) in
    (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (ostr :=
      (let _jessie_222 = !mutable_str_0 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 5 11 15#
      "expl:Pointer index bounds" true) }); _jessie_222 end));
      'Loop_18:
      loop
      invariant { (#"whole_program.jc" 1231 6 1609# true) }
        variant {
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 9 18 45#
          (Int.(-) (Uint64.to_int (strlen !ostr charP_charM_str_16))
          (sub_pointer !mutable_str_0 !ostr))) }
       begin
       any unit
       requires { true } reads { mutable_str_0 }
       ensures {
         ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 8 20 68#
          (forall p_2_0 : (pointer voidP).
           (((same_block !ostr p_2_0) /\
            (((<=) (sub_pointer !ostr p_2_0) (0)) /\
            ((same_block p_2_0 !mutable_str_0) /\
            ((<) (sub_pointer p_2_0 !mutable_str_0) (0))))) ->
            (isspace (Int8.to_int (select charP_charM_str_16 p_2_0))))))
         /\
         ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 31#
           (same_block !ostr !mutable_str_0))
          /\
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 31#
           ((<=) (sub_pointer !ostr !mutable_str_0) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 28 54#
           (same_block !mutable_str_0
           (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_16)))))
          /\
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 28 54#
          ((<=)
          (sub_pointer !mutable_str_0
          (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_16))))
          (0))))))))))
         /\
         (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 6 20 34#
         (valid_str !mutable_str_0 voidP_str_16_alloc_table
         charP_charM_str_16)))) } ;
        try
         begin
         begin
         (tmp_0_0 :=
          (let _jessie_223 =
          (let _jessie_224 =
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 16 20#
          "expl:Pointer dereference"
          (acc  voidP_str_16_alloc_table charP_charM_str_16 !mutable_str_0 ))
          in
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 8 21#
          "expl:Precondition for isspace"
          (Function_isspace_0_safe.isspace_0  _jessie_224 ))) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 8 21#
          "expl:Pointer index bounds" true) }); _jessie_223 end));
          (if
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 8 21#
          (Safe_enum__bool.(<>)  !tmp_0_0
           (#"whole_program.jc" 1257 49 61# "expl:Integer cast"
           (Safe_enum__bool.of_int  (0) )) )) then ()
          else (raise (Goto_while_0_break_exc ())));
          (mutable_str_0 :=
           (let _jessie_225 =
           (shift_typesafe  !mutable_str_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 1259 46 58# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 12 2 7#
           "expl:Pointer index bounds" true) }); _jessie_225 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_18 -> () end end end; (raise (Goto_while_0_break_exc ()))
     end with Goto_while_0_break_exc _jessie_16 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (__retres_3 :=
       (let _jessie_226 = !mutable_str_0 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 13 1 20#
       "expl:Pointer index bounds" true) }); _jessie_226 end));
       begin
       (return :=
        (let _jessie_227 = !__retres_3 in
        begin
        (assert {
        (#"whole_program.jc" 1265 7 24# "expl:Pointer index bounds" true) });
         _jessie_227 end)); (raise Return) end end end end))); absurd  end
    with Return -> !return end))
  
end

module Function_isspace_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isspace_0
  (c_8_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 87 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isspace (Int8.to_int c_8_0)))) }
  
end

theory Axiomatic_SkipSpaces

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  function skip_spaces (pointer voidP) : (pointer
  voidP)
  
  lemma Skip_spaces_defn
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 13 7 202#
  "expl:Lemma skip_spaces_defn" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 13 7 202#
    (forall str_0_0 : (pointer voidP).
     (forall i_18 : Uint64.t.
      (((valid_str str_0_0 voidP_str_14_alloc_table_at_L
        charP_charM_str_14_at_L)
       /\
       ((Uint64.(<=) i_18 (strlen str_0_0 charP_charM_str_14_at_L)) /\
       ((forall j_3 : Uint64.t.
         ((Uint64.(<) j_3 i_18) ->
          (isspace
          (Int8.to_int
          (select charP_charM_str_14_at_L
          (shift str_0_0 (Uint64.to_int j_3)))))))
       /\
       (not
       (isspace
       (Int8.to_int
       (select charP_charM_str_14_at_L (shift str_0_0 (Uint64.to_int i_18)))))))))
       -> ((=) (shift str_0_0 (Uint64.to_int i_18)) (skip_spaces str_0_0))))))))
  
  lemma Skip_spaces_deref
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 19 7 82#
  "expl:Lemma skip_spaces_deref" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 19 7 82#
    (forall str_1 : (pointer voidP).
     ((valid_str str_1 voidP_str_14_alloc_table_at_L charP_charM_str_14_at_L)
      ->
      (not
      (isspace
      (Int8.to_int (select charP_charM_str_14_at_L (skip_spaces str_1))))))))))
  
  lemma Skip_spaces_range
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 22 7 106#
  "expl:Lemma skip_spaces_range" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 22 7 106#
    (forall str_2 : (pointer voidP).
     ((valid_str str_2 voidP_str_14_alloc_table_at_L charP_charM_str_14_at_L)
      ->
      ((same_block str_2 (skip_spaces str_2)) /\
      (((<=) (sub_pointer str_2 (skip_spaces str_2)) (0)) /\
      ((same_block (skip_spaces str_2)
       (shift str_2 (Uint64.to_int (strlen str_2 charP_charM_str_14_at_L))))
      /\
      ((<=)
      (sub_pointer (skip_spaces str_2)
      (shift str_2 (Uint64.to_int (strlen str_2 charP_charM_str_14_at_L))))
      (0))))))))))
  
  lemma Skip_spaces_iter_one
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 26 7 115#
  "expl:Lemma skip_spaces_iter_one" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 26 7 115#
    (forall str_3 : (pointer voidP).
     (((valid_str str_3 voidP_str_14_alloc_table_at_L
       charP_charM_str_14_at_L)
      /\
      (not (isspace (Int8.to_int (select charP_charM_str_14_at_L str_3)))))
      -> ((=) (skip_spaces str_3) (skip_spaces (shift str_3 (1)))))))))
  
  lemma Skip_spaces_base_addr
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 30 7 109#
  "expl:Lemma skip_spaces_base_addr" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 30 7 109#
    (forall str_4 : (pointer voidP).
     ((valid_str str_4 voidP_str_14_alloc_table_at_L charP_charM_str_14_at_L)
      -> (same_block str_4 (skip_spaces str_4)))))))
  
  lemma Skip_spaces_same
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 34 7 100#
  "expl:Lemma skip_spaces_same" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 34 7 100#
    (forall str_5 : (pointer voidP).
     (((((<=) (offset_min voidP_str_14_alloc_table_at_L str_5) (0)) /\
       (((>=) (offset_max voidP_str_14_alloc_table_at_L str_5) (0)) /\
       ((=) true true)))
      /\
      (not (isspace (Int8.to_int (select charP_charM_str_14_at_L str_5)))))
      -> ((=) str_5 (skip_spaces str_5)))))))
  
  lemma Skipped_are_spaces
  #"/home/work/workspace/self/verker-gh/skip_spaces.h" 38 7 124#
  "expl:Lemma skipped_are_spaces" :
  (forall voidP_str_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 38 7 124#
    (forall str_6 : (pointer voidP).
     (forall i_19 : Uint64.t.
      (((valid_str str_6 voidP_str_14_alloc_table_at_L
        charP_charM_str_14_at_L)
       /\ ((<) (Uint64.to_int i_19) (sub_pointer (skip_spaces str_6) str_6)))
       ->
       (isspace
       (Int8.to_int
       (select charP_charM_str_14_at_L (shift str_6 (Uint64.to_int i_19)))))))))))
  
end

module Function_skip_spaces_0_behaviors
#"/home/work/workspace/self/verker-gh/skip_spaces.c" 3 5 34#
"expl:skip_spaces, behaviors"

  use Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isspace_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let skip_spaces_ensures_default
  #"/home/work/workspace/self/verker-gh/skip_spaces.c" 3 5 34#
  "expl:Function skip_spaces, default behavior" =
  fun
   (str_0 : (pointer voidP)) (voidP_str_16_alloc_table : (alloc_table voidP))
   (voidP_str_16_tag_table : (tag_table voidP)) (charP_charM_str_16 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_str_16_alloc_table str_0) ->
     (((=) (typeof voidP_str_16_tag_table str_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_str_16_alloc_table str_0) i) /\
       ((<) i (offset_max voidP_str_16_alloc_table str_0))) ->
       ((=) (typeof voidP_str_16_tag_table (shift str_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 52 13 27#
   (valid_str str_0 voidP_str_16_alloc_table charP_charM_str_16))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
      "expl:Ensures clause" ((=) result (skip_spaces str_0)))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 55 12 50#
      "expl:Ensures clause" (same_block result str_0))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
      "expl:Ensures clause" (same_block str_0 result))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
      "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
      "expl:Ensures clause"
      (same_block result
      (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16)))))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16)))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 57 12 30#
      "expl:Ensures clause"
      (not (isspace (Int8.to_int (select charP_charM_str_16 result)))))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 58 12 63#
      "expl:Ensures clause"
      (forall p_3_0 : (pointer voidP).
       (((same_block str_0 p_3_0) /\
        (((<=) (sub_pointer str_0 p_3_0) (0)) /\
        ((same_block p_3_0 result) /\ ((<) (sub_pointer p_3_0 result) (0)))))
        -> (isspace (Int8.to_int (select charP_charM_str_16 p_3_0))))))
     /\
     (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 59 12 30#
     "expl:Ensures clause"
     (valid_str result voidP_str_16_alloc_table charP_charM_str_16))))))))))))))))))))
     } diverges  ->
   (let mutable_str_0 = ref str_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let ostr = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_0 = ref (Unsafe_enum__bool.any_  () ) in
    (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (ostr := !mutable_str_0);
      'Loop_17:
      loop
      invariant
        { ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 6 20 34#
           (valid_str !mutable_str_0 voidP_str_16_alloc_table
           charP_charM_str_16))
          &&
          ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
           (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 31#
            (same_block !ostr !mutable_str_0))
           /\
           (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 31#
            ((<=) (sub_pointer !ostr !mutable_str_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 28 54#
            (same_block !mutable_str_0
            (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_16)))))
           /\
           (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 7 28 54#
           ((<=)
           (sub_pointer !mutable_str_0
           (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_16))))
           (0))))))))))
          &&
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 8 20 68#
          (forall p_2_0 : (pointer voidP).
           (((same_block !ostr p_2_0) /\
            (((<=) (sub_pointer !ostr p_2_0) (0)) /\
            ((same_block p_2_0 !mutable_str_0) /\
            ((<) (sub_pointer p_2_0 !mutable_str_0) (0))))) ->
            (isspace (Int8.to_int (select charP_charM_str_16 p_2_0)))))))) } 
        
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         begin
         (tmp_0_0 :=
          (let _jessie_218 = (acc  charP_charM_str_16 !mutable_str_0 ) in
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 8 21#
          "expl:Precondition for isspace"
          (Function_isspace_0.isspace_0  _jessie_218 ))));
          (if
          (#"/home/work/workspace/self/verker-gh/skip_spaces.c" 11 8 21#
          (Unsafe_enum__bool.(<>)  !tmp_0_0
           (#"whole_program.jc" 1257 49 61# "expl:Integer cast"
           (Unsafe_enum__bool.of_int  (0) )) )) then ()
          else (raise (Goto_while_0_break_exc ())));
          (mutable_str_0 :=
           (shift_  !mutable_str_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 1259 46 58# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) )) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_18 -> () end end end; (raise (Goto_while_0_break_exc ()))
     end with Goto_while_0_break_exc _jessie_16 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (__retres_3 := !mutable_str_0);
       begin (return := !__retres_3); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
end

module Function_tolower_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val tolower_0
  (c_18 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 112 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_18)))) }
  
end

module Function_strcasecmp_safety
#"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
"expl:strcasecmp, safety"

  use enum.Uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_tolower_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let strcasecmp #"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, safety" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_18_alloc_table :
   (alloc_table voidP)) (voidP_s2_19_alloc_table : (alloc_table voidP))
   (voidP_s2_19_tag_table : (tag_table voidP)) (voidP_s1_18_tag_table :
   (tag_table voidP)) (charP_charM_s1_18 : (memory voidP Int8.t))
   (charP_charM_s2_19 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s2_19_alloc_table s2) ->
     (((=) (typeof voidP_s2_19_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_19_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_19_alloc_table s2))) ->
       ((=) (typeof voidP_s2_19_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_18_alloc_table s1) ->
     (((=) (typeof voidP_s1_18_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_18_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_18_alloc_table s1))) ->
       ((=) (typeof voidP_s1_18_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1270 12 76#
   ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_18_alloc_table charP_charM_s1_18))
   /\
   (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_19_alloc_table charP_charM_s2_19)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Safe_int32.any_  () ) in
     (let c2 = ref (Safe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_1 = ref (Safe_int32.any_  () ) in
     (let __retres_4 = ref (Safe_int32.any_  () ) in
     try
      begin
      (os1 :=
       (let _jessie_284 = !mutable_s1 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 6 11 15#
       "expl:Pointer index bounds" true) }); _jessie_284 end));
       begin
       (os2 :=
        (let _jessie_273 = !mutable_s2 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 7 11 15#
        "expl:Pointer index bounds" true) }); _jessie_273 end));
        'Loop_22:
        loop
        invariant { (#"whole_program.jc" 1344 6 2984# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 15 18 42#
            (Int.(-) (Uint64.to_int (strlen !os1 charP_charM_s1_18))
            (sub_pointer !mutable_s1 !os1))) }
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 13 20 115#
            (forall i_20 : int.
             ((((<=) (0) i_20) /\ ((<) i_20 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_20))))
              (tolower
              (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_20))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_18_alloc_table charP_charM_s1_18))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_19_alloc_table charP_charM_s2_19)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           (tmp_0_1 :=
            (let _jessie_274 = !mutable_s1 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 16 20#
            "expl:Pointer index bounds" true) }); _jessie_274 end));
            begin
            (mutable_s1 :=
             (let _jessie_275 =
             (shift_typesafe  !mutable_s1
              (Safe_int32.to_int 
               (#"whole_program.jc" 1383 50 62# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 16 20#
             "expl:Pointer index bounds" true) }); _jessie_275 end)); () end
           end;
            begin
            (let __cil_tmp =
            (let _jessie_276 =
            (let _jessie_277 =
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 15 20#
            "expl:Pointer dereference"
            (acc  voidP_s1_18_alloc_table charP_charM_s1_18 !tmp_0_1 )) in
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
            "expl:Precondition for tolower"
            (Function_tolower_0_safe.tolower_0  _jessie_277 ))) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
            "expl:Pointer index bounds" true) }); _jessie_276 end) in
            (c1 :=
             (let _jessie_278 =
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
             "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  __cil_tmp ))
             in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
             "expl:Pointer index bounds" true) }); _jessie_278 end)));
             begin
             (tmp_0_2 :=
              (let _jessie_279 = !mutable_s2 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 16 20#
              "expl:Pointer index bounds" true) }); _jessie_279 end));
              begin
              (mutable_s2 :=
               (let _jessie_280 =
               (shift_typesafe  !mutable_s2
                (Safe_int32.to_int 
                 (#"whole_program.jc" 1391 50 62# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 16 20#
               "expl:Pointer index bounds" true) }); _jessie_280 end)); ()
              end end;
             (let __cil_tmp_13 =
             (let _jessie_281 =
             (let _jessie_282 =
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 15 20#
             "expl:Pointer dereference"
             (acc  voidP_s2_19_alloc_table charP_charM_s2_19 !tmp_0_2 )) in
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0_safe.tolower_0  _jessie_282 ))) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
             "expl:Pointer index bounds" true) }); _jessie_281 end) in
             (c2 :=
              (let _jessie_283 =
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Safe_int32_of_Safe_int8.cast  __cil_tmp_13 )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
              "expl:Pointer index bounds" true) }); _jessie_283 end))) end
           end;
            (if
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 10 18#
            (Safe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 22 29#
             (Safe_int32.(<>)  !c1
              (#"whole_program.jc" 1398 64 76# "expl:Integer cast"
              (Safe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_exc ())))
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_21 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_19 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (res_1 :=
        (let _jessie_285 = (Safe_int32.(-)  !c1 !c2 ) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 21 11 14#
        "expl:Pointer index bounds" true) }); _jessie_285 end));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 1408 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 1409 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_21 : int.
            (((<=) (0) i_21) /\
            (((<=) i_21 (Uint64.to_int (strlen !os1 charP_charM_s1_18))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_21)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21))))))
            /\ ((=) i_21 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_4 :=
         (let _jessie_286 = (Safe_int32.(-)  !c1 !c2 ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 30 1 16#
         "expl:Pointer index bounds" true) }); _jessie_286 end));
         begin
         (return :=
          (let _jessie_287 = !__retres_4 in
          begin
          (assert {
          (#"whole_program.jc" 1444 7 24# "expl:Pointer index bounds" true)
          }); _jessie_287 end)); (raise Return) end end end end end))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_tolower_0

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val tolower_0
  (c_18 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 112 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_18)))) }
  
end

module Function_strcasecmp_behaviors
#"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
"expl:strcasecmp, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_tolower_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let strcasecmp_ensures_default
  #"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, default behavior" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_18_alloc_table :
   (alloc_table voidP)) (voidP_s2_19_alloc_table : (alloc_table voidP))
   (voidP_s2_19_tag_table : (tag_table voidP)) (voidP_s1_18_tag_table :
   (tag_table voidP)) (charP_charM_s1_18 : (memory voidP Int8.t))
   (charP_charM_s2_19 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s2_19_alloc_table s2) ->
     (((=) (typeof voidP_s2_19_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_19_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_19_alloc_table s2))) ->
       ((=) (typeof voidP_s2_19_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_18_alloc_table s1) ->
     (((=) (typeof voidP_s1_18_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_18_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_18_alloc_table s1))) ->
       ((=) (typeof voidP_s1_18_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1270 12 76#
   ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_18_alloc_table charP_charM_s1_18))
   /\
   (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_19_alloc_table charP_charM_s2_19)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 1300 10 834# "expl:Behavior disjointness check"
    (not
    ((forall i_24_0 : int.
      ((((<=) (0) i_24_0) /\
       ((<=) i_24_0 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_18))))
       ->
       ((=)
       (tolower
       (Int8.to_int (select charP_charM_s1_18 (shift !mutable_s1 i_24_0))))
       (tolower
       (Int8.to_int (select charP_charM_s2_19 (shift !mutable_s2 i_24_0)))))))
    /\
    (exists i_22_0 : int.
     (((<=) (0) i_22_0) /\
     (((<=) i_22_0 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_18))) /\
     ((<>)
     (tolower
     (Int8.to_int (select charP_charM_s1_18 (shift !mutable_s1 i_22_0))))
     (tolower
     (Int8.to_int (select charP_charM_s2_19 (shift !mutable_s2 i_22_0)))))))))))
    });
     (check {
     (#"whole_program.jc" 1313 10 757# "expl:Behavior completeness check"
     ((exists i_22_1 : int.
       (((<=) (0) i_22_1) /\
       (((<=) i_22_1 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_18)))
       /\
       ((<>)
       (tolower
       (Int8.to_int (select charP_charM_s1_18 (shift !mutable_s1 i_22_1))))
       (tolower
       (Int8.to_int (select charP_charM_s2_19 (shift !mutable_s2 i_22_1))))))))
     \/
     (forall i_24_1 : int.
      ((((<=) (0) i_24_1) /\
       ((<=) i_24_1 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_18))))
       ->
       ((=)
       (tolower
       (Int8.to_int (select charP_charM_s1_18 (shift !mutable_s1 i_24_1))))
       (tolower
       (Int8.to_int (select charP_charM_s2_19 (shift !mutable_s2 i_24_1)))))))))
     });
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_4 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_19:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 33#
              (valid_str !mutable_s1 voidP_s1_18_alloc_table
              charP_charM_s1_18))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 37 50#
             (valid_str !mutable_s2 voidP_s2_19_alloc_table
             charP_charM_s2_19)))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
              (same_block !os1 !mutable_s1))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
              ((<=) (sub_pointer !os1 !mutable_s1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
              (same_block !mutable_s1
              (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
             ((<=)
             (sub_pointer !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
              (same_block !os2 !mutable_s2))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
              ((<=) (sub_pointer !os2 !mutable_s2) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
              (same_block !mutable_s2
              (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
             ((<=)
             (sub_pointer !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 12 20 40#
             ((=) (sub_pointer !mutable_s1 !os1)
             (sub_pointer !mutable_s2 !os2)))
            &&
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 13 20 115#
            (forall i_20 : int.
             ((((<=) (0) i_20) /\ ((<) i_20 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_20))))
              (tolower
              (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_20)))))))))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           begin
           (tmp_0_1 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 1383 50 62# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            begin
            (let __cil_tmp =
            (let _jessie_232 = (acc  charP_charM_s1_18 !tmp_0_1 ) in
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
            "expl:Precondition for tolower"
            (Function_tolower_0.tolower_0  _jessie_232 ))) in
            (c1 :=
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp ))));
             begin
             (tmp_0_2 := !mutable_s2);
              begin
              (mutable_s2 :=
               (shift_  !mutable_s2
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1391 50 62# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) )); () end end;
             (let __cil_tmp_13 =
             (let _jessie_237 = (acc  charP_charM_s2_19 !tmp_0_2 ) in
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_237 ))) in
             (c2 :=
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp_13 )))) end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 1398 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_exc ())))
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_21 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_19 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 22 12 44#
        "expl:Assertion in line 22"
        ((Int32.(=) !c1 !c2) ->
         ((Int32.(=) !c1 (#"whole_program.jc" 1408 60 72# "expl:Integer cast"
          (Int32.of_int (0))))
         /\
         (Int32.(=) !res_1 (#"whole_program.jc" 1409 64 76#
         "expl:Integer cast" (Int32.of_int (0))))))) }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 23 12 289#
        "expl:Assertion in line 23"
        ((Int32.(<>) !c1 !c2) ->
         (exists i_21 : int.
          (((<=) (0) i_21) /\
          (((<=) i_21 (Uint64.to_int (strlen !os1 charP_charM_s1_18))) /\
          ((forall j_4 : int.
            ((((<=) (0) j_4) /\ ((<) j_4 i_21)) ->
             ((=)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 j_4))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 j_4)))))))
          /\
          (((<>)
           (tolower
           (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
           (tolower
           (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21)))))
          /\
          (((=) (Int32.to_int !res_1)
           (Int.(-)
           (tolower
           (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
           (tolower
           (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21))))))
          /\ ((=) i_21 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
        }); () end;
        begin
        (__retres_4 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_4); (raise Return) end end end end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcasecmp_ensures_equal
  #"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, behavior equal" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_18_alloc_table :
   (alloc_table voidP)) (voidP_s2_19_alloc_table : (alloc_table voidP))
   (voidP_s2_19_tag_table : (tag_table voidP)) (voidP_s1_18_tag_table :
   (tag_table voidP)) (charP_charM_s1_18 : (memory voidP Int8.t))
   (charP_charM_s2_19 : (memory voidP Int8.t)) 
   requires {
   ((forall i_24 : int.
     ((((<=) (0) i_24) /\
      ((<=) i_24 (Uint64.to_int (strlen s1 charP_charM_s1_18)))) ->
      ((=) (tolower (Int8.to_int (select charP_charM_s1_18 (shift s1 i_24))))
      (tolower (Int8.to_int (select charP_charM_s2_19 (shift s2 i_24)))))))
   /\
   (((allocated voidP_s2_19_alloc_table s2) ->
     (((=) (typeof voidP_s2_19_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_19_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_19_alloc_table s2))) ->
       ((=) (typeof voidP_s2_19_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_18_alloc_table s1) ->
     (((=) (typeof voidP_s1_18_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_18_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_18_alloc_table s1))) ->
       ((=) (typeof voidP_s1_18_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1270 12 76#
   ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_18_alloc_table charP_charM_s1_18))
   /\
   (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_19_alloc_table charP_charM_s2_19))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 13 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 1279 32 44# "expl:Integer cast"
     (Int32.of_int (0)))))) } diverges  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_4 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_20:
        loop
        invariant { (#"whole_program.jc" 1344 6 2984# true) } 
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 13 20 115#
            (forall i_20 : int.
             ((((<=) (0) i_20) /\ ((<) i_20 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_20))))
              (tolower
              (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_20))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_18_alloc_table charP_charM_s1_18))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_19_alloc_table charP_charM_s2_19)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           (tmp_0_1 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 1383 50 62# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            begin
            (let __cil_tmp =
            (let _jessie_247 = (acc  charP_charM_s1_18 !tmp_0_1 ) in
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
            "expl:Precondition for tolower"
            (Function_tolower_0.tolower_0  _jessie_247 ))) in
            (c1 :=
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp ))));
             begin
             (tmp_0_2 := !mutable_s2);
              begin
              (mutable_s2 :=
               (shift_  !mutable_s2
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1391 50 62# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) )); () end end;
             (let __cil_tmp_13 =
             (let _jessie_252 = (acc  charP_charM_s2_19 !tmp_0_2 ) in
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_252 ))) in
             (c2 :=
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp_13 )))) end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 1398 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_exc ())))
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_21 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_19 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 1408 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 1409 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_21 : int.
            (((<=) (0) i_21) /\
            (((<=) i_21 (Uint64.to_int (strlen !os1 charP_charM_s1_18))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_21)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21))))))
            /\ ((=) i_21 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_4 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_4); (raise Return) end end end end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcasecmp_ensures_not_equal
  #"/home/work/workspace/self/verker-gh/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, behavior not_equal" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_18_alloc_table :
   (alloc_table voidP)) (voidP_s2_19_alloc_table : (alloc_table voidP))
   (voidP_s2_19_tag_table : (tag_table voidP)) (voidP_s1_18_tag_table :
   (tag_table voidP)) (charP_charM_s1_18 : (memory voidP Int8.t))
   (charP_charM_s2_19 : (memory voidP Int8.t)) 
   requires {
   ((exists i_22 : int.
     (((<=) (0) i_22) /\
     (((<=) i_22 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
     ((<>) (tolower (Int8.to_int (select charP_charM_s1_18 (shift s1 i_22))))
     (tolower (Int8.to_int (select charP_charM_s2_19 (shift s2 i_22))))))))
   /\
   (((allocated voidP_s2_19_alloc_table s2) ->
     (((=) (typeof voidP_s2_19_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_19_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_19_alloc_table s2))) ->
       ((=) (typeof voidP_s2_19_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_18_alloc_table s1) ->
     (((=) (typeof voidP_s1_18_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_18_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_18_alloc_table s1))) ->
       ((=) (typeof voidP_s1_18_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1270 12 76#
   ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_18_alloc_table charP_charM_s1_18))
   /\
   (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_19_alloc_table charP_charM_s2_19))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
      "expl:Ensures clause"
      (Int32.(<>) result (#"whole_program.jc" 1285 43 55# "expl:Integer cast"
      (Int32.of_int (0)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 17 15 253#
     "expl:Ensures clause"
     (exists i_23 : int.
      (((<=) (0) i_23) /\
      (((<=) i_23 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
      ((forall j_5 : int.
        ((((<=) (0) j_5) /\ ((<) j_5 i_23)) ->
         ((=)
         (tolower (Int8.to_int (select charP_charM_s1_18 (shift s1 j_5))))
         (tolower (Int8.to_int (select charP_charM_s2_19 (shift s2 j_5)))))))
      /\
      (((<>)
       (tolower (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
       (tolower (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23)))))
      /\
      ((=) (Int32.to_int result)
      (Int.(-)
      (tolower (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
      (tolower (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23))))))))))))))))
     } diverges  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_4 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_21:
        loop
        invariant { (#"whole_program.jc" 1344 6 2984# true) } 
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 13 20 115#
            (forall i_20 : int.
             ((((<=) (0) i_20) /\ ((<) i_20 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_20))))
              (tolower
              (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_20))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_19))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_18))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_18_alloc_table charP_charM_s1_18))
           /\
           (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_19_alloc_table charP_charM_s2_19)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           (tmp_0_1 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 1383 50 62# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            begin
            (let __cil_tmp =
            (let _jessie_262 = (acc  charP_charM_s1_18 !tmp_0_1 ) in
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
            "expl:Precondition for tolower"
            (Function_tolower_0.tolower_0  _jessie_262 ))) in
            (c1 :=
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp ))));
             begin
             (tmp_0_2 := !mutable_s2);
              begin
              (mutable_s2 :=
               (shift_  !mutable_s2
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1391 50 62# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) )); () end end;
             (let __cil_tmp_13 =
             (let _jessie_267 = (acc  charP_charM_s2_19 !tmp_0_2 ) in
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_267 ))) in
             (c2 :=
              (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  __cil_tmp_13 )))) end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 1398 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_exc ())))
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_21 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_19 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 1408 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 1409 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_21 : int.
            (((<=) (0) i_21) /\
            (((<=) i_21 (Uint64.to_int (strlen !os1 charP_charM_s1_18))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_21)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_18 (shift !os1 i_21))))
             (tolower
             (Int8.to_int (select charP_charM_s2_19 (shift !os2 i_21))))))
            /\ ((=) i_21 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_4 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_4); (raise Return) end end end end end))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_strlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_6 : (pointer voidP)) 
   (voidP_s_6_43_alloc_table : (alloc_table voidP)) 
    (voidP_s_6_43_tag_table : (tag_table voidP)) 
     (charP_charM_s_6_43 : (memory voidP Int8.t)) : Uint64.t
      requires {
        ("expl:Internal"
        (#"/home/work/workspace/self/verker-gh/strlen.h" 80 13 25#
        "expl:Requires clause"
        (valid_str s_6 voidP_s_6_43_alloc_table charP_charM_s_6_43))) }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
         "expl:Ensures clause"
         (Uint64.(=) result (strlen s_6 charP_charM_s_6_43)))
        /\
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/strlen.h" 83 12 30#
         "expl:Ensures clause"
         (Int8.(=)
         (select charP_charM_s_6_43 (shift s_6 (Uint64.to_int result)))
         (#"whole_program.jc" 2891 35 46# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker-gh/strlen.h" 84 12 64#
        "expl:Ensures clause"
        (forall i_42 : int.
         ((((<=) (0) i_42) /\ ((<) i_42 (Uint64.to_int result))) ->
          (Int8.(<>) (select charP_charM_s_6_43 (shift s_6 i_42))
          (#"whole_program.jc" 2896 40 51# "expl:Integer cast" (Int8.of_int
          (0)))))))))))) }
  
end

module Function_strcat_safety
#"/home/work/workspace/self/verker-gh/strcat.c" 3 5 41# "expl:strcat, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcat #"/home/work/workspace/self/verker-gh/strcat.c" 3 5 41#
  "expl:Function strcat, safety" =
  fun
   (dest_8 : (pointer voidP)) (src_5 : (pointer voidP))
   (charP_charM_dest_8_20 : ref (memory voidP Int8.t))
   (voidP_dest_8_20_alloc_table : (alloc_table voidP))
   (voidP_src_5_21_alloc_table : (alloc_table voidP))
   (voidP_src_5_21_tag_table : (tag_table voidP)) (voidP_dest_8_20_tag_table
   : (tag_table voidP)) (charP_charM_src_5_21 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_5_21_alloc_table src_5) ->
     (((=) (typeof voidP_src_5_21_tag_table src_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_5_21_alloc_table src_5) i) /\
       ((<) i (offset_max voidP_src_5_21_alloc_table src_5))) ->
       ((=) (typeof voidP_src_5_21_tag_table (shift src_5 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_20_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_20_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_20_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_20_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_20_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 12 13 27#
    (valid_str src_5 voidP_src_5_21_alloc_table charP_charM_src_5_21))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 13 13 28#
    (valid_str dest_8 voidP_dest_8_20_alloc_table !charP_charM_dest_8_20))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 14 13 63#
    ((<=)
    (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))
    (18446744073709551615)))
   /\
   (#"/home/work/workspace/self/verker-gh/strcat.h" 15 13 55#
   (if
    ((<=) (0)
    (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))) then
    (((<=) (offset_min voidP_dest_8_20_alloc_table dest_8) (0)) /\
    (((>=) (offset_max voidP_dest_8_20_alloc_table dest_8)
     (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
     (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))
    /\
    (forall __framac_tmp12 : int.
     ((((<=) (0) __framac_tmp12) /\
      ((<=) __framac_tmp12
      (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_dest_8 = ref dest_8 in
   (let mutable_src_5 = ref src_5 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_3 = ref (any_pointer  () : (pointer voidP)) in
    (let dest_len = ref (Safe_uint64.any_  () ) in
    (let osrc = ref (any_pointer  () : (pointer voidP)) in
    (let mdest = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Safe_int8.any_  () ) in
    (let tmp_3 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     try
      begin
      (tmp_0_3 :=
       (let _jessie_308 = !mutable_dest_8 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcat.c" 5 1 5#
       "expl:Pointer index bounds" true) }); _jessie_308 end));
       begin
       (dest_len :=
        (let _jessie_305 =
        (let _jessie_306 = !tmp_0_3 in
        (#"/home/work/workspace/self/verker-gh/strcat.c" 6 29 40#
        "expl:Precondition for strlen"
        (Function_strlen_0_safe.strlen_0  _jessie_306
         voidP_dest_8_20_alloc_table voidP_dest_8_20_tag_table
         !charP_charM_dest_8_20 ))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 6 29 40#
        "expl:Pointer index bounds" true) }); _jessie_305 end));
        'Loop_25:
        loop
        invariant { (#"whole_program.jc" 1508 6 1084# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strcat.c" 10 18 41#
            (Int.(-) (Uint64.to_int !dest_len)
            (sub_pointer !mutable_dest_8 !tmp_0_3))) }
         begin
         any unit
         requires { true } reads { charP_charM_dest_8_20, mutable_dest_8 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strcat.c" 9 20 35#
            (valid_str !mutable_dest_8 voidP_dest_8_20_alloc_table
            !charP_charM_dest_8_20))
           /\
           (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
           (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 31#
            (same_block !tmp_0_3 !mutable_dest_8))
           /\
           (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 31#
            ((<=) (sub_pointer !tmp_0_3 !mutable_dest_8) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 27 49#
            (same_block !mutable_dest_8
            (shift !tmp_0_3 (Uint64.to_int !dest_len))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcat.c" 8 27 49#
           ((<=)
           (sub_pointer !mutable_dest_8
           (shift !tmp_0_3 (Uint64.to_int !dest_len))) (0))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strcat.c" 12 8 13#
           (Safe_int8.(<>) 
            (#"/home/work/workspace/self/verker-gh/strcat.c" 12 8 13#
            "expl:Pointer dereference"
            (acc  voidP_dest_8_20_alloc_table !charP_charM_dest_8_20
             !mutable_dest_8 ))
            (#"whole_program.jc" 1525 64 75# "expl:Integer cast"
            (Safe_int8.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            (mutable_dest_8 :=
             (let _jessie_307 =
             (shift_typesafe  !mutable_dest_8
              (Safe_int32.to_int 
               (#"whole_program.jc" 1527 52 64# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcat.c" 13 2 8#
             "expl:Pointer index bounds" true) }); _jessie_307 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_25 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_22 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { charP_charM_dest_8_20, mutable_dest_8 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strcat.c" 14 12 25#
         (Int8.(=) (select !charP_charM_dest_8_20 !mutable_dest_8)
         (#"whole_program.jc" 1534 52 63# "expl:Integer cast" (Int8.of_int
         (0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_dest_8 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strcat.c" 15 12 34#
         ((=) !mutable_dest_8 (shift !tmp_0_3 (Uint64.to_int !dest_len)))) } ;
        () end;
       begin
       (osrc :=
        (let _jessie_309 = !mutable_src_5 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 16 11 15#
        "expl:Pointer index bounds" true) }); _jessie_309 end));
        begin
        (mdest :=
         (let _jessie_310 = !mutable_dest_8 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strcat.c" 17 11 15#
         "expl:Pointer index bounds" true) }); _jessie_310 end));
         'Loop_26:
         loop
         invariant { (#"whole_program.jc" 1547 6 2628# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/strcat.c" 26 18 45#
             (Int.(-) (Uint64.to_int (strlen !osrc charP_charM_src_5_21))
             (sub_pointer !mutable_src_5 !osrc))) }
          begin
          any unit
          requires { true } reads { charP_charM_dest_8_20, mutable_dest_8,
          mutable_src_5 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 23 20 102#
             (forall i_25 : int.
              ((((<=) (0) i_25) /\
               ((<) i_25 (sub_pointer !mutable_src_5 !osrc))) ->
               (Int8.(=) (select !charP_charM_dest_8_20 (shift !mdest i_25))
               (select charP_charM_src_5_21 (shift !osrc i_25))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 22 20 34#
             (valid_str !mutable_src_5 voidP_src_5_21_alloc_table
             charP_charM_src_5_21))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 21 20 46#
             ((=) (sub_pointer !mutable_src_5 !osrc)
             (sub_pointer !mutable_dest_8 !mdest)))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
             (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
             ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 33#
              (same_block !mdest !mutable_dest_8))
             /\
             (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
             ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 33#
              ((<=) (sub_pointer !mdest !mutable_dest_8) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
             ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 29 57#
              (same_block !mutable_dest_8
              (shift !mdest
              (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strcat.c" 20 29 57#
             ((<=)
             (sub_pointer !mutable_dest_8
             (shift !mdest
             (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
            (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 31#
             (same_block !osrc !mutable_src_5))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 31#
             ((<=) (sub_pointer !osrc !mutable_src_5) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
            ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 28 54#
             (same_block !mutable_src_5
             (shift !osrc
             (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.c" 19 28 54#
            ((<=)
            (sub_pointer !mutable_src_5
            (shift !osrc (Uint64.to_int (strlen !osrc charP_charM_src_5_21))))
            (0)))))))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_1 :=
             (let _jessie_311 = !mutable_dest_8 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcat.c" 28 10 16#
             "expl:Pointer index bounds" true) }); _jessie_311 end));
             begin
             (mutable_dest_8 :=
              (let _jessie_312 =
              (shift_typesafe  !mutable_dest_8
               (Safe_int32.to_int 
                (#"whole_program.jc" 1588 55 67# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcat.c" 28 10 16#
              "expl:Pointer index bounds" true) }); _jessie_312 end));
              begin
              (tmp_3 :=
               (let _jessie_313 = !mutable_src_5 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strcat.c" 28 20 25#
               "expl:Pointer index bounds" true) }); _jessie_313 end));
               begin
               (mutable_src_5 :=
                (let _jessie_314 =
                (shift_typesafe  !mutable_src_5
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 1590 53 65# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/strcat.c" 28 20 25#
                "expl:Pointer index bounds" true) }); _jessie_314 end));
                (tmp_2 :=
                 (let _jessie_315 =
                 (#"/home/work/workspace/self/verker-gh/strcat.c" 28 19 25#
                 "expl:Pointer dereference"
                 (acc  voidP_src_5_21_alloc_table charP_charM_src_5_21 !tmp_3
                  )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/strcat.c" 28 9 25#
                 "expl:Pointer index bounds" true) }); _jessie_315 end)) end
              end end end;
             begin
             (let _jessie_317 =
             (let _jessie_316 = !tmp_2 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcat.c" 28 9 25#
             "expl:Pointer index bounds" true) }); _jessie_316 end) in
             (let _jessie_318 = !tmp_1 in
             (let _jessie_319 = (0) in
             (let _jessie_320 = _jessie_318 in
             (#"/home/work/workspace/self/verker-gh/strcat.c" 28 9 25#
             "expl:Pointer dereference"
             (upd  voidP_dest_8_20_alloc_table charP_charM_dest_8_20
              _jessie_318 _jessie_317 ))))));
              (if
              (#"/home/work/workspace/self/verker-gh/strcat.c" 28 8 34#
              (Safe_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strcat.c" 28 9 25#
               "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_2 ))
               (#"whole_program.jc" 1594 58 70# "expl:Integer cast"
               (Safe_int32.of_int (0))) )) then ()
              else (raise (Goto_while_1_break_exc ()))) end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_27 -> () end end end end end end end;
      (raise (Goto_while_1_break_exc ())) end with Goto_while_1_break_exc
     _jessie_23 ->
     'While_1_break:
     'While_1_break:
     begin
     ();
      begin
      any unit
      requires { true } reads { charP_charM_dest_8_20, mutable_dest_8 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 30 12 79#
        (forall i_26 : int.
         ((((<=) (0) i_26) /\ ((<) i_26 (Uint64.to_int !dest_len))) ->
          (Int8.(=)
          (select (at !charP_charM_dest_8_20 'Init)
          (shift (at !mutable_dest_8 'Init) i_26))
          (select !charP_charM_dest_8_20 (shift !tmp_0_3 i_26)))))) } ; ()
      end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_8_20, mutable_dest_8,
      mutable_src_5 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
        (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
        ((#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
         (Int8.(=)
         (select !charP_charM_dest_8_20
         (shift !mutable_dest_8 (Int.(-_) (1))))
         (#"whole_program.jc" 1612 53 64# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
        (Int8.(=)
        (select charP_charM_src_5_21 (shift !mutable_src_5 (Int.(-_) (1))))
        (#"whole_program.jc" 1614 54 65# "expl:Integer cast" (Int8.of_int
        (0)))))))) } ; () end;
      begin
      any unit
      requires { true } reads { mutable_dest_8 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 32 12 53#
        ((=) (shift !mutable_dest_8 (Int.(-_) (1)))
        (shift (shift !tmp_0_3 (Uint64.to_int !dest_len))
        (Uint64.to_int (strlen !osrc charP_charM_src_5_21))))) } ; () end;
      begin
      any unit
      requires { true } reads { mutable_src_5 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 33 12 42#
        ((=) (Uint64.to_int (strlen !osrc charP_charM_src_5_21))
        (Int.(-) (sub_pointer !mutable_src_5 !osrc) (1)))) } ; () end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_8_20 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 34 12 109#
        (exists n_3 : Uint64.t.
         ((Int8.(=)
          (select !charP_charM_dest_8_20
          (shift !tmp_0_3 (Uint64.to_int n_3)))
          (#"whole_program.jc" 1636 56 67# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         ((if ((<=) (0) (Uint64.to_int n_3)) then
           (((<=) (offset_min voidP_dest_8_20_alloc_table !tmp_0_3) (0)) /\
           (((>=) (offset_max voidP_dest_8_20_alloc_table !tmp_0_3)
            (Uint64.to_int n_3))
           /\
           (forall __framac_tmp11 : int.
            ((((<=) (0) __framac_tmp11) /\
             ((<=) __framac_tmp11 (Uint64.to_int n_3))) -> ((=) true true)))))
           else ((=) true true))
         /\
         (Uint64.(=) n_3 (#"whole_program.jc" 1652 56 244#
         "expl:Integer cast"
         (Uint64.of_int
         (Int.(+) (Uint64.to_int !dest_len)
         (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))))))) } ; ()
      end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_8_20 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcat.c" 35 12 26#
        (valid_str !tmp_0_3 voidP_dest_8_20_alloc_table
        !charP_charM_dest_8_20)) } ; () end;
      begin
      (return :=
       (let _jessie_321 = !tmp_0_3 in
       begin
       (assert {
       (#"whole_program.jc" 1663 7 21# "expl:Pointer index bounds" true) });
        _jessie_321 end)); (raise Return) end end end))))))); absurd  end
    with Return -> !return end)))
  
end

module Function_strlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_6 : (pointer voidP)) 
   (voidP_s_6_43_alloc_table : (alloc_table voidP)) 
    (voidP_s_6_43_tag_table : (tag_table voidP)) 
     (charP_charM_s_6_43 : (memory voidP Int8.t)) : Uint64.t
      requires { true }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
         "expl:Ensures clause"
         (Uint64.(=) result (strlen s_6 charP_charM_s_6_43)))
        /\
        (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/strlen.h" 83 12 30#
         "expl:Ensures clause"
         (Int8.(=)
         (select charP_charM_s_6_43 (shift s_6 (Uint64.to_int result)))
         (#"whole_program.jc" 2891 35 46# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker-gh/strlen.h" 84 12 64#
        "expl:Ensures clause"
        (forall i_42 : int.
         ((((<=) (0) i_42) /\ ((<) i_42 (Uint64.to_int result))) ->
          (Int8.(<>) (select charP_charM_s_6_43 (shift s_6 i_42))
          (#"whole_program.jc" 2896 40 51# "expl:Integer cast" (Int8.of_int
          (0)))))))))))) }
  
end

module Function_strcat_behaviors
#"/home/work/workspace/self/verker-gh/strcat.c" 3 5 41#
"expl:strcat, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcat_ensures_default
  #"/home/work/workspace/self/verker-gh/strcat.c" 3 5 41#
  "expl:Function strcat, default behavior" =
  fun
   (dest_8 : (pointer voidP)) (src_5 : (pointer voidP))
   (charP_charM_dest_8_20 : ref (memory voidP Int8.t))
   (voidP_dest_8_20_alloc_table : (alloc_table voidP))
   (voidP_src_5_21_alloc_table : (alloc_table voidP))
   (voidP_src_5_21_tag_table : (tag_table voidP)) (voidP_dest_8_20_tag_table
   : (tag_table voidP)) (charP_charM_src_5_21 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_5_21_alloc_table src_5) ->
     (((=) (typeof voidP_src_5_21_tag_table src_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_5_21_alloc_table src_5) i) /\
       ((<) i (offset_max voidP_src_5_21_alloc_table src_5))) ->
       ((=) (typeof voidP_src_5_21_tag_table (shift src_5 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_20_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_20_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_20_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_20_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_20_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 12 13 27#
    (valid_str src_5 voidP_src_5_21_alloc_table charP_charM_src_5_21))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 13 13 28#
    (valid_str dest_8 voidP_dest_8_20_alloc_table !charP_charM_dest_8_20))
   /\
   (#"whole_program.jc" 1449 12 1288#
   ((#"/home/work/workspace/self/verker-gh/strcat.h" 14 13 63#
    ((<=)
    (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))
    (18446744073709551615)))
   /\
   (#"/home/work/workspace/self/verker-gh/strcat.h" 15 13 55#
   (if
    ((<=) (0)
    (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))) then
    (((<=) (offset_min voidP_dest_8_20_alloc_table dest_8) (0)) /\
    (((>=) (offset_max voidP_dest_8_20_alloc_table dest_8)
     (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
     (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))
    /\
    (forall __framac_tmp12 : int.
     ((((<=) (0) __framac_tmp12) /\
      ((<=) __framac_tmp12
      (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 1469 10 192# "expl:Assigns clause"
      (not_assigns voidP_dest_8_20_alloc_table voidP_dest_8_20_alloc_table
      (old !charP_charM_dest_8_20) !charP_charM_dest_8_20
      (pset_range (pset_singleton dest_8)
      (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
      (Int.(+) (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
      "expl:Ensures clause" ((=) result dest_8))
     /\
     (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcat.h" 18 12 30#
      "expl:Ensures clause"
      (valid_str result voidP_dest_8_20_alloc_table !charP_charM_dest_8_20))
     /\
     (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcat.h" 19 12 107#
      "expl:Ensures clause"
      (forall i_27 : int.
       ((((<=) (0) i_27) /\
        ((<) i_27
        (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20))))) ->
        (Int8.(=) (select (old !charP_charM_dest_8_20) (shift dest_8 i_27))
        (select !charP_charM_dest_8_20 (shift result i_27))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strcat.h" 21 12 156#
     "expl:Ensures clause"
     (forall i_28 : int.
      ((((<=) (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
        i_28)
       /\
       ((<) i_28
       (Int.(+) (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
       (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
       (Int8.(=)
       (select charP_charM_src_5_21
       (shift src_5
       (Int.(-) i_28
       (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20))))))
       (select !charP_charM_dest_8_20 (shift result i_28))))))))))))))) }
   diverges  ->
   (let mutable_dest_8 = ref dest_8 in
   (let mutable_src_5 = ref src_5 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_3 = ref (any_pointer  () : (pointer voidP)) in
    (let dest_len = ref (Unsafe_uint64.any_  () ) in
    (let osrc = ref (any_pointer  () : (pointer voidP)) in
    (let mdest = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Unsafe_int8.any_  () ) in
    (let tmp_3 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     try
      begin
      (tmp_0_3 := !mutable_dest_8);
       begin
       (dest_len :=
        (let _jessie_289 = !tmp_0_3 in
        (#"/home/work/workspace/self/verker-gh/strcat.c" 6 29 40#
        "expl:Precondition for strlen"
        (Function_strlen_0.strlen_0  _jessie_289 voidP_dest_8_20_alloc_table
         voidP_dest_8_20_tag_table !charP_charM_dest_8_20 ))));
        'Loop_23:
        loop
        invariant
          { (((#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
              (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 31#
               (same_block !tmp_0_3 !mutable_dest_8))
              /\
              (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 31#
               ((<=) (sub_pointer !tmp_0_3 !mutable_dest_8) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 8 27 49#
               (same_block !mutable_dest_8
               (shift !tmp_0_3 (Uint64.to_int !dest_len))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcat.c" 8 27 49#
              ((<=)
              (sub_pointer !mutable_dest_8
              (shift !tmp_0_3 (Uint64.to_int !dest_len))) (0))))))))))
             &&
             (#"/home/work/workspace/self/verker-gh/strcat.c" 9 20 35#
             (valid_str !mutable_dest_8 voidP_dest_8_20_alloc_table
             !charP_charM_dest_8_20)))
            /\
            (#"whole_program.jc" 1469 10 192# "expl:Assigns clause"
            (not_assigns voidP_dest_8_20_alloc_table
            voidP_dest_8_20_alloc_table (at !charP_charM_dest_8_20 'Init)
            !charP_charM_dest_8_20
            (pset_range (pset_singleton (at !mutable_dest_8 'Init))
            (Uint64.to_int
            (strlen (at !mutable_dest_8 'Init) (at !charP_charM_dest_8_20
            'Init)))
            (Int.(+)
            (Uint64.to_int
            (strlen (at !mutable_dest_8 'Init) (at !charP_charM_dest_8_20
            'Init)))
            (Uint64.to_int
            (strlen (at !mutable_src_5 'Init) charP_charM_src_5_21))))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strcat.c" 12 8 13#
           (Unsafe_int8.(<>)  (acc  !charP_charM_dest_8_20 !mutable_dest_8 )
            (#"whole_program.jc" 1525 64 75# "expl:Integer cast"
            (Unsafe_int8.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            (mutable_dest_8 :=
             (shift_  !mutable_dest_8
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 1527 52 64# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_25 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_22 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcat.c" 14 12 25#
       "expl:Assertion in line 14"
       (Int8.(=) (select !charP_charM_dest_8_20 !mutable_dest_8)
       (#"whole_program.jc" 1534 52 63# "expl:Integer cast" (Int8.of_int
       (0))))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcat.c" 15 12 34#
       "expl:Assertion in line 15"
       ((=) !mutable_dest_8 (shift !tmp_0_3 (Uint64.to_int !dest_len)))) });
        () end;
       begin
       (osrc := !mutable_src_5);
        begin
        (mdest := !mutable_dest_8);
         'Loop_24:
         loop
         invariant
           { (((#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
               (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 31#
                (same_block !osrc !mutable_src_5))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 31#
                ((<=) (sub_pointer !osrc !mutable_src_5) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 19 20 54#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 19 28 54#
                (same_block !mutable_src_5
                (shift !osrc
                (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 19 28 54#
               ((<=)
               (sub_pointer !mutable_src_5
               (shift !osrc
               (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
               (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 33#
                (same_block !mdest !mutable_dest_8))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 33#
                ((<=) (sub_pointer !mdest !mutable_dest_8) (0)))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 20 20 57#
               ((#"/home/work/workspace/self/verker-gh/strcat.c" 20 29 57#
                (same_block !mutable_dest_8
                (shift !mdest
                (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))
               /\
               (#"/home/work/workspace/self/verker-gh/strcat.c" 20 29 57#
               ((<=)
               (sub_pointer !mutable_dest_8
               (shift !mdest
               (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 21 20 46#
               ((=) (sub_pointer !mutable_src_5 !osrc)
               (sub_pointer !mutable_dest_8 !mdest)))
              &&
              ((#"/home/work/workspace/self/verker-gh/strcat.c" 22 20 34#
               (valid_str !mutable_src_5 voidP_src_5_21_alloc_table
               charP_charM_src_5_21))
              &&
              (#"/home/work/workspace/self/verker-gh/strcat.c" 23 20 102#
              (forall i_25 : int.
               ((((<=) (0) i_25) /\
                ((<) i_25 (sub_pointer !mutable_src_5 !osrc))) ->
                (Int8.(=) (select !charP_charM_dest_8_20 (shift !mdest i_25))
                (select charP_charM_src_5_21 (shift !osrc i_25))))))))))
             /\
             ((#"whole_program.jc" 1547 6 2628# "expl:Assigns clause"
              (not_assigns voidP_dest_8_20_alloc_table
              voidP_dest_8_20_alloc_table (at !charP_charM_dest_8_20
              'Loop_24) !charP_charM_dest_8_20
              (pset_range (pset_singleton !mdest) (0)
              (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))
             /\
             (#"whole_program.jc" 1469 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_8_20_alloc_table
             voidP_dest_8_20_alloc_table (at !charP_charM_dest_8_20 'Init)
             !charP_charM_dest_8_20
             (pset_range (pset_singleton (at !mutable_dest_8 'Init))
             (Uint64.to_int
             (strlen (at !mutable_dest_8 'Init) (at !charP_charM_dest_8_20
             'Init)))
             (Int.(+)
             (Uint64.to_int
             (strlen (at !mutable_dest_8 'Init) (at !charP_charM_dest_8_20
             'Init)))
             (Uint64.to_int
             (strlen (at !mutable_src_5 'Init) charP_charM_src_5_21)))))))) } 
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_1 := !mutable_dest_8);
             begin
             (mutable_dest_8 :=
              (shift_  !mutable_dest_8
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 1588 55 67# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              begin
              (tmp_3 := !mutable_src_5);
               begin
               (mutable_src_5 :=
                (shift_  !mutable_src_5
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 1590 53 65# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (tmp_2 := (acc  charP_charM_src_5_21 !tmp_3 )) end end end
            end;
             begin
             (let _jessie_300 = !tmp_2 in
             (let _jessie_301 = !tmp_1 in
             (let _jessie_302 = (0) in
             (let _jessie_303 = _jessie_301 in
             (upd  charP_charM_dest_8_20 _jessie_303 _jessie_300 )))));
              (if
              (#"/home/work/workspace/self/verker-gh/strcat.c" 28 8 34#
              (Unsafe_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strcat.c" 28 9 25#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_int8.cast  !tmp_2 ))
               (#"whole_program.jc" 1594 58 70# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) then ()
              else (raise (Goto_while_1_break_exc ()))) end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_27 -> () end end end end end end end;
      (raise (Goto_while_1_break_exc ())) end with Goto_while_1_break_exc
     _jessie_23 ->
     'While_1_break:
     'While_1_break:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 30 12 79#
      "expl:Assertion in line 30"
      (forall i_26 : int.
       ((((<=) (0) i_26) /\ ((<) i_26 (Uint64.to_int !dest_len))) ->
        (Int8.(=)
        (select (at !charP_charM_dest_8_20 'Init)
        (shift (at !mutable_dest_8 'Init) i_26))
        (select !charP_charM_dest_8_20 (shift !tmp_0_3 i_26)))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
      "expl:Assertion in line 31"
      (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
      "expl:Assertion in line 31"
      ((#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
       "expl:Assertion in line 31"
       (Int8.(=)
       (select !charP_charM_dest_8_20 (shift !mutable_dest_8 (Int.(-_) (1))))
       (#"whole_program.jc" 1612 53 64# "expl:Integer cast" (Int8.of_int
       (0)))))
      /\
      (#"/home/work/workspace/self/verker-gh/strcat.c" 31 12 47#
      "expl:Assertion in line 31"
      (Int8.(=)
      (select charP_charM_src_5_21 (shift !mutable_src_5 (Int.(-_) (1))))
      (#"whole_program.jc" 1614 54 65# "expl:Integer cast" (Int8.of_int
      (0)))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 32 12 53#
      "expl:Assertion in line 32"
      ((=) (shift !mutable_dest_8 (Int.(-_) (1)))
      (shift (shift !tmp_0_3 (Uint64.to_int !dest_len))
      (Uint64.to_int (strlen !osrc charP_charM_src_5_21))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 33 12 42#
      "expl:Assertion in line 33"
      ((=) (Uint64.to_int (strlen !osrc charP_charM_src_5_21))
      (Int.(-) (sub_pointer !mutable_src_5 !osrc) (1)))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 34 12 109#
      "expl:Assertion in line 34"
      (exists n_3 : Uint64.t.
       ((Int8.(=)
        (select !charP_charM_dest_8_20 (shift !tmp_0_3 (Uint64.to_int n_3)))
        (#"whole_program.jc" 1636 56 67# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       ((if ((<=) (0) (Uint64.to_int n_3)) then
         (((<=) (offset_min voidP_dest_8_20_alloc_table !tmp_0_3) (0)) /\
         (((>=) (offset_max voidP_dest_8_20_alloc_table !tmp_0_3)
          (Uint64.to_int n_3))
         /\
         (forall __framac_tmp11 : int.
          ((((<=) (0) __framac_tmp11) /\
           ((<=) __framac_tmp11 (Uint64.to_int n_3))) -> ((=) true true)))))
         else ((=) true true))
       /\
       (Uint64.(=) n_3 (#"whole_program.jc" 1652 56 244# "expl:Integer cast"
       (Uint64.of_int
       (Int.(+) (Uint64.to_int !dest_len)
       (Uint64.to_int (strlen !osrc charP_charM_src_5_21)))))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcat.c" 35 12 26#
      "expl:Assertion in line 35"
      (valid_str !tmp_0_3 voidP_dest_8_20_alloc_table !charP_charM_dest_8_20))
      }); () end; begin (return := !tmp_0_3); (raise Return) end end end)))))));
     absurd  end with Return -> !return end)))
  
end

theory Axiomatic_Strchr

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  function strchr (pointer voidP) Int8.t (memory voidP Int8.t) : (pointer
  voidP)
  
  lemma Strchr_mem #"/home/work/workspace/self/verker-gh/strchr.h" 12 7 146#
  "expl:Lemma strchr_mem" :
  (forall voidP_str_8_179_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_8_179_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 12 7 146#
    (forall str_8 : (pointer voidP).
     (forall c_14_0 : Int8.t.
      ((valid_str str_8 voidP_str_8_179_alloc_table_at_L
       charP_charM_str_8_179_at_L) ->
       (((same_block str_8 (strchr str_8 c_14_0 charP_charM_str_8_179_at_L))
        /\
        (((<=)
         (sub_pointer str_8 (strchr str_8 c_14_0 charP_charM_str_8_179_at_L))
         (0))
        /\
        ((same_block (strchr str_8 c_14_0 charP_charM_str_8_179_at_L)
         (shift str_8
         (Uint64.to_int (strlen str_8 charP_charM_str_8_179_at_L))))
        /\
        (((<=)
         (sub_pointer (strchr str_8 c_14_0 charP_charM_str_8_179_at_L)
         (shift str_8
         (Uint64.to_int (strlen str_8 charP_charM_str_8_179_at_L)))) (0))
        /\ (not ((=) (strchr str_8 c_14_0 charP_charM_str_8_179_at_L) null))))))
       \/
       (((=) (strchr str_8 c_14_0 charP_charM_str_8_179_at_L) null) /\
       (not
       ((same_block str_8 (strchr str_8 c_14_0 charP_charM_str_8_179_at_L))
       /\
       (((<=)
        (sub_pointer str_8 (strchr str_8 c_14_0 charP_charM_str_8_179_at_L))
        (0))
       /\
       ((same_block (strchr str_8 c_14_0 charP_charM_str_8_179_at_L)
        (shift str_8
        (Uint64.to_int (strlen str_8 charP_charM_str_8_179_at_L))))
       /\
       ((<=)
       (sub_pointer (strchr str_8 c_14_0 charP_charM_str_8_179_at_L)
       (shift str_8
       (Uint64.to_int (strlen str_8 charP_charM_str_8_179_at_L)))) (0))))))))))))))
  
  lemma Strchr_iter_one
  #"/home/work/workspace/self/verker-gh/strchr.h" 17 7 128#
  "expl:Lemma strchr_iter_one" :
  (forall voidP_str_9_192_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_9_192_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 17 7 128#
    (forall str_9 : (pointer voidP).
     (forall c_15_0 : Int8.t.
      (((valid_str str_9 voidP_str_9_192_alloc_table_at_L
        charP_charM_str_9_192_at_L)
       /\
       ((Int8.(<>) (select charP_charM_str_9_192_at_L str_9) c_15_0) /\
       (Int8.(<>) (select charP_charM_str_9_192_at_L str_9)
       (#"whole_program.jc" 1702 35 46# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (strchr str_9 c_15_0 charP_charM_str_9_192_at_L)
       (strchr (shift str_9 (1)) c_15_0 charP_charM_str_9_192_at_L))))))))
  
  lemma Strchr_res #"/home/work/workspace/self/verker-gh/strchr.h" 21 7 112#
  "expl:Lemma strchr_res" :
  (forall voidP_str_10_195_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_10_195_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 21 7 112#
    (forall str_10 : (pointer voidP).
     (forall c_16_0 : Int8.t.
      ((valid_str str_10 voidP_str_10_195_alloc_table_at_L
       charP_charM_str_10_195_at_L) ->
       ((((=) (strchr str_10 c_16_0 charP_charM_str_10_195_at_L) null) /\
        (not
        (Int8.(=)
        (select charP_charM_str_10_195_at_L
        (strchr str_10 c_16_0 charP_charM_str_10_195_at_L)) c_16_0)))
       \/
       ((Int8.(=)
        (select charP_charM_str_10_195_at_L
        (strchr str_10 c_16_0 charP_charM_str_10_195_at_L)) c_16_0)
       /\
       (not ((=) (strchr str_10 c_16_0 charP_charM_str_10_195_at_L) null))))))))))
  
  lemma Strchr_at_end_zero
  #"/home/work/workspace/self/verker-gh/strchr.h" 25 7 101#
  "expl:Lemma strchr_at_end_zero" :
  (forall voidP_str_11_202_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_11_202_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 25 7 101#
    (forall str_11 : (pointer voidP).
     (forall c_17_0 : Int8.t.
      (((((<=) (offset_min voidP_str_11_202_alloc_table_at_L str_11) (0)) /\
        (((>=) (offset_max voidP_str_11_202_alloc_table_at_L str_11) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_str_11_202_at_L str_11)
       (#"whole_program.jc" 1720 36 47# "expl:Integer cast" (Int8.of_int
       (0))))) ->
       ((=) (strchr str_11 c_17_0 charP_charM_str_11_202_at_L) null)))))))
  
  lemma Strchr_at_end_char
  #"/home/work/workspace/self/verker-gh/strchr.h" 29 7 96#
  "expl:Lemma strchr_at_end_char" :
  (forall voidP_str_12_205_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_12_205_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 29 7 96#
    (forall str_12 : (pointer voidP).
     (forall c_18_0 : Int8.t.
      (((((<=) (offset_min voidP_str_12_205_alloc_table_at_L str_12) (0)) /\
        (((>=) (offset_max voidP_str_12_205_alloc_table_at_L str_12) (0)) /\
        ((=) true true)))
       /\ (Int8.(=) (select charP_charM_str_12_205_at_L str_12) c_18_0)) ->
       ((=) (strchr str_12 c_18_0 charP_charM_str_12_205_at_L) str_12)))))))
  
  lemma Strchr_defn #"/home/work/workspace/self/verker-gh/strchr.h" 34 7 206#
  "expl:Lemma strchr_defn" :
  (forall voidP_str_13_207_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_13_207_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 34 7 206#
    (forall str_13 : (pointer voidP).
     (forall c_19_0 : Int8.t.
      (forall i_29 : int.
       (((valid_str str_13 voidP_str_13_207_alloc_table_at_L
         charP_charM_str_13_207_at_L)
        /\
        (((<=) (0) i_29) /\
        (((<=) i_29
         (Uint64.to_int (strlen str_13 charP_charM_str_13_207_at_L)))
        /\
        ((forall j_6 : int.
          ((((<=) (0) j_6) /\ ((<) j_6 i_29)) ->
           (Int8.(<>) (select charP_charM_str_13_207_at_L (shift str_13 j_6))
           c_19_0)))
        /\
        (Int8.(=) (select charP_charM_str_13_207_at_L (shift str_13 i_29))
        c_19_0))))) ->
        ((=) (shift str_13 i_29)
        (strchr str_13 c_19_0 charP_charM_str_13_207_at_L)))))))))
  
  lemma Strchr_skipped
  #"/home/work/workspace/self/verker-gh/strchr.h" 40 7 142#
  "expl:Lemma strchr_skipped" :
  (forall voidP_str_14_209_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_209_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchr.h" 40 7 142#
    (forall str_14 : (pointer voidP).
     (forall c_20 : Int8.t.
      (forall i_30 : int.
       (((valid_str str_14 voidP_str_14_209_alloc_table_at_L
         charP_charM_str_14_209_at_L)
        /\
        (((<=) (0) i_30) /\
        (((<) i_30
         (sub_pointer (strchr str_14 c_20 charP_charM_str_14_209_at_L)
         str_14))
        /\
        ((<=)
        (sub_pointer (strchr str_14 c_20 charP_charM_str_14_209_at_L) str_14)
        (Uint64.to_int (strlen str_14 charP_charM_str_14_209_at_L)))))) ->
        (Int8.(<>) (select charP_charM_str_14_209_at_L (shift str_14 i_30))
        c_20))))))))
  
  axiom Strchr_definition :
  (forall str_7 : (pointer voidP).
   (forall c_13_0 : Int8.t.
    (forall charP_charM_str_7_23_at_L : (memory voidP Int8.t)
     [(strchr str_7 c_13_0 charP_charM_str_7_23_at_L)] .
     ((=) (strchr str_7 c_13_0 charP_charM_str_7_23_at_L)
     (if (Int8.(=) (select charP_charM_str_7_23_at_L str_7) c_13_0) then
      str_7 else
      (if
       (Int8.(=) (select charP_charM_str_7_23_at_L str_7)
       (#"whole_program.jc" 1671 54 65# "expl:Integer cast" (Int8.of_int
       (0)))) then null else
       (strchr (shift str_7 (1)) c_13_0 charP_charM_str_7_23_at_L)))))))
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strchr_0_safety
#"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34# "expl:strchr, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  let strchr_0 #"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34#
  "expl:Function strchr, safety" =
  fun
   (s_3 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_25_alloc_table :
   (alloc_table voidP)) (voidP_s_3_25_tag_table : (tag_table voidP))
   (charP_charM_s_3_25 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_3_25_alloc_table s_3) ->
     (((=) (typeof voidP_s_3_25_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_25_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_3_25_alloc_table s_3))) ->
       ((=) (typeof voidP_s_3_25_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchr.h" 53 13 25#
   (valid_str s_3 voidP_s_3_25_alloc_table charP_charM_s_3_25))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_3 = ref s_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_5 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os :=
        (let _jessie_337 = !mutable_s_3 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strchr.c" 5 11 15#
        "expl:Pointer index bounds" true) }); _jessie_337 end));
        'Loop_30:
        loop
        invariant { (#"whole_program.jc" 1855 6 1959# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strchr.c" 11 18 39#
            (Int.(-) (Uint64.to_int (strlen !os charP_charM_s_3_25))
            (sub_pointer !mutable_s_3 !os))) }
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 10 20 67#
            ((=)
            (strchr !mutable_s_3 (#"whole_program.jc" 1877 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_25)
            (strchr !os (#"whole_program.jc" 1878 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 9 20 71#
            (forall p_4_0 : (pointer voidP).
             (((same_block !os p_4_0) /\
              (((<=) (sub_pointer !os p_4_0) (0)) /\
              ((same_block p_4_0 !mutable_s_3) /\
              ((<) (sub_pointer p_4_0 !mutable_s_3) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_25 p_4_0)
              (#"whole_program.jc" 1875 46 61# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             (same_block !os !mutable_s_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             ((<=) (sub_pointer !os !mutable_s_3) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
             (same_block !mutable_s_3
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
            ((<=)
            (sub_pointer !mutable_s_3
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.c" 7 20 32#
           (valid_str !mutable_s_3 voidP_s_3_25_alloc_table
           charP_charM_s_3_25))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 27#
           (Safe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 10#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 10#
             "expl:Pointer dereference"
             (acc  voidP_s_3_25_alloc_table charP_charM_s_3_25 !mutable_s_3 ))
             ))
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())));
            (if
            (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 16#
            (Safe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 8#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_int8.cast 
              (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 8#
              "expl:Pointer dereference"
              (acc  voidP_s_3_25_alloc_table charP_charM_s_3_25 !mutable_s_3
               )) ))
             (#"whole_program.jc" 1886 28 40# "expl:Integer cast"
             (Safe_bit_int32.of_int_const 0)) ))
            then
             begin
             (__retres_5 :=
              (let _jessie_338 = (null  ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strchr.c" 15 3 22#
              "expl:Pointer index bounds" true) }); _jessie_338 end));
              (raise (Return_label_exc ())) end else ());
            (mutable_s_3 :=
             (let _jessie_339 =
             (shift_typesafe  !mutable_s_3
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 1891 46 58# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 29 32#
             "expl:Pointer index bounds" true) }); _jessie_339 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_28 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 16 12 57#
          ((Bit_int8.(<>) (#"whole_program.jc" 1897 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1898 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25))))
          /\
          ((<)
          (sub_pointer !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 17 12 58#
          ((Bit_int8.(=) (#"whole_program.jc" 1912 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1913 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))) } ;
         () end;
        (__retres_5 :=
         (let _jessie_340 = !mutable_s_3 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strchr.c" 18 1 18#
         "expl:Pointer index bounds" true) }); _jessie_340 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_29 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_341 = !__retres_5 in
       begin
       (assert {
       (#"whole_program.jc" 1922 7 24# "expl:Pointer index bounds" true) });
        _jessie_341 end)); (raise Return) end end)); absurd  end with Return
    -> !return end))
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strchr_0_behaviors
#"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34#
"expl:strchr, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  let strchr_ensures_default
  #"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34#
  "expl:Function strchr, default behavior" =
  fun
   (s_3 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_25_alloc_table :
   (alloc_table voidP)) (voidP_s_3_25_tag_table : (tag_table voidP))
   (charP_charM_s_3_25 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_3_25_alloc_table s_3) ->
     (((=) (typeof voidP_s_3_25_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_25_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_3_25_alloc_table s_3))) ->
       ((=) (typeof voidP_s_3_25_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchr.h" 53 13 25#
   (valid_str s_3 voidP_s_3_25_alloc_table charP_charM_s_3_25))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchr.h" 55 12 44#
     "expl:Ensures clause"
     ((=) result
     (strchr s_3 (#"whole_program.jc" 1761 49 73# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))) }
   diverges  ->
   (let mutable_s_3 = ref s_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 1797 10 1709# "expl:Behavior disjointness check"
    (not
    ((forall p_7_0 : (pointer voidP).
      (((same_block !mutable_s_3 p_7_0) /\
       (((<=) (sub_pointer !mutable_s_3 p_7_0) (0)) /\
       ((same_block p_7_0
        (shift !mutable_s_3
        (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25))))
       /\
       ((<=)
       (sub_pointer p_7_0
       (shift !mutable_s_3
       (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25)))) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_3_25 p_7_0)
       (#"whole_program.jc" 1809 54 69# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14)))))
    /\
    (exists p_5_0 : (pointer voidP).
     ((same_block !mutable_s_3 p_5_0) /\
     (((<=) (sub_pointer !mutable_s_3 p_5_0) (0)) /\
     ((same_block p_5_0
      (shift !mutable_s_3
      (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25))))
     /\
     (((<=)
      (sub_pointer p_5_0
      (shift !mutable_s_3
      (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_3_25 p_5_0)
     (#"whole_program.jc" 1822 55 70# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))) });
     (check {
     (#"whole_program.jc" 1824 10 1549# "expl:Behavior completeness check"
     ((exists p_5_1 : (pointer voidP).
       ((same_block !mutable_s_3 p_5_1) /\
       (((<=) (sub_pointer !mutable_s_3 p_5_1) (0)) /\
       ((same_block p_5_1
        (shift !mutable_s_3
        (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25))))
       /\
       (((<=)
        (sub_pointer p_5_1
        (shift !mutable_s_3
        (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25)))) (0))
       /\
       (Bit_int8.(=) (select charP_charM_s_3_25 p_5_1)
       (#"whole_program.jc" 1835 51 66# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))
     \/
     (forall p_7_1 : (pointer voidP).
      (((same_block !mutable_s_3 p_7_1) /\
       (((<=) (sub_pointer !mutable_s_3 p_7_1) (0)) /\
       ((same_block p_7_1
        (shift !mutable_s_3
        (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25))))
       /\
       ((<=)
       (sub_pointer p_7_1
       (shift !mutable_s_3
       (Uint64.to_int (strlen !mutable_s_3 charP_charM_s_3_25)))) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_3_25 p_7_1)
       (#"whole_program.jc" 1847 52 67# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14))))))) });
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_5 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3);
        'Loop_27:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/strchr.c" 7 20 32#
             (valid_str !mutable_s_3 voidP_s_3_25_alloc_table
             charP_charM_s_3_25))
            &&
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
             (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
              (same_block !os !mutable_s_3))
             /\
             (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
              ((<=) (sub_pointer !os !mutable_s_3) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
              (same_block !mutable_s_3
              (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
             ((<=)
             (sub_pointer !mutable_s_3
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 9 20 71#
             (forall p_4_0 : (pointer voidP).
              (((same_block !os p_4_0) /\
               (((<=) (sub_pointer !os p_4_0) (0)) /\
               ((same_block p_4_0 !mutable_s_3) /\
               ((<) (sub_pointer p_4_0 !mutable_s_3) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_3_25 p_4_0)
               (#"whole_program.jc" 1875 46 61# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
            &&
            (#"/home/work/workspace/self/verker-gh/strchr.c" 10 20 67#
            ((=)
            (strchr !mutable_s_3 (#"whole_program.jc" 1877 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_25)
            (strchr !os (#"whole_program.jc" 1878 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())));
            (if
            (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
             (#"whole_program.jc" 1886 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin (__retres_5 := (null  )); (raise (Return_label_exc ()))
             end else ());
            (mutable_s_3 :=
             (shift_  !mutable_s_3
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 1891 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_28 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strchr.c" 16 12 57#
        "expl:Assertion in line 16"
        ((Bit_int8.(<>) (#"whole_program.jc" 1897 52 67# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14))
         (#"whole_program.jc" 1898 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))
        <->
        ((same_block !mutable_s_3
         (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25))))
        /\
        ((<)
        (sub_pointer !mutable_s_3
        (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0)))))
        }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strchr.c" 17 12 58#
        "expl:Assertion in line 17"
        ((Bit_int8.(=) (#"whole_program.jc" 1912 52 67# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14))
         (#"whole_program.jc" 1913 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))
        <->
        ((=) !mutable_s_3
        (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))) }); ()
        end; (__retres_5 := !mutable_s_3) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_29 ->
      'Return_label:
      'Return_label: begin (return := !__retres_5); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let strchr_ensures_exists
  #"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34#
  "expl:Function strchr, behavior exists" =
  fun
   (s_3 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_25_alloc_table :
   (alloc_table voidP)) (voidP_s_3_25_tag_table : (tag_table voidP))
   (charP_charM_s_3_25 : (memory voidP Int8.t)) 
   requires {
   ((exists p_5 : (pointer voidP).
     ((same_block s_3 p_5) /\
     (((<=) (sub_pointer s_3 p_5) (0)) /\
     ((same_block p_5
      (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
     /\
     (((<=)
      (sub_pointer p_5
      (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_3_25 p_5)
     (#"whole_program.jc" 1776 28 43# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))
   /\
   (((allocated voidP_s_3_25_alloc_table s_3) ->
     (((=) (typeof voidP_s_3_25_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_25_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_3_25_alloc_table s_3))) ->
       ((=) (typeof voidP_s_3_25_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchr.h" 53 13 25#
   (valid_str s_3 voidP_s_3_25_alloc_table charP_charM_s_3_25)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
      "expl:Ensures clause" (same_block s_3 result))
     /\
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_3 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
      "expl:Ensures clause"
      (same_block result
      (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchr.h" 62 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_3_25 result)
      (#"whole_program.jc" 1787 51 75# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_14))))
     /\
     (#"/home/work/workspace/self/verker-gh/strchr.h" 63 15 69#
     "expl:Ensures clause"
     (forall p_6 : (pointer voidP).
      (((same_block s_3 p_6) /\
       (((<=) (sub_pointer s_3 p_6) (0)) /\
       ((same_block p_6 result) /\ ((<) (sub_pointer p_6 result) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_3_25 p_6)
       (#"whole_program.jc" 1795 52 76# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))))))))))))) } diverges 
   ->
   (let mutable_s_3 = ref s_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_5 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3);
        'Loop_29:
        loop
        invariant { (#"whole_program.jc" 1855 6 1959# true) } 
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 10 20 67#
            ((=)
            (strchr !mutable_s_3 (#"whole_program.jc" 1877 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_25)
            (strchr !os (#"whole_program.jc" 1878 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 9 20 71#
            (forall p_4_0 : (pointer voidP).
             (((same_block !os p_4_0) /\
              (((<=) (sub_pointer !os p_4_0) (0)) /\
              ((same_block p_4_0 !mutable_s_3) /\
              ((<) (sub_pointer p_4_0 !mutable_s_3) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_25 p_4_0)
              (#"whole_program.jc" 1875 46 61# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             (same_block !os !mutable_s_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             ((<=) (sub_pointer !os !mutable_s_3) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
             (same_block !mutable_s_3
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
            ((<=)
            (sub_pointer !mutable_s_3
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.c" 7 20 32#
           (valid_str !mutable_s_3 voidP_s_3_25_alloc_table
           charP_charM_s_3_25))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())));
            (if
            (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
             (#"whole_program.jc" 1886 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin (__retres_5 := (null  )); (raise (Return_label_exc ()))
             end else ());
            (mutable_s_3 :=
             (shift_  !mutable_s_3
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 1891 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_28 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 16 12 57#
          ((Bit_int8.(<>) (#"whole_program.jc" 1897 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1898 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25))))
          /\
          ((<)
          (sub_pointer !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 17 12 58#
          ((Bit_int8.(=) (#"whole_program.jc" 1912 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1913 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))) } ;
         () end; (__retres_5 := !mutable_s_3) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_29 ->
      'Return_label:
      'Return_label: begin (return := !__retres_5); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let strchr_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/strchr.c" 3 5 34#
  "expl:Function strchr, behavior not_exists" =
  fun
   (s_3 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_25_alloc_table :
   (alloc_table voidP)) (voidP_s_3_25_tag_table : (tag_table voidP))
   (charP_charM_s_3_25 : (memory voidP Int8.t)) 
   requires {
   ((forall p_7 : (pointer voidP).
     (((same_block s_3 p_7) /\
      (((<=) (sub_pointer s_3 p_7) (0)) /\
      ((same_block p_7
       (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
      /\
      ((<=)
      (sub_pointer p_7
      (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_3_25 p_7)
      (#"whole_program.jc" 1768 28 43# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_14)))))
   /\
   (((allocated voidP_s_3_25_alloc_table s_3) ->
     (((=) (typeof voidP_s_3_25_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_25_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_3_25_alloc_table s_3))) ->
       ((=) (typeof voidP_s_3_25_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchr.h" 53 13 25#
   (valid_str s_3 voidP_s_3_25_alloc_table charP_charM_s_3_25)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchr.h" 58 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_3 = ref s_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_5 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3);
        'Loop_28:
        loop
        invariant { (#"whole_program.jc" 1855 6 1959# true) } 
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 10 20 67#
            ((=)
            (strchr !mutable_s_3 (#"whole_program.jc" 1877 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_25)
            (strchr !os (#"whole_program.jc" 1878 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 9 20 71#
            (forall p_4_0 : (pointer voidP).
             (((same_block !os p_4_0) /\
              (((<=) (sub_pointer !os p_4_0) (0)) /\
              ((same_block p_4_0 !mutable_s_3) /\
              ((<) (sub_pointer p_4_0 !mutable_s_3) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_25 p_4_0)
              (#"whole_program.jc" 1875 46 61# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             (same_block !os !mutable_s_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 27#
             ((<=) (sub_pointer !os !mutable_s_3) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
             (same_block !mutable_s_3
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strchr.c" 8 26 46#
            ((<=)
            (sub_pointer !mutable_s_3
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.c" 7 20 32#
           (valid_str !mutable_s_3 voidP_s_3_25_alloc_table
           charP_charM_s_3_25))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
            (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 13 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())));
            (if
            (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker-gh/strchr.c" 14 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_25 !mutable_s_3 ) ))
             (#"whole_program.jc" 1886 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin (__retres_5 := (null  )); (raise (Return_label_exc ()))
             end else ());
            (mutable_s_3 :=
             (shift_  !mutable_s_3
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 1891 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_28 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 16 12 57#
          ((Bit_int8.(<>) (#"whole_program.jc" 1897 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1898 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25))))
          /\
          ((<)
          (sub_pointer !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strchr.c" 17 12 58#
          ((Bit_int8.(=) (#"whole_program.jc" 1912 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 1913 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_25)))))) } ;
         () end; (__retres_5 := !mutable_s_3) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_29 ->
      'Return_label:
      'Return_label: begin (return := !__retres_5); (raise Return) end end));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_Strchrnull

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  function strchrnull (pointer voidP) Int8.t (memory voidP Int8.t) : (pointer
  voidP)
  
  lemma Strchrnull_mem
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 11 7 113#
  "expl:Lemma strchrnull_mem" :
  (forall voidP_str_16_228_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_16_228_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 11 7 113#
    (forall str_16 : (pointer voidP).
     (forall c_22 : Int8.t.
      ((valid_str str_16 voidP_str_16_228_alloc_table_at_L
       charP_charM_str_16_228_at_L) ->
       ((same_block str_16
        (strchrnull str_16 c_22 charP_charM_str_16_228_at_L))
       /\
       (((<=)
        (sub_pointer str_16
        (strchrnull str_16 c_22 charP_charM_str_16_228_at_L)) (0))
       /\
       ((same_block (strchrnull str_16 c_22 charP_charM_str_16_228_at_L)
        (shift str_16
        (Uint64.to_int (strlen str_16 charP_charM_str_16_228_at_L))))
       /\
       ((<=)
       (sub_pointer (strchrnull str_16 c_22 charP_charM_str_16_228_at_L)
       (shift str_16
       (Uint64.to_int (strlen str_16 charP_charM_str_16_228_at_L)))) (0)))))))))))
  
  lemma Strchrnull_iter_one
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 15 7 136#
  "expl:Lemma strchrnull_iter_one" :
  (forall voidP_str_17_233_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_17_233_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 15 7 136#
    (forall str_17 : (pointer voidP).
     (forall c_23 : Int8.t.
      (((valid_str str_17 voidP_str_17_233_alloc_table_at_L
        charP_charM_str_17_233_at_L)
       /\
       ((Int8.(<>) (select charP_charM_str_17_233_at_L str_17) c_23) /\
       (Int8.(<>) (select charP_charM_str_17_233_at_L str_17)
       (#"whole_program.jc" 1950 36 47# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (strchrnull str_17 c_23 charP_charM_str_17_233_at_L)
       (strchrnull (shift str_17 (1)) c_23 charP_charM_str_17_233_at_L))))))))
  
  lemma Strchrnull_res
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 19 7 120#
  "expl:Lemma strchrnull_res" :
  (forall voidP_str_18_236_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_18_236_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 19 7 120#
    (forall str_18 : (pointer voidP).
     (forall c_24 : Int8.t.
      ((valid_str str_18 voidP_str_18_236_alloc_table_at_L
       charP_charM_str_18_236_at_L) ->
       (((Int8.(=)
         (select charP_charM_str_18_236_at_L
         (strchrnull str_18 c_24 charP_charM_str_18_236_at_L))
         (#"whole_program.jc" 1958 58 69# "expl:Integer cast" (Int8.of_int
         (0))))
        /\
        (not
        (Int8.(=)
        (select charP_charM_str_18_236_at_L
        (strchrnull str_18 c_24 charP_charM_str_18_236_at_L)) c_24)))
       \/
       ((Int8.(=)
        (select charP_charM_str_18_236_at_L
        (strchrnull str_18 c_24 charP_charM_str_18_236_at_L)) c_24)
       /\
       (not
       (Int8.(=)
       (select charP_charM_str_18_236_at_L
       (strchrnull str_18 c_24 charP_charM_str_18_236_at_L))
       (#"whole_program.jc" 1961 63 74# "expl:Integer cast" (Int8.of_int
       (0)))))))))))))
  
  lemma Strchrnull_strlen
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 23 7 110#
  "expl:Lemma strchrnull_strlen" :
  (forall voidP_str_19_241_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_19_241_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 23 7 110#
    (forall str_19 : (pointer voidP).
     ((valid_str str_19 voidP_str_19_241_alloc_table_at_L
      charP_charM_str_19_241_at_L) ->
      ((=) (Uint64.to_int (strlen str_19 charP_charM_str_19_241_at_L))
      (sub_pointer
      (strchrnull str_19 (#"whole_program.jc" 1967 41 52# "expl:Integer cast"
      (Int8.of_int (0))) charP_charM_str_19_241_at_L) str_19)))))))
  
  lemma Strchrnull_at_end
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 27 7 118#
  "expl:Lemma strchrnull_at_end" :
  (forall voidP_str_20_243_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_20_243_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 27 7 118#
    (forall str_20 : (pointer voidP).
     (forall c_25 : Int8.t.
      (((((<=) (offset_min voidP_str_20_243_alloc_table_at_L str_20) (0)) /\
        (((>=) (offset_max voidP_str_20_243_alloc_table_at_L str_20) (0)) /\
        ((=) true true)))
       /\
       ((Int8.(=) (select charP_charM_str_20_243_at_L str_20)
        (#"whole_program.jc" 1975 37 48# "expl:Integer cast" (Int8.of_int
        (0))))
       \/ (Int8.(=) (select charP_charM_str_20_243_at_L str_20) c_25))) ->
       ((=) (strchrnull str_20 c_25 charP_charM_str_20_243_at_L) str_20)))))))
  
  lemma Strchrnull_defn
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 32 7 210#
  "expl:Lemma strchrnull_defn" :
  (forall voidP_str_21_245_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_21_245_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 32 7 210#
    (forall str_21 : (pointer voidP).
     (forall c_26 : Int8.t.
      (forall i_31 : int.
       (((valid_str str_21 voidP_str_21_245_alloc_table_at_L
         charP_charM_str_21_245_at_L)
        /\
        (((<=) (0) i_31) /\
        (((<=) i_31
         (Uint64.to_int (strlen str_21 charP_charM_str_21_245_at_L)))
        /\
        ((forall j_7 : int.
          ((((<=) (0) j_7) /\ ((<) j_7 i_31)) ->
           (Int8.(<>) (select charP_charM_str_21_245_at_L (shift str_21 j_7))
           c_26)))
        /\
        (Int8.(=) (select charP_charM_str_21_245_at_L (shift str_21 i_31))
        c_26))))) ->
        ((=) (shift str_21 i_31)
        (strchrnull str_21 c_26 charP_charM_str_21_245_at_L)))))))))
  
  lemma Strchrnull_skipped
  #"/home/work/workspace/self/verker-gh/strchrnul.h" 38 7 146#
  "expl:Lemma strchrnull_skipped" :
  (forall voidP_str_22_247_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_22_247_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strchrnul.h" 38 7 146#
    (forall str_22 : (pointer voidP).
     (forall c_27 : Int8.t.
      (forall i_32 : int.
       (((valid_str str_22 voidP_str_22_247_alloc_table_at_L
         charP_charM_str_22_247_at_L)
        /\
        (((<=) (0) i_32) /\
        (((<) i_32
         (sub_pointer (strchrnull str_22 c_27 charP_charM_str_22_247_at_L)
         str_22))
        /\
        ((<=)
        (sub_pointer (strchrnull str_22 c_27 charP_charM_str_22_247_at_L)
        str_22) (Uint64.to_int (strlen str_22 charP_charM_str_22_247_at_L))))))
        ->
        (Int8.(<>) (select charP_charM_str_22_247_at_L (shift str_22 i_32))
        c_27))))))))
  
  axiom Strchrnull_definition :
  (forall str_15 : (pointer voidP).
   (forall c_21 : Int8.t.
    (forall charP_charM_str_15_27_at_L : (memory voidP Int8.t)
     [(strchrnull str_15 c_21 charP_charM_str_15_27_at_L)] .
     ((=) (strchrnull str_15 c_21 charP_charM_str_15_27_at_L)
     (if (Int8.(=) (select charP_charM_str_15_27_at_L str_15) c_21) then
      str_15 else
      (if
       (Int8.(=) (select charP_charM_str_15_27_at_L str_15)
       (#"whole_program.jc" 1930 56 67# "expl:Integer cast" (Int8.of_int
       (0)))) then str_15 else
       (strchrnull (shift str_15 (1)) c_21 charP_charM_str_15_27_at_L)))))))
  
end

module Function_strchrnul_safety
#"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
"expl:strchrnul, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int8 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnull 
  
  use why3.Bool.Bool 
  
  let strchrnul #"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, safety" =
  fun
   (s_4 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_29_alloc_table :
   (alloc_table voidP)) (voidP_s_4_29_tag_table : (tag_table voidP))
   (charP_charM_s_4_29 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_4_29_alloc_table s_4) ->
     (((=) (typeof voidP_s_4_29_tag_table s_4) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_29_alloc_table s_4) i) /\
       ((<) i (offset_max voidP_s_4_29_alloc_table s_4))) ->
       ((=) (typeof voidP_s_4_29_tag_table (shift s_4 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchrnul.h" 54 13 25#
   (valid_str s_4 voidP_s_4_29_alloc_table charP_charM_s_4_29))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_4 = ref s_4 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 :=
       (let _jessie_354 = !mutable_s_4 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strchrnul.c" 5 11 15#
       "expl:Pointer index bounds" true) }); _jessie_354 end));
       'Loop_34:
       loop
       invariant { (#"whole_program.jc" 2072 6 1908# true) }
         variant {
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 10 18 39#
           (Int.(-) (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))
           (sub_pointer !mutable_s_4 !os_0))) }
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 9 20 73#
           ((=)
           (strchrnull !os_0 (#"whole_program.jc" 2095 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)
           (strchrnull !mutable_s_4 (#"whole_program.jc" 2096 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4) /\
             ((<) (sub_pointer p_8 !mutable_s_4) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 p_8)
             (#"whole_program.jc" 2093 46 61# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4 voidP_s_4_29_alloc_table
          charP_charM_s_4_29))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 8 10#
          (Safe_bit_int8.(<>) 
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 8 10#
           "expl:Pointer dereference"
           (acc  voidP_s_4_29_alloc_table charP_charM_s_4_29 !mutable_s_4 ))
           (#"whole_program.jc" 2100 61 72# "expl:Integer cast"
           (Safe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 35#
           (Safe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 16#
             "expl:Pointer dereference"
             (acc  voidP_s_4_29_alloc_table charP_charM_s_4_29 !mutable_s_4 ))
             ))
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())))
          else (raise (Goto_while_0_break_exc ())));
           (mutable_s_4 :=
            (let _jessie_355 =
            (shift_typesafe  !mutable_s_4
             (Safe_bit_int32.to_int 
              (#"whole_program.jc" 2105 46 58# "expl:Integer cast"
              (Safe_bit_int32.of_int_const 1)) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 13 2 5#
            "expl:Pointer index bounds" true) }); _jessie_355 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_34 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_32 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2111 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2112 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2114 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2119 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))) } ; () end;
       begin
       (__retres_6 :=
        (let _jessie_356 = !mutable_s_4 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strchrnul.c" 16 1 18#
        "expl:Pointer index bounds" true) }); _jessie_356 end));
        begin
        (return :=
         (let _jessie_357 = !__retres_6 in
         begin
         (assert {
         (#"whole_program.jc" 2126 7 24# "expl:Pointer index bounds" true) });
          _jessie_357 end)); (raise Return) end end end end)); absurd  end
    with Return -> !return end))
  
end

module Function_strchrnul_behaviors
#"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
"expl:strchrnul, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnull 
  
  use why3.Bool.Bool 
  
  let strchrnul_ensures_default
  #"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, default behavior" =
  fun
   (s_4 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_29_alloc_table :
   (alloc_table voidP)) (voidP_s_4_29_tag_table : (tag_table voidP))
   (charP_charM_s_4_29 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_4_29_alloc_table s_4) ->
     (((=) (typeof voidP_s_4_29_tag_table s_4) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_29_alloc_table s_4) i) /\
       ((<) i (offset_max voidP_s_4_29_alloc_table s_4))) ->
       ((=) (typeof voidP_s_4_29_tag_table (shift s_4 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchrnul.h" 54 13 25#
   (valid_str s_4 voidP_s_4_29_alloc_table charP_charM_s_4_29))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
      "expl:Ensures clause" (same_block result s_4))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 57 12 48#
      "expl:Ensures clause"
      ((=) result
      (strchrnull s_4 (#"whole_program.jc" 2010 52 76# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15)) charP_charM_s_4_29)))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
      "expl:Ensures clause" (same_block s_4 result))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
      "expl:Ensures clause" ((<=) (sub_pointer s_4 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
      "expl:Ensures clause"
      (same_block result
      (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
     "expl:Ensures clause"
     ((<=)
     (sub_pointer result
     (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) (0)))))))))))))))
     } diverges  ->
   (let mutable_s_4 = ref s_4 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 2043 10 744# "expl:Behavior disjointness check"
    (not
    ((forall i_34_0 : int.
      ((((<=) (0) i_34_0) /\
       ((<) i_34_0 (Uint64.to_int (strlen !mutable_s_4 charP_charM_s_4_29))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_4_29 (shift !mutable_s_4 i_34_0))
       (#"whole_program.jc" 2048 42 57# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15)))))
    /\
    (exists i_33_0 : int.
     (((<=) (0) i_33_0) /\
     (((<) i_33_0 (Uint64.to_int (strlen !mutable_s_4 charP_charM_s_4_29)))
     /\
     (Bit_int8.(=) (select charP_charM_s_4_29 (shift !mutable_s_4 i_33_0))
     (#"whole_program.jc" 2054 43 58# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))) });
     (check {
     (#"whole_program.jc" 2056 10 588# "expl:Behavior completeness check"
     ((exists i_33_1 : int.
       (((<=) (0) i_33_1) /\
       (((<) i_33_1 (Uint64.to_int (strlen !mutable_s_4 charP_charM_s_4_29)))
       /\
       (Bit_int8.(=) (select charP_charM_s_4_29 (shift !mutable_s_4 i_33_1))
       (#"whole_program.jc" 2059 60 75# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
     \/
     (forall i_34_1 : int.
      ((((<=) (0) i_34_1) /\
       ((<) i_34_1 (Uint64.to_int (strlen !mutable_s_4 charP_charM_s_4_29))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_4_29 (shift !mutable_s_4 i_34_1))
       (#"whole_program.jc" 2064 61 76# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15))))))) });
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4);
       'Loop_31:
       loop
       invariant
         { ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 6 20 32#
            (valid_str !mutable_s_4 voidP_s_4_29_alloc_table
            charP_charM_s_4_29))
           &&
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
             (same_block !os_0 !mutable_s_4))
            /\
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
             ((<=) (sub_pointer !os_0 !mutable_s_4) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
             (same_block !mutable_s_4
             (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
            ((<=)
            (sub_pointer !mutable_s_4
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))
            (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 8 20 69#
            (forall p_8 : (pointer voidP).
             (((same_block !os_0 p_8) /\
              (((<=) (sub_pointer !os_0 p_8) (0)) /\
              ((same_block p_8 !mutable_s_4) /\
              ((<) (sub_pointer p_8 !mutable_s_4) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_4_29 p_8)
              (#"whole_program.jc" 2093 46 61# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
           &&
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 9 20 73#
           ((=)
           (strchrnull !os_0 (#"whole_program.jc" 2095 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)
           (strchrnull !mutable_s_4 (#"whole_program.jc" 2096 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_29 !mutable_s_4 )
           (#"whole_program.jc" 2100 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_29 !mutable_s_4 ) ))
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())))
          else (raise (Goto_while_0_break_exc ())));
           (mutable_s_4 :=
            (shift_  !mutable_s_4
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2105 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_34 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_32 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strchrnul.c" 14 12 45#
       "expl:Assertion in line 14"
       ((Bit_int8.(=) (#"whole_program.jc" 2111 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_15))
        (#"whole_program.jc" 2112 53 64# "expl:Integer cast"
        (Bit_int8.of_int_const 0))) ->
        (Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
        (#"whole_program.jc" 2114 54 65# "expl:Integer cast"
        (Bit_int8.of_int_const 0))))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strchrnul.c" 15 12 47#
       "expl:Assertion in line 15"
       ((Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
        (#"whole_program.jc" 2119 65 76# "expl:Integer cast"
        (Bit_int8.of_int_const 0))) ->
        ((=) (sub_pointer !mutable_s_4 !os_0)
        (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))) }); () end;
       begin
       (__retres_6 := !mutable_s_4);
        begin (return := !__retres_6); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
  let strchrnul_ensures_exists
  #"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, behavior exists" =
  fun
   (s_4 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_29_alloc_table :
   (alloc_table voidP)) (voidP_s_4_29_tag_table : (tag_table voidP))
   (charP_charM_s_4_29 : (memory voidP Int8.t)) 
   requires {
   ((exists i_33 : int.
     (((<=) (0) i_33) /\
     (((<) i_33 (Uint64.to_int (strlen s_4 charP_charM_s_4_29))) /\
     (Bit_int8.(=) (select charP_charM_s_4_29 (shift s_4 i_33))
     (#"whole_program.jc" 2032 37 52# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
   /\
   (((allocated voidP_s_4_29_alloc_table s_4) ->
     (((=) (typeof voidP_s_4_29_tag_table s_4) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_29_alloc_table s_4) i) /\
       ((<) i (offset_max voidP_s_4_29_alloc_table s_4))) ->
       ((=) (typeof voidP_s_4_29_tag_table (shift s_4 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchrnul.h" 54 13 25#
   (valid_str s_4 voidP_s_4_29_alloc_table charP_charM_s_4_29)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_4_29 result)
      (#"whole_program.jc" 2033 49 73# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15))))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 66 15 69#
     "expl:Ensures clause"
     (forall p_9 : (pointer voidP).
      (((same_block s_4 p_9) /\
       (((<=) (sub_pointer s_4 p_9) (0)) /\
       ((same_block p_9 result) /\ ((<) (sub_pointer p_9 result) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_4_29 p_9)
       (#"whole_program.jc" 2041 50 74# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15)))))))))) } diverges  ->
   (let mutable_s_4 = ref s_4 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4);
       'Loop_33:
       loop
       invariant { (#"whole_program.jc" 2072 6 1908# true) } 
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 9 20 73#
           ((=)
           (strchrnull !os_0 (#"whole_program.jc" 2095 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)
           (strchrnull !mutable_s_4 (#"whole_program.jc" 2096 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4) /\
             ((<) (sub_pointer p_8 !mutable_s_4) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 p_8)
             (#"whole_program.jc" 2093 46 61# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4 voidP_s_4_29_alloc_table
          charP_charM_s_4_29))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_29 !mutable_s_4 )
           (#"whole_program.jc" 2100 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_29 !mutable_s_4 ) ))
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())))
          else (raise (Goto_while_0_break_exc ())));
           (mutable_s_4 :=
            (shift_  !mutable_s_4
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2105 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_34 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_32 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2111 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2112 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2114 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2119 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))) } ; () end;
       begin
       (__retres_6 := !mutable_s_4);
        begin (return := !__retres_6); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
  let strchrnul_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, behavior not_exists" =
  fun
   (s_4 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_29_alloc_table :
   (alloc_table voidP)) (voidP_s_4_29_tag_table : (tag_table voidP))
   (charP_charM_s_4_29 : (memory voidP Int8.t)) 
   requires {
   ((forall i_34 : int.
     ((((<=) (0) i_34) /\
      ((<) i_34 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) ->
      (Bit_int8.(<>) (select charP_charM_s_4_29 (shift s_4 i_34))
      (#"whole_program.jc" 2024 37 52# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15)))))
   /\
   (((allocated voidP_s_4_29_alloc_table s_4) ->
     (((=) (typeof voidP_s_4_29_tag_table s_4) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_29_alloc_table s_4) i) /\
       ((<) i (offset_max voidP_s_4_29_alloc_table s_4))) ->
       ((=) (typeof voidP_s_4_29_tag_table (shift s_4 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strchrnul.h" 54 13 25#
   (valid_str s_4 voidP_s_4_29_alloc_table charP_charM_s_4_29)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
      "expl:Ensures clause"
      ((=) result
      (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strchrnul.h" 62 15 31#
     "expl:Ensures clause"
     (Bit_int8.(=) (select charP_charM_s_4_29 result)
     (#"whole_program.jc" 2028 50 61# "expl:Integer cast"
     (Bit_int8.of_int_const 0)))))))) } diverges  ->
   (let mutable_s_4 = ref s_4 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4);
       'Loop_32:
       loop
       invariant { (#"whole_program.jc" 2072 6 1908# true) } 
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 9 20 73#
           ((=)
           (strchrnull !os_0 (#"whole_program.jc" 2095 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)
           (strchrnull !mutable_s_4 (#"whole_program.jc" 2096 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_29)))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4) /\
             ((<) (sub_pointer p_8 !mutable_s_4) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 p_8)
             (#"whole_program.jc" 2093 46 61# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4 voidP_s_4_29_alloc_table
          charP_charM_s_4_29))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_29 !mutable_s_4 )
           (#"whole_program.jc" 2100 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_29 !mutable_s_4 ) ))
            (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_exc ())))
          else (raise (Goto_while_0_break_exc ())));
           (mutable_s_4 :=
            (shift_  !mutable_s_4
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2105 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_34 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_32 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2111 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2112 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2114 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_29 !mutable_s_4)
          (#"whole_program.jc" 2119 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_29))))) } ; () end;
       begin
       (__retres_6 := !mutable_s_4);
        begin (return := !__retres_6); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strcmp_safety
#"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42# "expl:strcmp, safety"

  use enum.Uint64 
  
  use Safe_bit_uint8_of_Safe_bit_int8 
  
  use Safe_bit_uint8 
  
  use Safe_bit_int32_of_Safe_bit_uint8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use enum.Bit_int32 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcmp #"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42#
  "expl:Function strcmp, safety" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_31_alloc_table : (alloc_table voidP))
   (voidP_ct_0_32_alloc_table : (alloc_table voidP)) (voidP_ct_0_32_tag_table
   : (tag_table voidP)) (voidP_cs_0_31_tag_table : (tag_table voidP))
   (charP_charM_cs_0_31 : (memory voidP Int8.t)) (charP_charM_ct_0_32 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_0_32_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_32_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_32_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_32_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_32_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_31_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_31_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_31_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_31_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_31_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2131 12 93#
   ((#"/home/work/workspace/self/verker-gh/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_31_alloc_table charP_charM_cs_0_31))
   /\
   (#"/home/work/workspace/self/verker-gh/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_32_alloc_table charP_charM_ct_0_32)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Safe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Safe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Safe_bit_uint8.any_  () ) in
     (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Safe_bit_int32.any_  () ) in
     (let tmp_1_0 = ref (Safe_bit_int32.any_  () ) in
     (let tmp_2_0 = ref (Safe_bit_int32.any_  () ) in
     (let __retres_7 = ref (Safe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       'Loop_38:
       loop
       invariant { (#"whole_program.jc" 2208 6 7158# true) }
         variant { (#"/home/work/workspace/self/verker-gh/strcmp.c" 15 18 58#
           (Int.(-)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31))
           (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))) }
        begin
        any unit
        requires { true } reads { mutable_cs_0, mutable_ct_0 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 13 20 74#
           ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31))
           (Int.(-)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31))
           (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 11 20 121#
           (forall i_36 : int.
            ((((<=) (0) i_36) /\
             ((<) i_36 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
             ->
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init) i_36))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init) i_36))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 10 20 56#
           ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
           (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
            (same_block !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
           ((<=)
           (sub_pointer !mutable_ct_0
           (shift (at !mutable_ct_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))) (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
            (same_block !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
           ((<=)
           (sub_pointer !mutable_cs_0
           (shift (at !mutable_cs_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 33#
           (valid_str !mutable_cs_0 voidP_cs_0_31_alloc_table
           charP_charM_cs_0_31))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 37 50#
          (valid_str !mutable_ct_0 voidP_ct_0_32_alloc_table
          charP_charM_ct_0_32)))))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_4 :=
           (let _jessie_400 = !mutable_cs_0 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 46 50#
           "expl:Pointer index bounds" true) }); _jessie_400 end));
           begin
           (mutable_cs_0 :=
            (let _jessie_401 =
            (shift_typesafe  !mutable_cs_0
             (Safe_bit_int32.to_int 
              (#"whole_program.jc" 2255 51 63# "expl:Integer cast"
              (Safe_bit_int32.of_int_const 1)) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 46 50#
            "expl:Pointer index bounds" true) }); _jessie_401 end));
            (c1_0 :=
             (let _jessie_402 =
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 23 50#
             "expl:Integer cast"
             (Safe_bit_uint8_of_Safe_bit_int8.cast_modulo 
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 45 50#
              "expl:Pointer dereference"
              (acc  voidP_cs_0_31_alloc_table charP_charM_cs_0_31 !tmp_0_4 ))
              )) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 2 50#
             "expl:Pointer index bounds" true) }); _jessie_402 end)) end end;
           begin
           (tmp_0_5 :=
            (let _jessie_403 = !mutable_ct_0 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 46 50#
            "expl:Pointer index bounds" true) }); _jessie_403 end));
            begin
            (mutable_ct_0 :=
             (let _jessie_404 =
             (shift_typesafe  !mutable_ct_0
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 2260 51 63# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 46 50#
             "expl:Pointer index bounds" true) }); _jessie_404 end));
             (c2_0 :=
              (let _jessie_405 =
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 23 50#
              "expl:Integer cast"
              (Safe_bit_uint8_of_Safe_bit_int8.cast_modulo 
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 45 50#
               "expl:Pointer dereference"
               (acc  voidP_ct_0_32_alloc_table charP_charM_ct_0_32 !tmp_0_5 ))
               )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 2 50#
              "expl:Pointer index bounds" true) }); _jessie_405 end)) end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 14#
           (Safe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 8#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 12 14#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
           then
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 30#
            (Safe_bit_int32.(<) 
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 25#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 28 30#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
            then
             (tmp_1_0 :=
              (let _jessie_407 =
              (#"whole_program.jc" 2266 86 99# "expl:Integer cast"
              (Safe_bit_int32.of_int  (Int.(-_)  (1) ) )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 39#
              "expl:Pointer index bounds" true) }); _jessie_407 end))
            else
             (tmp_1_0 :=
              (let _jessie_406 =
              (#"whole_program.jc" 2267 36 48# "expl:Integer cast"
              (Safe_bit_int32.of_int_const 1)) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 39#
              "expl:Pointer index bounds" true) }); _jessie_406 end)));
             begin
             (res_2 :=
              (let _jessie_411 = !tmp_1_0 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 13 16#
              "expl:Pointer index bounds" true) }); _jessie_411 end));
              begin
              any unit
              requires { true } reads { mutable_cs_0, mutable_ct_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 22 14 307#
                (exists i_35 : int.
                 (((<=) (0) i_35) /\
                 (((<=) i_35
                  (Uint64.to_int
                  (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))
                 /\
                 ((forall j_8 : int.
                   ((((<=) (0) j_8) /\ ((<) j_8 i_35)) ->
                    (Bit_int8.(=)
                    (select charP_charM_cs_0_31
                    (shift (at !mutable_cs_0 'Init) j_8))
                    (select charP_charM_ct_0_32
                    (shift (at !mutable_ct_0 'Init) j_8)))))
                 /\
                 ((Bit_int8.(<>)
                  (select charP_charM_cs_0_31
                  (shift (at !mutable_cs_0 'Init) i_35))
                  (select charP_charM_ct_0_32
                  (shift (at !mutable_ct_0 'Init) i_35)))
                 /\
                 ((if
                   (Bit_uint8.(<) (#"whole_program.jc" 2289 69 177#
                   "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_cs_0_31
                   (shift (at !mutable_cs_0 'Init) i_35))))
                   (#"whole_program.jc" 2291 68 176# "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_ct_0_32
                   (shift (at !mutable_ct_0 'Init) i_35))))) then
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2294 66 82#
                   "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                   else
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2296 66 78#
                   "expl:Integer cast" (Bit_int32.of_int_const 1))))
                 /\
                 ((=) i_35
                 (Int.(-)
                 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                } ; () end;
              begin
              (if
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 17#
              (Safe_bit_int32.(<) 
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 12#
               "expl:Integer cast"
               (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 15 17#
               "expl:Integer cast"
               (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
              then
               (tmp_2_0 :=
                (let _jessie_410 =
                (#"whole_program.jc" 2305 89 102# "expl:Integer cast"
                (Safe_bit_int32.of_int  (Int.(-_)  (1) ) )) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 26#
                "expl:Pointer index bounds" true) }); _jessie_410 end))
              else
               (tmp_2_0 :=
                (let _jessie_409 =
                (#"whole_program.jc" 2306 39 51# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 26#
                "expl:Pointer index bounds" true) }); _jessie_409 end)));
               begin
               (__retres_7 :=
                (let _jessie_408 = !tmp_2_0 in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 3 27#
                "expl:Pointer index bounds" true) }); _jessie_408 end));
                (raise (Return_label_exc ())) end end end end else ());
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 30 6 9#
           (Bool.notb 
            (Safe_bit_uint8.(<>)  !c1_0
             (#"whole_program.jc" 2312 49 61# "expl:Integer cast"
             (Safe_bit_uint8.of_int_const 0)) ) ))
           then (raise (Goto_while_0_break_exc ())) else ());
           begin
           any unit
           requires { true } reads { mutable_cs_0, mutable_ct_0 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 32 13 79#
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1))))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end with
          Loop_continue_exc _jessie_38 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end with Goto_while_0_break_exc
       _jessie_35 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_7 :=
         (let _jessie_412 =
         (#"whole_program.jc" 2329 30 42# "expl:Integer cast"
         (Safe_bit_int32.of_int_const 0)) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strcmp.c" 35 1 10#
         "expl:Pointer index bounds" true) }); _jessie_412 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_36 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_413 = !__retres_7 in
       begin
       (assert {
       (#"whole_program.jc" 2331 7 24# "expl:Pointer index bounds" true) });
        _jessie_413 end)); (raise Return) end end)))))))); absurd  end with
    Return -> !return end)))
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strcmp_behaviors
#"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42#
"expl:strcmp, behaviors"

  use Unsafe_bit_uint8_of_Unsafe_bit_int8 
  
  use Unsafe_bit_uint8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_uint8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use enum.Bit_int32 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcmp_ensures_default
  #"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42#
  "expl:Function strcmp, default behavior" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_31_alloc_table : (alloc_table voidP))
   (voidP_ct_0_32_alloc_table : (alloc_table voidP)) (voidP_ct_0_32_tag_table
   : (tag_table voidP)) (voidP_cs_0_31_tag_table : (tag_table voidP))
   (charP_charM_cs_0_31 : (memory voidP Int8.t)) (charP_charM_ct_0_32 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_0_32_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_32_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_32_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_32_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_32_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_31_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_31_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_31_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_31_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_31_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2131 12 93#
   ((#"/home/work/workspace/self/verker-gh/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_31_alloc_table charP_charM_cs_0_31))
   /\
   (#"/home/work/workspace/self/verker-gh/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_32_alloc_table charP_charM_ct_0_32)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 2165 10 806# "expl:Behavior disjointness check"
    (not
    ((forall i_39_0 : int.
      ((((<=) (0) i_39_0) /\
       ((<=) i_39_0
       (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31)))) ->
       (Bit_uint8.(=) (#"whole_program.jc" 2169 41 72# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_cs_0_31 (shift !mutable_cs_0 i_39_0))))
       (#"whole_program.jc" 2170 42 73# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_ct_0_32 (shift !mutable_ct_0 i_39_0)))))))
    /\
    (exists i_37_0 : int.
     (((<=) (0) i_37_0) /\
     (((<=) i_37_0
      (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31)))
     /\
     (Bit_uint8.(<>) (#"whole_program.jc" 2175 42 73# "expl:Integer cast"
     (Bit_uint8_of_Bit_int8.cast_modulo
     (select charP_charM_cs_0_31 (shift !mutable_cs_0 i_37_0))))
     (#"whole_program.jc" 2176 43 74# "expl:Integer cast"
     (Bit_uint8_of_Bit_int8.cast_modulo
     (select charP_charM_ct_0_32 (shift !mutable_ct_0 i_37_0))))))))))) });
     (check {
     (#"whole_program.jc" 2178 10 769# "expl:Behavior completeness check"
     ((exists i_37_1 : int.
       (((<=) (0) i_37_1) /\
       (((<=) i_37_1
        (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31)))
       /\
       (Bit_uint8.(<>) (#"whole_program.jc" 2182 38 69# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_cs_0_31 (shift !mutable_cs_0 i_37_1))))
       (#"whole_program.jc" 2183 39 70# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_ct_0_32 (shift !mutable_ct_0 i_37_1))))))))
     \/
     (forall i_39_1 : int.
      ((((<=) (0) i_39_1) /\
       ((<=) i_39_1
       (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31)))) ->
       (Bit_uint8.(=) (#"whole_program.jc" 2188 39 70# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_cs_0_31 (shift !mutable_cs_0 i_39_1))))
       (#"whole_program.jc" 2189 40 71# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_ct_0_32 (shift !mutable_ct_0 i_39_1))))))))) });
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_7 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       'Loop_35:
       loop
       invariant
         { ((#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 33#
             (valid_str !mutable_cs_0 voidP_cs_0_31_alloc_table
             charP_charM_cs_0_31))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 37 50#
            (valid_str !mutable_ct_0 voidP_ct_0_32_alloc_table
            charP_charM_ct_0_32)))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
             (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
             ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
             (same_block !mutable_cs_0
             (shift (at !mutable_cs_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
            ((<=)
            (sub_pointer !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))) (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
             (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
             ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
            ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
             (same_block !mutable_ct_0
             (shift (at !mutable_ct_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
            ((<=)
            (sub_pointer !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))) (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 10 20 56#
            ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 11 20 121#
            (forall i_36 : int.
             ((((<=) (0) i_36) /\
              ((<) i_36 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
              ->
              (Bit_int8.(=)
              (select charP_charM_cs_0_31
              (shift (at !mutable_cs_0 'Init) i_36))
              (select charP_charM_ct_0_32
              (shift (at !mutable_ct_0 'Init) i_36))))))
           &&
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 13 20 74#
           ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31))
           (Int.(-)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31))
           (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))))))) } 
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_4 := !mutable_cs_0);
           begin
           (mutable_cs_0 :=
            (shift_  !mutable_cs_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2255 51 63# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) ));
            (c1_0 :=
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 23 50#
             "expl:Integer cast"
             (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
              (acc  charP_charM_cs_0_31 !tmp_0_4 ) ))) end end;
           begin
           (tmp_0_5 := !mutable_ct_0);
            begin
            (mutable_ct_0 :=
             (shift_  !mutable_ct_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2260 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c2_0 :=
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_ct_0_32 !tmp_0_5 ) ))) end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 14#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 12 14#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
           then
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 30#
            (Unsafe_bit_int32.(<) 
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 25#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 28 30#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             (tmp_1_0 :=
              (#"whole_program.jc" 2266 86 99# "expl:Integer cast"
              (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
            else
             (tmp_1_0 :=
              (#"whole_program.jc" 2267 36 48# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1))));
             begin
             (res_2 := !tmp_1_0);
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 22 14 307#
              "expl:Assertion in line 22"
              (exists i_35 : int.
               (((<=) (0) i_35) /\
               (((<=) i_35
                (Uint64.to_int
                (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))
               /\
               ((forall j_8 : int.
                 ((((<=) (0) j_8) /\ ((<) j_8 i_35)) ->
                  (Bit_int8.(=)
                  (select charP_charM_cs_0_31
                  (shift (at !mutable_cs_0 'Init) j_8))
                  (select charP_charM_ct_0_32
                  (shift (at !mutable_ct_0 'Init) j_8)))))
               /\
               ((Bit_int8.(<>)
                (select charP_charM_cs_0_31
                (shift (at !mutable_cs_0 'Init) i_35))
                (select charP_charM_ct_0_32
                (shift (at !mutable_ct_0 'Init) i_35)))
               /\
               ((if
                 (Bit_uint8.(<) (#"whole_program.jc" 2289 69 177#
                 "expl:Integer cast"
                 (Bit_uint8_of_Bit_int8.cast_modulo
                 (select charP_charM_cs_0_31
                 (shift (at !mutable_cs_0 'Init) i_35))))
                 (#"whole_program.jc" 2291 68 176# "expl:Integer cast"
                 (Bit_uint8_of_Bit_int8.cast_modulo
                 (select charP_charM_ct_0_32
                 (shift (at !mutable_ct_0 'Init) i_35))))) then
                 (Bit_int32.(=) !res_2 (#"whole_program.jc" 2294 66 82#
                 "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1))))) else
                 (Bit_int32.(=) !res_2 (#"whole_program.jc" 2296 66 78#
                 "expl:Integer cast" (Bit_int32.of_int_const 1))))
               /\
               ((=) i_35
               (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
               (1)))))))))) }); () end;
              begin
              (if
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 17#
              (Unsafe_bit_int32.(<) 
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 12#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 15 17#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
              then
               (tmp_2_0 :=
                (#"whole_program.jc" 2305 89 102# "expl:Integer cast"
                (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
              else
               (tmp_2_0 :=
                (#"whole_program.jc" 2306 39 51# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1))));
               begin (__retres_7 := !tmp_2_0); (raise (Return_label_exc ()))
               end end end end else ());
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 30 6 9#
           (Bool.notb 
            (Unsafe_bit_uint8.(<>)  !c1_0
             (#"whole_program.jc" 2312 49 61# "expl:Integer cast"
             (Unsafe_bit_uint8.of_int_const 0)) ) ))
           then (raise (Goto_while_0_break_exc ())) else ());
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 32 13 79#
           "expl:Assertion in line 32"
           (Bit_int8.(=)
           (select charP_charM_cs_0_31
           (shift (at !mutable_cs_0 'Init)
           (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))
           (select charP_charM_ct_0_32
           (shift (at !mutable_ct_0 'Init)
           (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))
           }); () end end; (raise (Loop_continue_exc ())) end with
          Loop_continue_exc _jessie_38 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end with Goto_while_0_break_exc
       _jessie_35 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_7 :=
         (#"whole_program.jc" 2329 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_36 ->
      'Return_label:
      'Return_label: begin (return := !__retres_7); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcmp_ensures_equal
  #"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42#
  "expl:Function strcmp, behavior equal" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_31_alloc_table : (alloc_table voidP))
   (voidP_ct_0_32_alloc_table : (alloc_table voidP)) (voidP_ct_0_32_tag_table
   : (tag_table voidP)) (voidP_cs_0_31_tag_table : (tag_table voidP))
   (charP_charM_cs_0_31 : (memory voidP Int8.t)) (charP_charM_ct_0_32 :
   (memory voidP Int8.t)) 
   requires {
   ((forall i_39 : int.
     ((((<=) (0) i_39) /\
      ((<=) i_39 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31)))) ->
      (Bit_uint8.(=) (#"whole_program.jc" 2139 15 46# "expl:Integer cast"
      (Bit_uint8_of_Bit_int8.cast_modulo
      (select charP_charM_cs_0_31 (shift cs_0 i_39))))
      (#"whole_program.jc" 2140 16 47# "expl:Integer cast"
      (Bit_uint8_of_Bit_int8.cast_modulo
      (select charP_charM_ct_0_32 (shift ct_0 i_39)))))))
   /\
   (((allocated voidP_ct_0_32_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_32_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_32_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_32_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_32_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_31_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_31_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_31_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_31_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_31_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2131 12 93#
   ((#"/home/work/workspace/self/verker-gh/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_31_alloc_table charP_charM_cs_0_31))
   /\
   (#"/home/work/workspace/self/verker-gh/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_32_alloc_table charP_charM_ct_0_32))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcmp.h" 63 15 27#
     "expl:Ensures clause"
     (Bit_int32.(=) result (#"whole_program.jc" 2141 32 44#
     "expl:Integer cast" (Bit_int32.of_int_const 0))))) } diverges  ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_7 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       'Loop_36:
       loop
       invariant { (#"whole_program.jc" 2208 6 7158# true) } 
        begin
        any unit
        requires { true } reads { mutable_cs_0, mutable_ct_0 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 13 20 74#
           ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31))
           (Int.(-)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31))
           (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 11 20 121#
           (forall i_36 : int.
            ((((<=) (0) i_36) /\
             ((<) i_36 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
             ->
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init) i_36))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init) i_36))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 10 20 56#
           ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
           (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
            (same_block !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
           ((<=)
           (sub_pointer !mutable_ct_0
           (shift (at !mutable_ct_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))) (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
            (same_block !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
           ((<=)
           (sub_pointer !mutable_cs_0
           (shift (at !mutable_cs_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 33#
           (valid_str !mutable_cs_0 voidP_cs_0_31_alloc_table
           charP_charM_cs_0_31))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 37 50#
          (valid_str !mutable_ct_0 voidP_ct_0_32_alloc_table
          charP_charM_ct_0_32)))))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_4 := !mutable_cs_0);
           begin
           (mutable_cs_0 :=
            (shift_  !mutable_cs_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2255 51 63# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) ));
            (c1_0 :=
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 23 50#
             "expl:Integer cast"
             (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
              (acc  charP_charM_cs_0_31 !tmp_0_4 ) ))) end end;
           begin
           (tmp_0_5 := !mutable_ct_0);
            begin
            (mutable_ct_0 :=
             (shift_  !mutable_ct_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2260 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c2_0 :=
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_ct_0_32 !tmp_0_5 ) ))) end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 14#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 12 14#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
           then
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 30#
            (Unsafe_bit_int32.(<) 
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 25#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 28 30#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             (tmp_1_0 :=
              (#"whole_program.jc" 2266 86 99# "expl:Integer cast"
              (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
            else
             (tmp_1_0 :=
              (#"whole_program.jc" 2267 36 48# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1))));
             begin
             (res_2 := !tmp_1_0);
              begin
              any unit
              requires { true } reads { mutable_cs_0, mutable_ct_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 22 14 307#
                (exists i_35 : int.
                 (((<=) (0) i_35) /\
                 (((<=) i_35
                  (Uint64.to_int
                  (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))
                 /\
                 ((forall j_8 : int.
                   ((((<=) (0) j_8) /\ ((<) j_8 i_35)) ->
                    (Bit_int8.(=)
                    (select charP_charM_cs_0_31
                    (shift (at !mutable_cs_0 'Init) j_8))
                    (select charP_charM_ct_0_32
                    (shift (at !mutable_ct_0 'Init) j_8)))))
                 /\
                 ((Bit_int8.(<>)
                  (select charP_charM_cs_0_31
                  (shift (at !mutable_cs_0 'Init) i_35))
                  (select charP_charM_ct_0_32
                  (shift (at !mutable_ct_0 'Init) i_35)))
                 /\
                 ((if
                   (Bit_uint8.(<) (#"whole_program.jc" 2289 69 177#
                   "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_cs_0_31
                   (shift (at !mutable_cs_0 'Init) i_35))))
                   (#"whole_program.jc" 2291 68 176# "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_ct_0_32
                   (shift (at !mutable_ct_0 'Init) i_35))))) then
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2294 66 82#
                   "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                   else
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2296 66 78#
                   "expl:Integer cast" (Bit_int32.of_int_const 1))))
                 /\
                 ((=) i_35
                 (Int.(-)
                 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                } ; () end;
              begin
              (if
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 17#
              (Unsafe_bit_int32.(<) 
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 12#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 15 17#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
              then
               (tmp_2_0 :=
                (#"whole_program.jc" 2305 89 102# "expl:Integer cast"
                (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
              else
               (tmp_2_0 :=
                (#"whole_program.jc" 2306 39 51# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1))));
               begin (__retres_7 := !tmp_2_0); (raise (Return_label_exc ()))
               end end end end else ());
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 30 6 9#
           (Bool.notb 
            (Unsafe_bit_uint8.(<>)  !c1_0
             (#"whole_program.jc" 2312 49 61# "expl:Integer cast"
             (Unsafe_bit_uint8.of_int_const 0)) ) ))
           then (raise (Goto_while_0_break_exc ())) else ());
           begin
           any unit
           requires { true } reads { mutable_cs_0, mutable_ct_0 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 32 13 79#
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1))))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end with
          Loop_continue_exc _jessie_38 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end with Goto_while_0_break_exc
       _jessie_35 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_7 :=
         (#"whole_program.jc" 2329 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_36 ->
      'Return_label:
      'Return_label: begin (return := !__retres_7); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcmp_ensures_not_equal
  #"/home/work/workspace/self/verker-gh/strcmp.c" 3 4 42#
  "expl:Function strcmp, behavior not_equal" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_31_alloc_table : (alloc_table voidP))
   (voidP_ct_0_32_alloc_table : (alloc_table voidP)) (voidP_ct_0_32_tag_table
   : (tag_table voidP)) (voidP_cs_0_31_tag_table : (tag_table voidP))
   (charP_charM_cs_0_31 : (memory voidP Int8.t)) (charP_charM_ct_0_32 :
   (memory voidP Int8.t)) 
   requires {
   ((exists i_37 : int.
     (((<=) (0) i_37) /\
     (((<=) i_37 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31))) /\
     (Bit_uint8.(<>) (#"whole_program.jc" 2145 15 46# "expl:Integer cast"
     (Bit_uint8_of_Bit_int8.cast_modulo
     (select charP_charM_cs_0_31 (shift cs_0 i_37))))
     (#"whole_program.jc" 2146 16 47# "expl:Integer cast"
     (Bit_uint8_of_Bit_int8.cast_modulo
     (select charP_charM_ct_0_32 (shift ct_0 i_37))))))))
   /\
   (((allocated voidP_ct_0_32_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_32_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_32_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_32_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_32_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_31_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_31_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_31_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_31_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_31_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2131 12 93#
   ((#"/home/work/workspace/self/verker-gh/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_31_alloc_table charP_charM_cs_0_31))
   /\
   (#"/home/work/workspace/self/verker-gh/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_32_alloc_table charP_charM_ct_0_32))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
      "expl:Ensures clause"
      ((Bit_int32.(=) result (#"whole_program.jc" 2147 44 60#
       "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
      \/
      (Bit_int32.(=) result (#"whole_program.jc" 2148 45 57#
      "expl:Integer cast" (Bit_int32.of_int_const 1)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strcmp.h" 67 15 235#
     "expl:Ensures clause"
     (exists i_38 : int.
      (((<=) (0) i_38) /\
      (((<=) i_38 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31))) /\
      ((forall j_9 : int.
        ((((<=) (0) j_9) /\ ((<) j_9 i_38)) ->
         (Bit_int8.(=) (select charP_charM_cs_0_31 (shift cs_0 j_9))
         (select charP_charM_ct_0_32 (shift ct_0 j_9)))))
      /\
      ((Bit_int8.(<>) (select charP_charM_cs_0_31 (shift cs_0 i_38))
       (select charP_charM_ct_0_32 (shift ct_0 i_38)))
      /\
      (if
       (Bit_uint8.(<) (#"whole_program.jc" 2159 41 81# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_cs_0_31 (shift cs_0 i_38))))
       (#"whole_program.jc" 2160 42 82# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_ct_0_32 (shift ct_0 i_38))))) then
       (Bit_int32.(=) result (#"whole_program.jc" 2162 38 54#
       "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1))))) else
       (Bit_int32.(=) result (#"whole_program.jc" 2163 63 75#
       "expl:Integer cast" (Bit_int32.of_int_const 1)))))))))))))) } diverges
    ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_0 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_7 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       'Loop_37:
       loop
       invariant { (#"whole_program.jc" 2208 6 7158# true) } 
        begin
        any unit
        requires { true } reads { mutable_cs_0, mutable_ct_0 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 13 20 74#
           ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_31))
           (Int.(-)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31))
           (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 11 20 121#
           (forall i_36 : int.
            ((((<=) (0) i_36) /\
             ((<) i_36 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
             ->
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init) i_36))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init) i_36))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 10 20 56#
           ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
           (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 37#
            ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
            (same_block !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 9 35 74#
           ((<=)
           (sub_pointer !mutable_ct_0
           (shift (at !mutable_ct_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_32)))) (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 37#
            ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 20 74#
           ((#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
            (same_block !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 8 35 74#
           ((<=)
           (sub_pointer !mutable_cs_0
           (shift (at !mutable_cs_0 'Init)
           (Uint64.to_int
           (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 50#
          ((#"/home/work/workspace/self/verker-gh/strcmp.c" 7 20 33#
           (valid_str !mutable_cs_0 voidP_cs_0_31_alloc_table
           charP_charM_cs_0_31))
          /\
          (#"/home/work/workspace/self/verker-gh/strcmp.c" 7 37 50#
          (valid_str !mutable_ct_0 voidP_ct_0_32_alloc_table
          charP_charM_ct_0_32)))))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_4 := !mutable_cs_0);
           begin
           (mutable_cs_0 :=
            (shift_  !mutable_cs_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2255 51 63# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) ));
            (c1_0 :=
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 18 23 50#
             "expl:Integer cast"
             (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
              (acc  charP_charM_cs_0_31 !tmp_0_4 ) ))) end end;
           begin
           (tmp_0_5 := !mutable_ct_0);
            begin
            (mutable_ct_0 :=
             (shift_  !mutable_ct_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2260 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c2_0 :=
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 19 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_ct_0_32 !tmp_0_5 ) ))) end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 14#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 20 12 14#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
           then
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 30#
            (Unsafe_bit_int32.(<) 
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 23 25#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 21 28 30#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             (tmp_1_0 :=
              (#"whole_program.jc" 2266 86 99# "expl:Integer cast"
              (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
            else
             (tmp_1_0 :=
              (#"whole_program.jc" 2267 36 48# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1))));
             begin
             (res_2 := !tmp_1_0);
              begin
              any unit
              requires { true } reads { mutable_cs_0, mutable_ct_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strcmp.c" 22 14 307#
                (exists i_35 : int.
                 (((<=) (0) i_35) /\
                 (((<=) i_35
                  (Uint64.to_int
                  (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_31)))
                 /\
                 ((forall j_8 : int.
                   ((((<=) (0) j_8) /\ ((<) j_8 i_35)) ->
                    (Bit_int8.(=)
                    (select charP_charM_cs_0_31
                    (shift (at !mutable_cs_0 'Init) j_8))
                    (select charP_charM_ct_0_32
                    (shift (at !mutable_ct_0 'Init) j_8)))))
                 /\
                 ((Bit_int8.(<>)
                  (select charP_charM_cs_0_31
                  (shift (at !mutable_cs_0 'Init) i_35))
                  (select charP_charM_ct_0_32
                  (shift (at !mutable_ct_0 'Init) i_35)))
                 /\
                 ((if
                   (Bit_uint8.(<) (#"whole_program.jc" 2289 69 177#
                   "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_cs_0_31
                   (shift (at !mutable_cs_0 'Init) i_35))))
                   (#"whole_program.jc" 2291 68 176# "expl:Integer cast"
                   (Bit_uint8_of_Bit_int8.cast_modulo
                   (select charP_charM_ct_0_32
                   (shift (at !mutable_ct_0 'Init) i_35))))) then
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2294 66 82#
                   "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                   else
                   (Bit_int32.(=) !res_2 (#"whole_program.jc" 2296 66 78#
                   "expl:Integer cast" (Bit_int32.of_int_const 1))))
                 /\
                 ((=) i_35
                 (Int.(-)
                 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                } ; () end;
              begin
              (if
              (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 17#
              (Unsafe_bit_int32.(<) 
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 10 12#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
               (#"/home/work/workspace/self/verker-gh/strcmp.c" 28 15 17#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
              then
               (tmp_2_0 :=
                (#"whole_program.jc" 2305 89 102# "expl:Integer cast"
                (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
              else
               (tmp_2_0 :=
                (#"whole_program.jc" 2306 39 51# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1))));
               begin (__retres_7 := !tmp_2_0); (raise (Return_label_exc ()))
               end end end end else ());
           (if
           (#"/home/work/workspace/self/verker-gh/strcmp.c" 30 6 9#
           (Bool.notb 
            (Unsafe_bit_uint8.(<>)  !c1_0
             (#"whole_program.jc" 2312 49 61# "expl:Integer cast"
             (Unsafe_bit_uint8.of_int_const 0)) ) ))
           then (raise (Goto_while_0_break_exc ())) else ());
           begin
           any unit
           requires { true } reads { mutable_cs_0, mutable_ct_0 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strcmp.c" 32 13 79#
             (Bit_int8.(=)
             (select charP_charM_cs_0_31
             (shift (at !mutable_cs_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1))))
             (select charP_charM_ct_0_32
             (shift (at !mutable_ct_0 'Init)
             (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end with
          Loop_continue_exc _jessie_38 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end with Goto_while_0_break_exc
       _jessie_35 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_7 :=
         (#"whole_program.jc" 2329 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_36 ->
      'Return_label:
      'Return_label: begin (return := !__retres_7); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_strcpy_safety
#"/home/work/workspace/self/verker-gh/strcpy.c" 3 5 41# "expl:strcpy, safety"

  use enum.Uint64 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcpy #"/home/work/workspace/self/verker-gh/strcpy.c" 3 5 41#
  "expl:Function strcpy, safety" =
  fun
   (dest_9 : (pointer voidP)) (src_6 : (pointer voidP))
   (charP_charM_dest_9_33 : ref (memory voidP Int8.t))
   (voidP_dest_9_33_alloc_table : (alloc_table voidP))
   (voidP_src_6_34_alloc_table : (alloc_table voidP))
   (voidP_src_6_34_tag_table : (tag_table voidP)) (voidP_dest_9_33_tag_table
   : (tag_table voidP)) (charP_charM_src_6_34 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_6_34_alloc_table src_6) ->
     (((=) (typeof voidP_src_6_34_tag_table src_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_6_34_alloc_table src_6) i) /\
       ((<) i (offset_max voidP_src_6_34_alloc_table src_6))) ->
       ((=) (typeof voidP_src_6_34_tag_table (shift src_6 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_9_33_alloc_table dest_9) ->
     (((=) (typeof voidP_dest_9_33_tag_table dest_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_9_33_alloc_table dest_9) i) /\
       ((<) i (offset_max voidP_dest_9_33_alloc_table dest_9))) ->
       ((=) (typeof voidP_dest_9_33_tag_table (shift dest_9 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2336 12 773#
   ((#"/home/work/workspace/self/verker-gh/strcpy.h" 12 13 27#
    (valid_str src_6 voidP_src_6_34_alloc_table charP_charM_src_6_34))
   /\
   (#"whole_program.jc" 2336 12 773#
   ((#"/home/work/workspace/self/verker-gh/strcpy.h" 13 13 42#
    (if ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_34))) then
     (((<=) (offset_min voidP_dest_9_33_alloc_table dest_9) (0)) /\
     (((>=) (offset_max voidP_dest_9_33_alloc_table dest_9)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))
     /\
     (forall __framac_tmp16 : int.
      ((((<=) (0) __framac_tmp16) /\
       ((<=) __framac_tmp16
       (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/strcpy.h" 14 13 48#
   (not (same_block dest_9 src_6))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_dest_9 = ref dest_9 in
   (let mutable_src_6 = ref src_6 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_6 = ref (any_pointer  () : (pointer voidP)) in
    (let osrc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_7 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (Safe_int8.any_  () ) in
    (let tmp_2_1 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (tmp_0_6 :=
      (let _jessie_438 = !mutable_dest_9 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcpy.c" 5 1 5#
      "expl:Pointer index bounds" true) }); _jessie_438 end));
      begin
      (osrc_0 :=
       (let _jessie_427 = !mutable_src_6 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcpy.c" 6 11 15#
       "expl:Pointer index bounds" true) }); _jessie_427 end));
       begin
       any unit
       requires { true }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strcpy.c" 7 12 27#
         (valid_str !osrc_0 voidP_src_6_34_alloc_table charP_charM_src_6_34))
         } ; () end;
       'Loop_40:
       loop
       invariant { (#"whole_program.jc" 2377 6 2846# true) }
         variant { (#"/home/work/workspace/self/verker-gh/strcpy.c" 15 18 45#
           (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34))
           (sub_pointer !mutable_src_6 !osrc_0))) }
        begin
        any unit
        requires { true } reads { charP_charM_dest_9_33, mutable_dest_9,
        mutable_src_6 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 14 20 80#
           (forall i_40 : int.
            ((((<=) (0) i_40) /\
             ((<) i_40 (sub_pointer !mutable_src_6 !osrc_0))) ->
             (Int8.(=) (select !charP_charM_dest_9_33 (shift !tmp_0_6 i_40))
             (select charP_charM_src_6_34 (shift !osrc_0 i_40))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 13 20 62#
           ((=) (Uint64.to_int (strlen !mutable_src_6 charP_charM_src_6_34))
           (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34))
           (sub_pointer !mutable_src_6 !osrc_0))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 12 20 44#
           ((=) (sub_pointer !mutable_dest_9 !tmp_0_6)
           (sub_pointer !mutable_src_6 !osrc_0)))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 11 20 34#
           (valid_str !mutable_src_6 voidP_src_6_34_alloc_table
           charP_charM_src_6_34))
          /\
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 31#
            (same_block !tmp_0_6 !mutable_dest_9))
           /\
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 31#
            ((<=) (sub_pointer !tmp_0_6 !mutable_dest_9) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 27 53#
            (same_block !mutable_dest_9
            (shift !tmp_0_6
            (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 27 53#
           ((<=)
           (sub_pointer !mutable_dest_9
           (shift !tmp_0_6
           (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
          (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 31#
           (same_block !osrc_0 !mutable_src_6))
          /\
          (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 31#
           ((<=) (sub_pointer !osrc_0 !mutable_src_6) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 28 54#
           (same_block !mutable_src_6
           (shift !osrc_0
           (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))))
          /\
          (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 28 54#
          ((<=)
          (sub_pointer !mutable_src_6
          (shift !osrc_0
          (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))) (0)))))))))))))))
          } ;
         try
          begin
          begin
          begin
          (tmp_0_7 :=
           (let _jessie_428 = !mutable_dest_9 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 10 16#
           "expl:Pointer index bounds" true) }); _jessie_428 end));
           begin
           (mutable_dest_9 :=
            (let _jessie_429 =
            (shift_typesafe  !mutable_dest_9
             (Safe_int32.to_int 
              (#"whole_program.jc" 2421 55 67# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 10 16#
            "expl:Pointer index bounds" true) }); _jessie_429 end));
            begin
            (tmp_2_1 :=
             (let _jessie_430 = !mutable_src_6 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 20 25#
             "expl:Pointer index bounds" true) }); _jessie_430 end));
             begin
             (mutable_src_6 :=
              (let _jessie_431 =
              (shift_typesafe  !mutable_src_6
               (Safe_int32.to_int 
                (#"whole_program.jc" 2423 53 65# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 20 25#
              "expl:Pointer index bounds" true) }); _jessie_431 end));
              (tmp_1_1 :=
               (let _jessie_432 =
               (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 19 25#
               "expl:Pointer dereference"
               (acc  voidP_src_6_34_alloc_table charP_charM_src_6_34 !tmp_2_1
                )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 9 25#
               "expl:Pointer index bounds" true) }); _jessie_432 end)) end
            end end end;
           begin
           (let _jessie_434 =
           (let _jessie_433 = !tmp_1_1 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 9 25#
           "expl:Pointer index bounds" true) }); _jessie_433 end) in
           (let _jessie_435 = !tmp_0_7 in
           (let _jessie_436 = (0) in
           (let _jessie_437 = _jessie_435 in
           (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 9 25#
           "expl:Pointer dereference"
           (upd  voidP_dest_9_33_alloc_table charP_charM_dest_9_33
            _jessie_435 _jessie_434 ))))));
            (if
            (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 8 34#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 9 25#
             "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_1_1 ))
             (#"whole_program.jc" 2427 60 72# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_41 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end end with Goto_while_0_break_exc _jessie_39 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      any unit
      requires { true } reads { charP_charM_dest_9_33, mutable_dest_9,
      mutable_src_6 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
        (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
        ((#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
         (Int8.(=)
         (select !charP_charM_dest_9_33
         (shift !mutable_dest_9 (Int.(-_) (1))))
         (#"whole_program.jc" 2435 53 64# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
        (Int8.(=)
        (select charP_charM_src_6_34 (shift !mutable_src_6 (Int.(-_) (1))))
        (#"whole_program.jc" 2437 54 65# "expl:Integer cast" (Int8.of_int
        (0)))))))) } ; () end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_9_33 }
      ensures {
        (#"/home/work/workspace/self/verker-gh/strcpy.c" 20 12 26#
        (valid_str !tmp_0_6 voidP_dest_9_33_alloc_table
        !charP_charM_dest_9_33)) } ; () end;
      begin
      (return :=
       (let _jessie_439 = !tmp_0_6 in
       begin
       (assert {
       (#"whole_program.jc" 2446 7 21# "expl:Pointer index bounds" true) });
        _jessie_439 end)); (raise Return) end end end))))); absurd  end with
    Return -> !return end)))
  
end

module Function_strcpy_behaviors
#"/home/work/workspace/self/verker-gh/strcpy.c" 3 5 41#
"expl:strcpy, behaviors"

  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcpy_ensures_default
  #"/home/work/workspace/self/verker-gh/strcpy.c" 3 5 41#
  "expl:Function strcpy, default behavior" =
  fun
   (dest_9 : (pointer voidP)) (src_6 : (pointer voidP))
   (charP_charM_dest_9_33 : ref (memory voidP Int8.t))
   (voidP_dest_9_33_alloc_table : (alloc_table voidP))
   (voidP_src_6_34_alloc_table : (alloc_table voidP))
   (voidP_src_6_34_tag_table : (tag_table voidP)) (voidP_dest_9_33_tag_table
   : (tag_table voidP)) (charP_charM_src_6_34 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_6_34_alloc_table src_6) ->
     (((=) (typeof voidP_src_6_34_tag_table src_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_6_34_alloc_table src_6) i) /\
       ((<) i (offset_max voidP_src_6_34_alloc_table src_6))) ->
       ((=) (typeof voidP_src_6_34_tag_table (shift src_6 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_9_33_alloc_table dest_9) ->
     (((=) (typeof voidP_dest_9_33_tag_table dest_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_9_33_alloc_table dest_9) i) /\
       ((<) i (offset_max voidP_dest_9_33_alloc_table dest_9))) ->
       ((=) (typeof voidP_dest_9_33_tag_table (shift dest_9 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2336 12 773#
   ((#"/home/work/workspace/self/verker-gh/strcpy.h" 12 13 27#
    (valid_str src_6 voidP_src_6_34_alloc_table charP_charM_src_6_34))
   /\
   (#"whole_program.jc" 2336 12 773#
   ((#"/home/work/workspace/self/verker-gh/strcpy.h" 13 13 42#
    (if ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_34))) then
     (((<=) (offset_min voidP_dest_9_33_alloc_table dest_9) (0)) /\
     (((>=) (offset_max voidP_dest_9_33_alloc_table dest_9)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))
     /\
     (forall __framac_tmp16 : int.
      ((((<=) (0) __framac_tmp16) /\
       ((<=) __framac_tmp16
       (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker-gh/strcpy.h" 14 13 48#
   (not (same_block dest_9 src_6))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 2349 10 63# "expl:Assigns clause"
      (not_assigns voidP_dest_9_33_alloc_table voidP_dest_9_33_alloc_table
      (old !charP_charM_dest_9_33) !charP_charM_dest_9_33
      (pset_range (pset_singleton dest_9) (0)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
      "expl:Ensures clause"
      (valid_str result voidP_dest_9_33_alloc_table !charP_charM_dest_9_33))
     /\
     (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcpy.h" 17 12 27#
      "expl:Ensures clause" ((=) result dest_9))
     /\
     (#"/home/work/workspace/self/verker-gh/strcpy.h" 18 12 77#
     "expl:Ensures clause"
     (forall i_41 : int.
      ((((<=) (0) i_41) /\
       ((<=) i_41 (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))) ->
       (Int8.(=) (select !charP_charM_dest_9_33 (shift result i_41))
       (select charP_charM_src_6_34 (shift src_6 i_41))))))))))))) } diverges
    ->
   (let mutable_dest_9 = ref dest_9 in
   (let mutable_src_6 = ref src_6 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_6 = ref (any_pointer  () : (pointer voidP)) in
    (let osrc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_7 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (Unsafe_int8.any_  () ) in
    (let tmp_2_1 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (tmp_0_6 := !mutable_dest_9);
      begin
      (osrc_0 := !mutable_src_6);
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strcpy.c" 7 12 27#
       "expl:Assertion in line 7"
       (valid_str !osrc_0 voidP_src_6_34_alloc_table charP_charM_src_6_34))
       }); () end;
       'Loop_39:
       loop
       invariant
         { (((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 31#
              (same_block !osrc_0 !mutable_src_6))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 31#
              ((<=) (sub_pointer !osrc_0 !mutable_src_6) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 9 28 54#
              (same_block !mutable_src_6
              (shift !osrc_0
              (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 9 28 54#
             ((<=)
             (sub_pointer !mutable_src_6
             (shift !osrc_0
             (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 31#
              (same_block !tmp_0_6 !mutable_dest_9))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 31#
              ((<=) (sub_pointer !tmp_0_6 !mutable_dest_9) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker-gh/strcpy.c" 10 27 53#
              (same_block !mutable_dest_9
              (shift !tmp_0_6
              (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 10 27 53#
             ((<=)
             (sub_pointer !mutable_dest_9
             (shift !tmp_0_6
             (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcpy.c" 11 20 34#
             (valid_str !mutable_src_6 voidP_src_6_34_alloc_table
             charP_charM_src_6_34))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcpy.c" 12 20 44#
             ((=) (sub_pointer !mutable_dest_9 !tmp_0_6)
             (sub_pointer !mutable_src_6 !osrc_0)))
            &&
            ((#"/home/work/workspace/self/verker-gh/strcpy.c" 13 20 62#
             ((=)
             (Uint64.to_int (strlen !mutable_src_6 charP_charM_src_6_34))
             (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_34))
             (sub_pointer !mutable_src_6 !osrc_0))))
            &&
            (#"/home/work/workspace/self/verker-gh/strcpy.c" 14 20 80#
            (forall i_40 : int.
             ((((<=) (0) i_40) /\
              ((<) i_40 (sub_pointer !mutable_src_6 !osrc_0))) ->
              (Int8.(=) (select !charP_charM_dest_9_33 (shift !tmp_0_6 i_40))
              (select charP_charM_src_6_34 (shift !osrc_0 i_40)))))))))))
           /\
           (#"whole_program.jc" 2349 10 63# "expl:Assigns clause"
           (not_assigns voidP_dest_9_33_alloc_table
           voidP_dest_9_33_alloc_table (at !charP_charM_dest_9_33 'Init)
           !charP_charM_dest_9_33
           (pset_range (pset_singleton (at !mutable_dest_9 'Init)) (0)
           (Uint64.to_int
           (strlen (at !mutable_src_6 'Init) charP_charM_src_6_34)))))) } 
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_7 := !mutable_dest_9);
           begin
           (mutable_dest_9 :=
            (shift_  !mutable_dest_9
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 2421 55 67# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) ));
            begin
            (tmp_2_1 := !mutable_src_6);
             begin
             (mutable_src_6 :=
              (shift_  !mutable_src_6
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2423 53 65# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (tmp_1_1 := (acc  charP_charM_src_6_34 !tmp_2_1 )) end end end
          end;
           begin
           (let _jessie_421 = !tmp_1_1 in
           (let _jessie_422 = !tmp_0_7 in
           (let _jessie_423 = (0) in
           (let _jessie_424 = _jessie_422 in
           (upd  charP_charM_dest_9_33 _jessie_424 _jessie_421 )))));
            (if
            (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 8 34#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcpy.c" 17 9 25#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1_1 ))
             (#"whole_program.jc" 2427 60 72# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_41 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end end with Goto_while_0_break_exc _jessie_39 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      ((#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
       "expl:Assertion in line 19"
       (Int8.(=)
       (select !charP_charM_dest_9_33 (shift !mutable_dest_9 (Int.(-_) (1))))
       (#"whole_program.jc" 2435 53 64# "expl:Integer cast" (Int8.of_int
       (0)))))
      /\
      (#"/home/work/workspace/self/verker-gh/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      (Int8.(=)
      (select charP_charM_src_6_34 (shift !mutable_src_6 (Int.(-_) (1))))
      (#"whole_program.jc" 2437 54 65# "expl:Integer cast" (Int8.of_int
      (0)))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strcpy.c" 20 12 26#
      "expl:Assertion in line 20"
      (valid_str !tmp_0_6 voidP_dest_9_33_alloc_table !charP_charM_dest_9_33))
      }); () end; begin (return := !tmp_0_6); (raise Return) end end end)))));
     absurd  end with Return -> !return end)))
  
end

theory Axiomatic_StrSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate in_array (s_11 : (pointer voidP)) (c_28 : Int8.t)
  (charP_charM_s_11_36_at_L : (memory voidP Int8.t))
  =
     (exists p_10 : (pointer voidP).
      ((same_block s_11 p_10) /\
      (((<=) (sub_pointer s_11 p_10) (0)) /\
      ((same_block p_10
       (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_36_at_L))))
      /\
      (((<)
       (sub_pointer p_10
       (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_36_at_L))))
       (0))
      /\ (Int8.(=) (select charP_charM_s_11_36_at_L p_10) c_28))))))
  
  lemma In_array_shift1
  #"/home/work/workspace/self/verker-gh/strspn.h" 17 7 129#
  "expl:Lemma in_array_shift1" :
  (forall voidP_s_12_264_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_12_264_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strspn.h" 17 7 129#
    (forall s_12_0 : (pointer voidP).
     (forall c_29 : Int8.t.
      ((((valid_str s_12_0 voidP_s_12_264_alloc_table_at_L
         charP_charM_s_12_264_at_L)
        /\
        (((<>) s_12_0 null) /\
        (Int8.(<>) (select charP_charM_s_12_264_at_L s_12_0) c_29))) ->
        (in_array s_12_0 c_29 charP_charM_s_12_264_at_L))
      <-> (in_array (shift s_12_0 (1)) c_29 charP_charM_s_12_264_at_L)))))))
  
  lemma In_array_true
  #"/home/work/workspace/self/verker-gh/strspn.h" 21 7 105#
  "expl:Lemma in_array_true" :
  (forall voidP_s_13_266_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_13_266_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strspn.h" 21 7 105#
    (forall s_13 : (pointer voidP).
     (forall c_30 : Int8.t.
      (((valid_str s_13 voidP_s_13_266_alloc_table_at_L
        charP_charM_s_13_266_at_L)
       /\
       (((<>) s_13 null) /\
       (Int8.(=) (select charP_charM_s_13_266_at_L s_13) c_30))) ->
       (in_array s_13 c_30 charP_charM_s_13_266_at_L)))))))
  
  lemma In_array_false
  #"/home/work/workspace/self/verker-gh/strspn.h" 25 7 95#
  "expl:Lemma in_array_false" :
  (forall voidP_s_14_268_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_14_268_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strspn.h" 25 7 95#
    (forall s_14 : (pointer voidP).
     (forall c_31 : Int8.t.
      (((valid_str s_14 voidP_s_14_268_alloc_table_at_L
        charP_charM_s_14_268_at_L)
       /\ ((=) s_14 null)) ->
       (not (in_array s_14 c_31 charP_charM_s_14_268_at_L))))))))
  
  function strspn (pointer voidP) (pointer voidP) : int
  
  lemma Strspn_strend
  #"/home/work/workspace/self/verker-gh/strspn.h" 32 7 106#
  "expl:Lemma strspn_strend" :
  (forall voidP_s_15_37_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_15_37_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strspn.h" 32 7 106#
    (forall s_16 : (pointer voidP).
     (forall accept_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_15_37_alloc_table_at_L s_16) (0)) /\
        (((>=) (offset_max voidP_s_15_37_alloc_table_at_L s_16) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_15_37_at_L s_16)
       (#"whole_program.jc" 2489 34 45# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strspn s_16 accept_0_0) (0))))))))
  
  lemma Strspn_empty_accept
  #"/home/work/workspace/self/verker-gh/strspn.h" 37 7 116#
  "expl:Lemma strspn_empty_accept" :
  (forall voidP_accept_38_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_accept_38_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strspn.h" 37 7 116#
    (forall s_17 : (pointer voidP).
     (forall accept_1 : (pointer voidP).
      (((((<=) (offset_min voidP_accept_38_alloc_table_at_L accept_1) (0)) /\
        (((>=) (offset_max voidP_accept_38_alloc_table_at_L accept_1) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_accept_38_at_L accept_1)
       (#"whole_program.jc" 2498 38 49# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strspn s_17 accept_1) (0))))))))
  
  lemma Strspn_range
  #"/home/work/workspace/self/verker-gh/strspn.h" 42 7 129#
  "expl:Lemma strspn_range" :
  (forall voidP_accept_38_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_37_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_38_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_37_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strspn.h" 42 7 129#
      (forall s_18 : (pointer voidP).
       (forall accept_2 : (pointer voidP).
        (((valid_str s_18 voidP_s_15_37_alloc_table_at_L
          charP_charM_s_15_37_at_L)
         /\
         (valid_str accept_2 voidP_accept_38_alloc_table_at_L
         charP_charM_accept_38_at_L)) ->
         (((<=) (0) (strspn s_18 accept_2)) /\
         ((<=) (strspn s_18 accept_2)
         (Uint64.to_int (strlen s_18 charP_charM_s_15_37_at_L))))))))))))
  
  lemma Strspn_shift1
  #"/home/work/workspace/self/verker-gh/strspn.h" 47 7 188#
  "expl:Lemma strspn_shift1" :
  (forall voidP_accept_38_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_37_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_38_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_37_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strspn.h" 47 7 188#
      (forall s_19 : (pointer voidP).
       (forall accept_3 : (pointer voidP).
        (((valid_str s_19 voidP_s_15_37_alloc_table_at_L
          charP_charM_s_15_37_at_L)
         /\
         ((valid_str accept_3 voidP_accept_38_alloc_table_at_L
          charP_charM_accept_38_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_15_37_at_L s_19)
          (#"whole_program.jc" 2512 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array accept_3 (select charP_charM_s_15_37_at_L s_19)
         charP_charM_accept_38_at_L)))) ->
         ((=) (strspn s_19 accept_3)
         (Int.(+) (strspn (shift s_19 (1)) accept_3) (1)))))))))))
  
  lemma Strspn_stop_not_in_accept
  #"/home/work/workspace/self/verker-gh/strspn.h" 53 7 165#
  "expl:Lemma strspn_stop_not_in_accept" :
  (forall voidP_accept_38_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_37_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_38_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_37_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strspn.h" 53 7 165#
      (forall s_20 : (pointer voidP).
       (forall accept_4 : (pointer voidP).
        (((valid_str s_20 voidP_s_15_37_alloc_table_at_L
          charP_charM_s_15_37_at_L)
         /\
         ((valid_str accept_4 voidP_accept_38_alloc_table_at_L
          charP_charM_accept_38_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_15_37_at_L s_20)
          (#"whole_program.jc" 2521 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array accept_4 (select charP_charM_s_15_37_at_L s_20)
         charP_charM_accept_38_at_L))))) -> ((=) (strspn s_20 accept_4) (0))))))))))
  
end

theory Axiomatic_StrCSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  function strcspn (pointer voidP) (pointer voidP) : int
  
  lemma Strcspn_strend
  #"/home/work/workspace/self/verker-gh/strcspn.h" 18 7 107#
  "expl:Lemma strcspn_strend" :
  (forall voidP_s_21_39_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_21_39_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strcspn.h" 18 7 107#
    (forall s_22 : (pointer voidP).
     (forall reject_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_21_39_alloc_table_at_L s_22) (0)) /\
        (((>=) (offset_max voidP_s_21_39_alloc_table_at_L s_22) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_21_39_at_L s_22)
       (#"whole_program.jc" 2537 34 45# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strcspn s_22 reject_0_0) (0))))))))
  
  lemma Strcspn_empty_reject
  #"/home/work/workspace/self/verker-gh/strcspn.h" 23 7 144#
  "expl:Lemma strcspn_empty_reject" :
  (forall voidP_reject_40_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_39_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_40_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_39_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strcspn.h" 23 7 144#
      (forall s_23 : (pointer voidP).
       (forall reject_1 : (pointer voidP).
        (((valid_str s_23 voidP_s_21_39_alloc_table_at_L
          charP_charM_s_21_39_at_L)
         /\
         ((valid_str reject_1 voidP_reject_40_alloc_table_at_L
          charP_charM_reject_40_at_L)
         /\
         (Int8.(=) (select charP_charM_reject_40_at_L reject_1)
         (#"whole_program.jc" 2544 38 49# "expl:Integer cast" (Int8.of_int
         (0)))))) ->
         ((=) (strcspn s_23 reject_1)
         (Uint64.to_int (strlen s_23 charP_charM_s_21_39_at_L)))))))))))
  
  lemma Strcspn_range
  #"/home/work/workspace/self/verker-gh/strcspn.h" 28 7 130#
  "expl:Lemma strcspn_range" :
  (forall voidP_reject_40_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_39_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_40_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_39_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strcspn.h" 28 7 130#
      (forall s_24 : (pointer voidP).
       (forall reject_2 : (pointer voidP).
        (((valid_str s_24 voidP_s_21_39_alloc_table_at_L
          charP_charM_s_21_39_at_L)
         /\
         (valid_str reject_2 voidP_reject_40_alloc_table_at_L
         charP_charM_reject_40_at_L)) ->
         (((<=) (0) (strcspn s_24 reject_2)) /\
         ((<=) (strcspn s_24 reject_2)
         (Uint64.to_int (strlen s_24 charP_charM_s_21_39_at_L))))))))))))
  
  lemma Strcspn_shift1
  #"/home/work/workspace/self/verker-gh/strcspn.h" 33 7 191#
  "expl:Lemma strcspn_shift1" :
  (forall voidP_reject_40_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_39_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_40_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_39_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strcspn.h" 33 7 191#
      (forall s_25 : (pointer voidP).
       (forall reject_3 : (pointer voidP).
        (((valid_str s_25 voidP_s_21_39_alloc_table_at_L
          charP_charM_s_21_39_at_L)
         /\
         ((valid_str reject_3 voidP_reject_40_alloc_table_at_L
          charP_charM_reject_40_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_39_at_L s_25)
          (#"whole_program.jc" 2558 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array reject_3 (select charP_charM_s_21_39_at_L s_25)
         charP_charM_reject_40_at_L))))) ->
         ((=) (strcspn s_25 reject_3)
         (Int.(+) (strcspn (shift s_25 (1)) reject_3) (1)))))))))))
  
  lemma Strcspn_stop_in_reject
  #"/home/work/workspace/self/verker-gh/strcspn.h" 39 7 165#
  "expl:Lemma strcspn_stop_in_reject" :
  (forall voidP_reject_40_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_39_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_40_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_39_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strcspn.h" 39 7 165#
      (forall s_26 : (pointer voidP).
       (forall reject_4 : (pointer voidP).
        (((valid_str s_26 voidP_s_21_39_alloc_table_at_L
          charP_charM_s_21_39_at_L)
         /\
         ((valid_str reject_4 voidP_reject_40_alloc_table_at_L
          charP_charM_reject_40_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_39_at_L s_26)
          (#"whole_program.jc" 2567 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array reject_4 (select charP_charM_s_21_39_at_L s_26)
         charP_charM_reject_40_at_L)))) -> ((=) (strcspn s_26 reject_4) (0))))))))))
  
end

module Function_strcspn_0_safety
#"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
"expl:strcspn, safety"

  use enum.Uint64 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_0 #"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
  "expl:Function strcspn, safety" =
  fun
   (s_5 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_41_alloc_table : (alloc_table voidP))
   (voidP_reject_42_alloc_table : (alloc_table voidP))
   (voidP_reject_42_tag_table : (tag_table voidP)) (voidP_s_5_41_tag_table :
   (tag_table voidP)) (charP_charM_s_5_41 : (memory voidP Int8.t))
   (charP_charM_reject_42 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_42_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_42_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_42_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_42_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_42_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_41_alloc_table s_5) ->
     (((=) (typeof voidP_s_5_41_tag_table s_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_41_alloc_table s_5) i) /\
       ((<) i (offset_max voidP_s_5_41_alloc_table s_5))) ->
       ((=) (typeof voidP_s_5_41_tag_table (shift s_5 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2574 12 94#
   ((#"/home/work/workspace/self/verker-gh/strcspn.h" 46 13 25#
    (valid_str s_5 voidP_s_5_41_alloc_table charP_charM_s_5_41))
   /\
   (#"/home/work/workspace/self/verker-gh/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_42_alloc_table charP_charM_reject_42))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Safe_uint64.any_  () ) in
     (let __retres_8 = ref (Safe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (let _jessie_473 =
        (#"/home/work/workspace/self/verker-gh/strcspn.c" 7 16 17#
        "expl:Integer cast"
        (Safe_uint64_of_Safe_int32.cast 
         (#"whole_program.jc" 2758 38 50# "expl:Integer cast"
         (Safe_int32.of_int (0))) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strcspn.c" 7 1 7#
        "expl:Pointer index bounds" true) }); _jessie_473 end));
        begin
        (p_1_0 :=
         (let _jessie_467 = s_5 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 6 11#
         "expl:Pointer index bounds" true) }); _jessie_467 end));
         'Loop_47:
         loop
         invariant { (#"whole_program.jc" 2761 6 6177# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 17 18 37#
             (Int.(-) (Uint64.to_int (strlen s_5 charP_charM_s_5_41))
             (sub_pointer !p_1_0 s_5))) }
          begin
          any unit
          requires { true } reads { reject_0, s_5 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 16 20 68#
             ((=) (strcspn s_5 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_41_alloc_table charP_charM_s_5_41))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 12 20 145#
             (forall c_33 : (pointer voidP).
              (forall t : (pointer voidP).
               (((same_block s_5 c_33) /\
                (((<=) (sub_pointer s_5 c_33) (0)) /\
                ((same_block c_33 !p_1_0) /\
                (((<) (sub_pointer c_33 !p_1_0) (0)) /\
                ((same_block reject_0 t) /\
                (((<=) (sub_pointer reject_0 t) (0)) /\
                ((same_block t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                /\
                ((<)
                (sub_pointer t
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_41 c_33)
                (select charP_charM_reject_42 t))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5)))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 2775 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5 charP_charM_s_5_41))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             (same_block s_5 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 23#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 15#
              "expl:Pointer dereference"
              (acc  voidP_s_5_41_alloc_table charP_charM_s_5_41 !p_1_0 )) ))
             (#"whole_program.jc" 2805 28 40# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r :=
               (let _jessie_468 = reject_0 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 7 17#
               "expl:Pointer index bounds" true) }); _jessie_468 end));
               'Loop_48:
               loop
               invariant { (#"whole_program.jc" 2810 15 3033# true) }
                 variant {
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 24 19 48#
                   (Int.(-)
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_42))
                   (sub_pointer !r reject_0))) }
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42) ->
                    (in_array !r (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42)))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_42_alloc_table
                   charP_charM_reject_42))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 21 21 66#
                   (forall c_32 : (pointer voidP).
                    (((same_block reject_0 c_32) /\
                     (((<=) (sub_pointer reject_0 c_32) (0)) /\
                     ((same_block c_32 !r) /\
                     ((<) (sub_pointer c_32 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_42 c_32)
                     (select charP_charM_s_5_41 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 29#
                  (Safe_int32.(<>) 
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 21#
                    "expl:Pointer dereference"
                    (acc  voidP_reject_42_alloc_table charP_charM_reject_42
                     !r )) ))
                   (#"whole_program.jc" 2843 37 49# "expl:Integer cast"
                   (Safe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 15#
                   (Safe_int32.(=) 
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 9#
                     "expl:Pointer dereference"
                     (acc  voidP_s_5_41_alloc_table charP_charM_s_5_41 !p_1_0
                      )) ))
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 13 15#
                     "expl:Pointer dereference"
                     (acc  voidP_reject_42_alloc_table charP_charM_reject_42
                      !r )) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                      charP_charM_reject_42)) } ; () end;
                     begin
                     (__retres_8 :=
                      (let _jessie_469 = !count_5 in
                      begin
                      (assert {
                      (#"/home/work/workspace/self/verker-gh/strcspn.c" 29 4 17#
                      "expl:Pointer index bounds" true) }); _jessie_469 end));
                      (raise (Return_label_exc ())) end end else ());
                   (r :=
                    (let _jessie_470 =
                    (shift_typesafe  !r
                     (Safe_int32.to_int 
                      (#"whole_program.jc" 2862 51 63# "expl:Integer cast"
                      (Safe_int32.of_int (1))) ) ) in
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 31 34#
                    "expl:Pointer index bounds" true) }); _jessie_470 end))
                  end; (raise (Loop_continue_exc ())) end with
                  Loop_continue_exc _jessie_46 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_42 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker-gh/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                 charP_charM_reject_42))) } ; () end;
               (count_5 :=
                (let _jessie_471 =
                (Safe_uint64.(+)  !count_5
                 (#"whole_program.jc" 2873 59 72# "expl:Integer cast"
                 (Safe_uint64.of_int (1))) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker-gh/strcspn.c" 32 2 9#
                "expl:Pointer index bounds" true) }); _jessie_471 end)) end
              end;
             (p_1_0 :=
              (let _jessie_472 =
              (shift_typesafe  !p_1_0
               (Safe_int32.to_int 
                (#"whole_program.jc" 2875 46 58# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 25 28#
              "expl:Pointer index bounds" true) }); _jessie_472 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_48 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_43 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_8 :=
         (let _jessie_474 = !count_5 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strcspn.c" 34 1 14#
         "expl:Pointer index bounds" true) }); _jessie_474 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_44 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_475 = !__retres_8 in
       begin
       (assert {
       (#"whole_program.jc" 2881 7 24# "expl:Pointer index bounds" true) });
        _jessie_475 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Function_strcspn_0_behaviors
#"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
"expl:strcspn, behaviors"

  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_ensures_default
  #"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
  "expl:Function strcspn, default behavior" =
  fun
   (s_5 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_41_alloc_table : (alloc_table voidP))
   (voidP_reject_42_alloc_table : (alloc_table voidP))
   (voidP_reject_42_tag_table : (tag_table voidP)) (voidP_s_5_41_tag_table :
   (tag_table voidP)) (charP_charM_s_5_41 : (memory voidP Int8.t))
   (charP_charM_reject_42 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_42_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_42_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_42_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_42_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_42_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_41_alloc_table s_5) ->
     (((=) (typeof voidP_s_5_41_tag_table s_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_41_alloc_table s_5) i) /\
       ((<) i (offset_max voidP_s_5_41_alloc_table s_5))) ->
       ((=) (typeof voidP_s_5_41_tag_table (shift s_5 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2574 12 94#
   ((#"/home/work/workspace/self/verker-gh/strcspn.h" 46 13 25#
    (valid_str s_5 voidP_s_5_41_alloc_table charP_charM_s_5_41))
   /\
   (#"/home/work/workspace/self/verker-gh/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_42_alloc_table charP_charM_reject_42))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
      "expl:Ensures clause"
      ((=) (Uint64.to_int result) (strcspn s_5 reject_0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 12 24#
      "expl:Ensures clause"
      (Uint64.(<=) (#"whole_program.jc" 2580 35 48# "expl:Integer cast"
      (Uint64.of_int (0))) result))
     /\
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 17 37#
      "expl:Ensures clause"
      (Uint64.(<=) result (strlen s_5 charP_charM_s_5_41)))
     /\
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 51 12 143#
     "expl:Ensures clause"
     (forall p_13 : (pointer voidP).
      (forall t_3 : (pointer voidP).
       (((same_block s_5 p_13) /\
        (((<=) (sub_pointer s_5 p_13) (0)) /\
        ((same_block p_13 (shift s_5 (Uint64.to_int result))) /\
        (((<) (sub_pointer p_13 (shift s_5 (Uint64.to_int result))) (0)) /\
        ((same_block reject_0 t_3) /\
        (((<=) (sub_pointer reject_0 t_3) (0)) /\
        ((same_block t_3
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
        /\
        ((<)
        (sub_pointer t_3
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
        ->
        (Int8.(<>) (select charP_charM_s_5_41 p_13)
        (select charP_charM_reject_42 t_3)))))))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 2648 10 3453# "expl:Behavior disjointness check"
    (not
    ((exists p_12_0 : (pointer voidP).
      (exists t_1_0 : (pointer voidP).
       ((same_block s_5 p_12_0) /\
       (((<=) (sub_pointer s_5 p_12_0) (0)) /\
       ((same_block p_12_0
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
       /\
       (((<)
        (sub_pointer p_12_0
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
       /\
       ((same_block reject_0 t_1_0) /\
       (((<=) (sub_pointer reject_0 t_1_0) (0)) /\
       ((same_block t_1_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
       /\
       (((<)
        (sub_pointer t_1_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_5_41 p_12_0)
       (select charP_charM_reject_42 t_1_0))))))))))))
    /\
    (forall p_11_0 : (pointer voidP).
     (forall t_0_0 : (pointer voidP).
      (((same_block s_5 p_11_0) /\
       (((<=) (sub_pointer s_5 p_11_0) (0)) /\
       ((same_block p_11_0
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
       /\
       (((<)
        (sub_pointer p_11_0
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
       /\
       ((same_block reject_0 t_0_0) /\
       (((<=) (sub_pointer reject_0 t_0_0) (0)) /\
       ((same_block t_0_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
       /\
       ((<)
       (sub_pointer t_0_0
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_5_41 p_11_0)
       (select charP_charM_reject_42 t_0_0)))))))) });
     (check {
     (#"whole_program.jc" 2699 10 3302# "expl:Behavior completeness check"
     ((forall p_11_1 : (pointer voidP).
       (forall t_0_1 : (pointer voidP).
        (((same_block s_5 p_11_1) /\
         (((<=) (sub_pointer s_5 p_11_1) (0)) /\
         ((same_block p_11_1
          (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
         /\
         (((<)
          (sub_pointer p_11_1
          (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
         /\
         ((same_block reject_0 t_0_1) /\
         (((<=) (sub_pointer reject_0 t_0_1) (0)) /\
         ((same_block t_0_1
          (shift reject_0
          (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
         /\
         ((<)
         (sub_pointer t_0_1
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
         ->
         (Int8.(<>) (select charP_charM_s_5_41 p_11_1)
         (select charP_charM_reject_42 t_0_1)))))
     \/
     (exists p_12_1 : (pointer voidP).
      (exists t_1_1 : (pointer voidP).
       ((same_block s_5 p_12_1) /\
       (((<=) (sub_pointer s_5 p_12_1) (0)) /\
       ((same_block p_12_1
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
       /\
       (((<)
        (sub_pointer p_12_1
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
       /\
       ((same_block reject_0 t_1_1) /\
       (((<=) (sub_pointer reject_0 t_1_1) (0)) /\
       ((same_block t_1_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
       /\
       (((<)
        (sub_pointer t_1_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_5_41 p_12_1)
       (select charP_charM_reject_42 t_1_1)))))))))))))) });
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_8 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"/home/work/workspace/self/verker-gh/strcspn.c" 7 16 17#
        "expl:Integer cast"
        (Unsafe_uint64_of_Unsafe_int32.cast 
         (#"whole_program.jc" 2758 38 50# "expl:Integer cast"
         (Unsafe_int32.of_int (0))) )));
        begin
        (p_1_0 := s_5);
         'Loop_41:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
               (same_block s_5 !p_1_0))
              /\
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
               ((<=) (sub_pointer s_5 !p_1_0) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
               (same_block !p_1_0
               (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
              ((<=)
              (sub_pointer !p_1_0
              (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
              (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
              ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 30#
               (Uint64.(<=) (#"whole_program.jc" 2775 40 53#
               "expl:Integer cast" (Uint64.of_int (0))) !count_5))
              /\
              (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 25 43#
              (Uint64.(<=) !count_5 (strlen s_5 charP_charM_s_5_41))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 11 20 34#
              ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5)))
             &&
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 12 20 145#
              (forall c_33 : (pointer voidP).
               (forall t : (pointer voidP).
                (((same_block s_5 c_33) /\
                 (((<=) (sub_pointer s_5 c_33) (0)) /\
                 ((same_block c_33 !p_1_0) /\
                 (((<) (sub_pointer c_33 !p_1_0) (0)) /\
                 ((same_block reject_0 t) /\
                 (((<=) (sub_pointer reject_0 t) (0)) /\
                 ((same_block t
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 /\
                 ((<)
                 (sub_pointer t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_41 c_33)
                 (select charP_charM_reject_42 t))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 15 20 32#
              (valid_str !p_1_0 voidP_s_5_41_alloc_table charP_charM_s_5_41))
             &&
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 16 20 68#
             ((=) (strcspn s_5 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_41 !p_1_0 ) ))
             (#"whole_program.jc" 2805 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_42:
               loop
               invariant
                 { ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                     (same_block reject_0 !r))
                    /\
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                     ((<=) (sub_pointer reject_0 !r) (0)))
                    /\
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                     (same_block !r
                     (shift reject_0
                     (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))))
                    /\
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                    ((<=)
                    (sub_pointer !r
                    (shift reject_0
                    (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                    (0))))))))))
                   &&
                   ((#"/home/work/workspace/self/verker-gh/strcspn.c" 21 21 66#
                    (forall c_32 : (pointer voidP).
                     (((same_block reject_0 c_32) /\
                      (((<=) (sub_pointer reject_0 c_32) (0)) /\
                      ((same_block c_32 !r) /\
                      ((<) (sub_pointer c_32 !r) (0))))) ->
                      (Int8.(<>) (select charP_charM_reject_42 c_32)
                      (select charP_charM_s_5_41 !p_1_0)))))
                   &&
                   ((#"/home/work/workspace/self/verker-gh/strcspn.c" 22 21 33#
                    (valid_str !r voidP_reject_42_alloc_table
                    charP_charM_reject_42))
                   &&
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42) ->
                    (in_array !r (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42)))))) } 
                begin
                any unit requires { true } ensures { true } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_42 !r ) ))
                   (#"whole_program.jc" 2843 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_41 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_42 !r ) )) ))
                   then
                    begin
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 28 15 35#
                    "expl:Assertion in line 28"
                    (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42)) }); () end;
                     begin
                     (__retres_8 := !count_5); (raise (Return_label_exc ()))
                     end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 2862 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_46 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_42 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strcspn.c" 31 13 34#
               "expl:Assertion in line 31"
               (not
               (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
               charP_charM_reject_42))) }); () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 2873 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2875 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_48 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_43 ->
       'While_0_break: 'While_0_break: begin (); (__retres_8 := !count_5) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_44 ->
      'Return_label:
      'Return_label: begin (return := !__retres_8); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_exists
  #"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior exists" =
  fun
   (s_5 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_41_alloc_table : (alloc_table voidP))
   (voidP_reject_42_alloc_table : (alloc_table voidP))
   (voidP_reject_42_tag_table : (tag_table voidP)) (voidP_s_5_41_tag_table :
   (tag_table voidP)) (charP_charM_s_5_41 : (memory voidP Int8.t))
   (charP_charM_reject_42 : (memory voidP Int8.t)) 
   requires {
   ((exists p_12 : (pointer voidP).
     (exists t_1 : (pointer voidP).
      ((same_block s_5 p_12) /\
      (((<=) (sub_pointer s_5 p_12) (0)) /\
      ((same_block p_12
       (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
      /\
      (((<)
       (sub_pointer p_12
       (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
      /\
      ((same_block reject_0 t_1) /\
      (((<=) (sub_pointer reject_0 t_1) (0)) /\
      ((same_block t_1
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
      /\
      (((<)
       (sub_pointer t_1
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0))
      /\
      (Int8.(=) (select charP_charM_s_5_41 p_12)
      (select charP_charM_reject_42 t_1))))))))))))
   /\
   (((allocated voidP_reject_42_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_42_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_42_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_42_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_42_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_41_alloc_table s_5) ->
     (((=) (typeof voidP_s_5_41_tag_table s_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_41_alloc_table s_5) i) /\
       ((<) i (offset_max voidP_s_5_41_alloc_table s_5))) ->
       ((=) (typeof voidP_s_5_41_tag_table (shift s_5 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2574 12 94#
   ((#"/home/work/workspace/self/verker-gh/strcspn.h" 46 13 25#
    (valid_str s_5 voidP_s_5_41_alloc_table charP_charM_s_5_41))
   /\
   (#"/home/work/workspace/self/verker-gh/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_42_alloc_table charP_charM_reject_42)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 60 15 89#
     "expl:Ensures clause"
     (exists t_2 : (pointer voidP).
      ((same_block reject_0 t_2) /\
      (((<=) (sub_pointer reject_0 t_2) (0)) /\
      ((same_block t_2
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
      /\
      (((<)
       (sub_pointer t_2
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0))
      /\
      (Int8.(=)
      (select charP_charM_s_5_41 (shift s_5 (Uint64.to_int result)))
      (select charP_charM_reject_42 t_2))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_8 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"/home/work/workspace/self/verker-gh/strcspn.c" 7 16 17#
        "expl:Integer cast"
        (Unsafe_uint64_of_Unsafe_int32.cast 
         (#"whole_program.jc" 2758 38 50# "expl:Integer cast"
         (Unsafe_int32.of_int (0))) )));
        begin
        (p_1_0 := s_5);
         'Loop_43:
         loop
         invariant { (#"whole_program.jc" 2761 6 6177# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_5 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 16 20 68#
             ((=) (strcspn s_5 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_41_alloc_table charP_charM_s_5_41))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 12 20 145#
             (forall c_33 : (pointer voidP).
              (forall t : (pointer voidP).
               (((same_block s_5 c_33) /\
                (((<=) (sub_pointer s_5 c_33) (0)) /\
                ((same_block c_33 !p_1_0) /\
                (((<) (sub_pointer c_33 !p_1_0) (0)) /\
                ((same_block reject_0 t) /\
                (((<=) (sub_pointer reject_0 t) (0)) /\
                ((same_block t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                /\
                ((<)
                (sub_pointer t
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_41 c_33)
                (select charP_charM_reject_42 t))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5)))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 2775 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5 charP_charM_s_5_41))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             (same_block s_5 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_41 !p_1_0 ) ))
             (#"whole_program.jc" 2805 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_44:
               loop
               invariant { (#"whole_program.jc" 2810 15 3033# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42) ->
                    (in_array !r (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42)))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_42_alloc_table
                   charP_charM_reject_42))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 21 21 66#
                   (forall c_32 : (pointer voidP).
                    (((same_block reject_0 c_32) /\
                     (((<=) (sub_pointer reject_0 c_32) (0)) /\
                     ((same_block c_32 !r) /\
                     ((<) (sub_pointer c_32 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_42 c_32)
                     (select charP_charM_s_5_41 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_42 !r ) ))
                   (#"whole_program.jc" 2843 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_41 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_42 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                      charP_charM_reject_42)) } ; () end;
                     begin
                     (__retres_8 := !count_5); (raise (Return_label_exc ()))
                     end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 2862 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_46 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_42 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker-gh/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                 charP_charM_reject_42))) } ; () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 2873 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2875 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_48 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_43 ->
       'While_0_break: 'While_0_break: begin (); (__retres_8 := !count_5) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_44 ->
      'Return_label:
      'Return_label: begin (return := !__retres_8); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior not_exists" =
  fun
   (s_5 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_41_alloc_table : (alloc_table voidP))
   (voidP_reject_42_alloc_table : (alloc_table voidP))
   (voidP_reject_42_tag_table : (tag_table voidP)) (voidP_s_5_41_tag_table :
   (tag_table voidP)) (charP_charM_s_5_41 : (memory voidP Int8.t))
   (charP_charM_reject_42 : (memory voidP Int8.t)) 
   requires {
   ((forall p_11 : (pointer voidP).
     (forall t_0 : (pointer voidP).
      (((same_block s_5 p_11) /\
       (((<=) (sub_pointer s_5 p_11) (0)) /\
       ((same_block p_11
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
       /\
       (((<)
        (sub_pointer p_11
        (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0))
       /\
       ((same_block reject_0 t_0) /\
       (((<=) (sub_pointer reject_0 t_0) (0)) /\
       ((same_block t_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
       /\
       ((<)
       (sub_pointer t_0
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_5_41 p_11)
       (select charP_charM_reject_42 t_0)))))
   /\
   (((allocated voidP_reject_42_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_42_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_42_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_42_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_42_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_41_alloc_table s_5) ->
     (((=) (typeof voidP_s_5_41_tag_table s_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_41_alloc_table s_5) i) /\
       ((<) i (offset_max voidP_s_5_41_alloc_table s_5))) ->
       ((=) (typeof voidP_s_5_41_tag_table (shift s_5 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2574 12 94#
   ((#"/home/work/workspace/self/verker-gh/strcspn.h" 46 13 25#
    (valid_str s_5 voidP_s_5_41_alloc_table charP_charM_s_5_41))
   /\
   (#"/home/work/workspace/self/verker-gh/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_42_alloc_table charP_charM_reject_42)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strcspn.h" 66 15 35#
     "expl:Ensures clause"
     (Uint64.(=) result (strlen s_5 charP_charM_s_5_41)))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_8 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"/home/work/workspace/self/verker-gh/strcspn.c" 7 16 17#
        "expl:Integer cast"
        (Unsafe_uint64_of_Unsafe_int32.cast 
         (#"whole_program.jc" 2758 38 50# "expl:Integer cast"
         (Unsafe_int32.of_int (0))) )));
        begin
        (p_1_0 := s_5);
         'Loop_45:
         loop
         invariant { (#"whole_program.jc" 2761 6 6177# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_5 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 16 20 68#
             ((=) (strcspn s_5 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_41_alloc_table charP_charM_s_5_41))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 12 20 145#
             (forall c_33 : (pointer voidP).
              (forall t : (pointer voidP).
               (((same_block s_5 c_33) /\
                (((<=) (sub_pointer s_5 c_33) (0)) /\
                ((same_block c_33 !p_1_0) /\
                (((<) (sub_pointer c_33 !p_1_0) (0)) /\
                ((same_block reject_0 t) /\
                (((<=) (sub_pointer reject_0 t) (0)) /\
                ((same_block t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                /\
                ((<)
                (sub_pointer t
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_41 c_33)
                (select charP_charM_reject_42 t))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5)))
            /\
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker-gh/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 2775 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5 charP_charM_s_5_41))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             (same_block s_5 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_41 !p_1_0 ) ))
             (#"whole_program.jc" 2805 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_46:
               loop
               invariant { (#"whole_program.jc" 2810 15 3033# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42) ->
                    (in_array !r (select charP_charM_s_5_41 !p_1_0)
                    charP_charM_reject_42)))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_42_alloc_table
                   charP_charM_reject_42))
                  /\
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 21 21 66#
                   (forall c_32 : (pointer voidP).
                    (((same_block reject_0 c_32) /\
                     (((<=) (sub_pointer reject_0 c_32) (0)) /\
                     ((same_block c_32 !r) /\
                     ((<) (sub_pointer c_32 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_42 c_32)
                     (select charP_charM_s_5_41 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))))
                  /\
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_42 !r ) ))
                   (#"whole_program.jc" 2843 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_41 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker-gh/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_42 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                      charP_charM_reject_42)) } ; () end;
                     begin
                     (__retres_8 := !count_5); (raise (Return_label_exc ()))
                     end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 2862 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_46 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_42 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker-gh/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_41 !p_1_0)
                 charP_charM_reject_42))) } ; () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 2873 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2875 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_48 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_43 ->
       'While_0_break: 'While_0_break: begin (); (__retres_8 := !count_5) end
       end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_44 ->
      'Return_label:
      'Return_label: begin (return := !__retres_8); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

theory Axiomatic_memcpy_char

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use int.ComputerDivision 
  
  use why3.Bool.Bool 
  
  predicate memcmp_char (p1_1 : (pointer voidP)) (p2_1 : (pointer voidP))
  (n_7 : Uint64.t) (voidP_p2_1_66_alloc_table_at_L2 : (alloc_table voidP))
  (voidP_p1_1_65_alloc_table_at_L1 : (alloc_table voidP))
  (charP_charM_p2_1_66_at_L2 : (memory voidP Int8.t))
  (charP_charM_p1_1_65_at_L1 : (memory voidP Int8.t))
  =
     (((=) (ComputerDivision.mod (Uint64.to_int n_7) (1)) (0)) /\
     (let _n_7 = (ComputerDivision.div (Uint64.to_int n_7) (1)) in
      ((if ((<=) (0) (Int.(-) _n_7 (1))) then
        (((<=) (offset_min voidP_p1_1_65_alloc_table_at_L1 p1_1) (0)) /\
        (((>=) (offset_max voidP_p1_1_65_alloc_table_at_L1 p1_1)
         (Int.(-) _n_7 (1)))
        /\
        (forall __framac_tmp27 : int.
         ((((<=) (0) __framac_tmp27) /\
          ((<=) __framac_tmp27 (Int.(-) _n_7 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((if ((<=) (0) (Int.(-) _n_7 (1))) then
        (((<=) (offset_min voidP_p2_1_66_alloc_table_at_L2 p2_1) (0)) /\
        (((>=) (offset_max voidP_p2_1_66_alloc_table_at_L2 p2_1)
         (Int.(-) _n_7 (1)))
        /\
        (forall __framac_tmp26 : int.
         ((((<=) (0) __framac_tmp26) /\
          ((<=) __framac_tmp26 (Int.(-) _n_7 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      (forall k_2 : int.
       ((((<=) (0) k_2) /\ ((<) k_2 _n_7)) ->
        (Int8.(=) (select charP_charM_p1_1_65_at_L1 (shift p1_1 k_2))
        (select charP_charM_p2_1_66_at_L2 (shift p2_1 k_2)))))))))
  
  predicate separated_char (p1_2 : (pointer voidP)) (p2_2 : (pointer voidP))
  (n_8 : Uint64.t) (voidP_p2_2_68_alloc_table_at_L2 : (alloc_table voidP))
  (voidP_p1_2_67_alloc_table_at_L1 : (alloc_table voidP))
  =
     (((=) (ComputerDivision.mod (Uint64.to_int n_8) (1)) (0)) /\
     (let _n_8 = (ComputerDivision.div (Uint64.to_int n_8) (1)) in
      ((if ((<=) (0) (Int.(-) _n_8 (1))) then
        (((<=) (offset_min voidP_p1_2_67_alloc_table_at_L1 p1_2) (0)) /\
        (((>=) (offset_max voidP_p1_2_67_alloc_table_at_L1 p1_2)
         (Int.(-) _n_8 (1)))
        /\
        (forall __framac_tmp29 : int.
         ((((<=) (0) __framac_tmp29) /\
          ((<=) __framac_tmp29 (Int.(-) _n_8 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((if ((<=) (0) (Int.(-) _n_8 (1))) then
        (((<=) (offset_min voidP_p2_2_68_alloc_table_at_L2 p2_2) (0)) /\
        (((>=) (offset_max voidP_p2_2_68_alloc_table_at_L2 p2_2)
         (Int.(-) _n_8 (1)))
        /\
        (forall __framac_tmp28 : int.
         ((((<=) (0) __framac_tmp28) /\
          ((<=) __framac_tmp28 (Int.(-) _n_8 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((not (same_block p1_2 p2_2)) \/ (((=) true true) /\ ((=) true true)))))))
  
end

module Function_memcpy_char_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use int.ComputerDivision 
  
  use import Axiomatic_memcpy_char 
  
  use why3.Bool.Bool 
  
  val memcpy_char_0
  (dest_4 : (pointer voidP)) 
   (src_2 : (pointer voidP)) 
    (n_4 : Uint64.t) 
     (charP_charM_dest_4_62 : ref (memory voidP Int8.t)) 
      (voidP_src_2_63_alloc_table : (alloc_table voidP)) 
       (voidP_dest_4_62_alloc_table : (alloc_table voidP)) 
        (charP_charM_src_2_63 : (memory voidP Int8.t)) : (pointer voidP)
         requires {
           ("expl:External"
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 19#
            "expl:Requires clause"
            (Uint64.(>=) n_4 (#"whole_program.jc" 4349 43 56#
            "expl:Integer cast" (Uint64.of_int (0)))))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 56 13 38#
            "expl:Requires clause"
            ((=) (ComputerDivision.mod (Uint64.to_int n_4) (1)) (0)))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 57 13 223#
           "expl:Requires clause"
           (let _n_6 = (ComputerDivision.div (Uint64.to_int n_4) (1)) in
            (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) _n_6 (1))) then
              (((<=) (offset_min voidP_dest_4_62_alloc_table dest_4) (0)) /\
              (((>=) (offset_max voidP_dest_4_62_alloc_table dest_4)
               (Int.(-) _n_6 (1)))
              /\
              (forall __framac_tmp25 : int.
               ((((<=) (0) __framac_tmp25) /\
                ((<=) __framac_tmp25 (Int.(-) _n_6 (1)))) -> ((=) true true)))))
              else ((=) true true)))
            /\
            (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) _n_6 (1))) then
              (((<=) (offset_min voidP_src_2_63_alloc_table src_2) (0)) /\
              (((>=) (offset_max voidP_src_2_63_alloc_table src_2)
               (Int.(-) _n_6 (1)))
              /\
              (forall __framac_tmp24 : int.
               ((((<=) (0) __framac_tmp24) /\
                ((<=) __framac_tmp24 (Int.(-) _n_6 (1)))) -> ((=) true true)))))
              else ((=) true true)))
            /\
            (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            (separated_char dest_4 src_2 n_4 voidP_src_2_63_alloc_table
            voidP_dest_4_62_alloc_table)))))))))))))) }
         reads { charP_charM_dest_4_62 } writes { charP_charM_dest_4_62 }
         ensures {
           ((#"whole_program.jc" 4379 10 60# "expl:Assigns clause"
            (not_assigns voidP_dest_4_62_alloc_table
            voidP_dest_4_62_alloc_table (old !charP_charM_dest_4_62)
            !charP_charM_dest_4_62
            (pset_range (pset_singleton dest_4) (0)
            (Int.(-) (ComputerDivision.div (Uint64.to_int n_4) (1)) (1)))))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 70#
            "expl:Ensures clause"
            (memcmp_char dest_4 src_2 n_4 voidP_src_2_63_alloc_table
            voidP_dest_4_62_alloc_table charP_charM_src_2_63
            !charP_charM_dest_4_62))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 74 89#
           "expl:Ensures clause" ((=) result dest_4)))))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Function_strlcpy_safety
#"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
"expl:strlcpy, safety"

  use enum.Uint64 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int8_of_Safe_int32 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_offset_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0_safe 
  
  use Function_memcpy_char_0_safe 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlcpy #"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, safety" =
  fun
   (dest_10 : (pointer voidP)) (src_7 : (pointer voidP)) (size_3 : Uint64.t)
   (charP_charM_dest_10_69 : ref (memory voidP Int8.t))
   (voidP_dest_10_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_10_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_10_69_alloc_table dest_10) ->
     (((=) (typeof voidP_dest_10_69_tag_table dest_10) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) i) /\
       ((<) i (offset_max voidP_dest_10_69_alloc_table dest_10))) ->
       ((=) (typeof voidP_dest_10_69_tag_table (shift dest_10 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
     (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0)) /\
     (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
      (Int.(-) (Uint64.to_int size_3) (1)))
     /\
     (forall __framac_tmp30 : int.
      ((((<=) (0) __framac_tmp30) /\
       ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
   (not (same_block dest_10 src_7))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Safe_uint64.any_  () ) in
     (let len = ref (Safe_uint64.any_  () ) in
     (let tmp_0_12 = ref (Safe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_769 =
      (let _jessie_770 = src_7 in
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0_safe.strlen_0  _jessie_770
       voidP_src_7_70_alloc_table voidP_src_7_70_tag_table
       charP_charM_src_7_70 ))) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Pointer index bounds" true) }); _jessie_769 end));
      (if
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 7 5 9#
      (Safe_uint64.(<>)  size_3
       (#"whole_program.jc" 4521 44 57# "expl:Integer cast"
       (Safe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 16 27#
       (Safe_uint64.(>=)  !ret size_3 ))
       then
        (tmp_0_12 :=
         (let _jessie_772 =
         (Safe_uint64.(-)  size_3
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 38 39#
          "expl:Integer cast"
          (Safe_uint64_of_Safe_int32.cast 
           (#"whole_program.jc" 4525 72 84# "expl:Integer cast"
           (Safe_int32.of_int (1))) )) ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 15 45#
         "expl:Pointer index bounds" true) }); _jessie_772 end))
       else
        (tmp_0_12 :=
         (let _jessie_771 = !ret in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 15 45#
         "expl:Pointer index bounds" true) }); _jessie_771 end)));
        begin
        (len :=
         (let _jessie_773 = !tmp_0_12 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 2 8#
         "expl:Pointer index bounds" true) }); _jessie_773 end));
         begin
         (let _jessie_777 =
         (let _jessie_776 = dest_10 in
         (let _jessie_775 = src_7 in
         (let _jessie_774 = !len in
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0_safe.memcpy_char_0  _jessie_776 _jessie_775
          _jessie_774 charP_charM_dest_10_69 voidP_src_7_70_alloc_table
          voidP_dest_10_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_10_69, dest_10, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strlcpy.c" 10 13 67#
            (forall i_53 : int.
             ((((<=) (0) i_53) /\ ((<) i_53 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_53))
              (select !charP_charM_dest_10_69 (shift dest_10 i_53)))))) } ;
           () end;
          begin
          (let _jessie_779 =
          (let _jessie_778 =
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 17 18#
          "expl:Integer cast"
          (Safe_int8_of_Safe_int32.cast 
           (#"whole_program.jc" 4540 21 33# "expl:Integer cast"
           (Safe_int32.of_int (0))) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 2 18#
          "expl:Pointer index bounds" true) }); _jessie_778 end) in
          (let _jessie_780 = dest_10 in
          (let _jessie_781 = (Safe_uint64.to_int  !len ) in
          (let _jessie_782 = (shift_typesafe  _jessie_780 _jessie_781 ) in
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 2 18#
          "expl:Pointer dereference"
          (upd_offset_typesafe  voidP_dest_10_69_alloc_table
           charP_charM_dest_10_69 _jessie_780 _jessie_781 _jessie_779 ))))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 12 13 28#
             (valid_str dest_10 voidP_dest_10_69_alloc_table
             !charP_charM_dest_10_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_10 !charP_charM_dest_10_69) !len)) } ;
            () end end end end end else ());
      begin
      (return :=
       (let _jessie_783 = !ret in
       begin
       (assert {
       (#"whole_program.jc" 4555 7 17# "expl:Pointer index bounds" true) });
        _jessie_783 end)); (raise Return) end end))); absurd  end with Return
    -> !return end)
  
end

module Function_memcpy_char_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use int.Int 
  
  use int.ComputerDivision 
  
  use import Axiomatic_memcpy_char 
  
  use why3.Bool.Bool 
  
  val memcpy_char_0
  (dest_4 : (pointer voidP)) 
   (src_2 : (pointer voidP)) 
    (n_4 : Uint64.t) 
     (charP_charM_dest_4_62 : ref (memory voidP Int8.t)) 
      (voidP_src_2_63_alloc_table : (alloc_table voidP)) 
       (voidP_dest_4_62_alloc_table : (alloc_table voidP)) 
        (charP_charM_src_2_63 : (memory voidP Int8.t)) : (pointer voidP)
         requires { true } reads { charP_charM_dest_4_62 } writes {
         charP_charM_dest_4_62 }
         ensures {
           ((#"whole_program.jc" 4379 10 60# "expl:Assigns clause"
            (not_assigns voidP_dest_4_62_alloc_table
            voidP_dest_4_62_alloc_table (old !charP_charM_dest_4_62)
            !charP_charM_dest_4_62
            (pset_range (pset_singleton dest_4) (0)
            (Int.(-) (ComputerDivision.div (Uint64.to_int n_4) (1)) (1)))))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           ((#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 70#
            "expl:Ensures clause"
            (memcmp_char dest_4 src_2 n_4 voidP_src_2_63_alloc_table
            voidP_dest_4_62_alloc_table charP_charM_src_2_63
            !charP_charM_dest_4_62))
           /\
           (#"/home/work/.opam/4.04.2/share/frama-c/jessie/jessie_spec_prolog.h" 63 74 89#
           "expl:Ensures clause" ((=) result dest_4)))))) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Function_strlcpy_behaviors
#"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
"expl:strlcpy, behaviors"

  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int8_of_Unsafe_int32 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0 
  
  use Function_memcpy_char_0 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlcpy_ensures_default
  #"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, default behavior" =
  fun
   (dest_10 : (pointer voidP)) (src_7 : (pointer voidP)) (size_3 : Uint64.t)
   (charP_charM_dest_10_69 : ref (memory voidP Int8.t))
   (voidP_dest_10_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_10_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_10_69_alloc_table dest_10) ->
     (((=) (typeof voidP_dest_10_69_tag_table dest_10) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) i) /\
       ((<) i (offset_max voidP_dest_10_69_alloc_table dest_10))) ->
       ((=) (typeof voidP_dest_10_69_tag_table (shift dest_10 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
     (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0)) /\
     (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
      (Int.(-) (Uint64.to_int size_3) (1)))
     /\
     (forall __framac_tmp30 : int.
      ((((<=) (0) __framac_tmp30) /\
       ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
   (not (same_block dest_10 src_7))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 4498 10 135# "expl:Behavior disjointness check"
    (not
    ((Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)) /\
    (Uint64.(=) size_3 (#"whole_program.jc" 4499 48 61# "expl:Integer cast"
    (Uint64.of_int (0))))))) });
     (check {
     (#"whole_program.jc" 4501 10 209# "expl:Behavior disjointness check"
     (not
     ((Uint64.(<) (#"whole_program.jc" 4501 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_3)
     /\
     ((Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70)) /\
     (Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)))))) });
     (check {
     (#"whole_program.jc" 4505 10 204# "expl:Behavior disjointness check"
     (not
     ((Uint64.(<) (#"whole_program.jc" 4505 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_3)
     /\
     ((Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70)) /\
     (Uint64.(=) size_3 (#"whole_program.jc" 4507 48 61# "expl:Integer cast"
     (Uint64.of_int (0)))))))) });
     (check {
     (#"whole_program.jc" 4509 10 269# "expl:Behavior completeness check"
     ((Uint64.(=) size_3 (#"whole_program.jc" 4509 44 57# "expl:Integer cast"
      (Uint64.of_int (0))))
     \/
     ((Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)) \/
     ((Uint64.(<) (#"whole_program.jc" 4511 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_3)
     /\ (Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70)))))) });
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_12 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_710 = src_7 in
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_710 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_3
       (#"whole_program.jc" 4521 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_3 ))
       then
        (tmp_0_12 :=
         (Unsafe_uint64.(-)  size_3
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 38 39#
          "expl:Integer cast"
          (Unsafe_uint64_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4525 72 84# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) )) )) else (tmp_0_12 := !ret));
        begin
        (len := !tmp_0_12);
         begin
         (let _jessie_717 =
         (let _jessie_716 = dest_10 in
         (let _jessie_715 = src_7 in
         (let _jessie_714 = !len in
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_716 _jessie_715
          _jessie_714 charP_charM_dest_10_69 voidP_src_7_70_alloc_table
          voidP_dest_10_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 10 13 67#
          "expl:Assertion in line 10"
          (forall i_53 : int.
           ((((<=) (0) i_53) /\ ((<) i_53 (Uint64.to_int !len))) ->
            (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_53))
            (select !charP_charM_dest_10_69 (shift dest_10 i_53)))))) }); ()
          end;
          begin
          (let _jessie_719 =
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 17 18#
          "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4540 21 33# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_720 = dest_10 in
          (let _jessie_721 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_722 = (shift_  _jessie_720 _jessie_721 ) in
          (upd  charP_charM_dest_10_69 _jessie_722 _jessie_719 )))));
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strlcpy.c" 12 13 28#
           "expl:Assertion in line 12"
           (valid_str dest_10 voidP_dest_10_69_alloc_table
           !charP_charM_dest_10_69)) }); () end;
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strlcpy.c" 13 13 32#
           "expl:Assertion in line 13"
           (Uint64.(=) (strlen dest_10 !charP_charM_dest_10_69) !len)) }); ()
           end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_size_is_greater_src
  #"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior size_is_greater_src" =
  fun
   (dest_10 : (pointer voidP)) (src_7 : (pointer voidP)) (size_3 : Uint64.t)
   (charP_charM_dest_10_69 : ref (memory voidP Int8.t))
   (voidP_dest_10_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_10_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   ((Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)) /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_10_69_alloc_table dest_10) ->
     (((=) (typeof voidP_dest_10_69_tag_table dest_10) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) i) /\
       ((<) i (offset_max voidP_dest_10_69_alloc_table dest_10))) ->
       ((=) (typeof voidP_dest_10_69_tag_table (shift dest_10 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
     (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0)) /\
     (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
      (Int.(-) (Uint64.to_int size_3) (1)))
     /\
     (forall __framac_tmp30 : int.
      ((((<=) (0) __framac_tmp30) /\
       ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
   (not (same_block dest_10 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 4485 10 64# "expl:Assigns clause"
      (not_assigns voidP_dest_10_69_alloc_table voidP_dest_10_69_alloc_table
      (old !charP_charM_dest_10_69) !charP_charM_dest_10_69
      (pset_range (pset_singleton dest_10) (0)
      (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
      "expl:Ensures clause"
      (forall i_54 : int.
       ((((<=) (0) i_54) /\
        ((<) i_54 (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
        (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_54))
        (select !charP_charM_dest_10_69 (shift dest_10 i_54))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 32 15 30#
     "expl:Ensures clause"
     (valid_str dest_10 voidP_dest_10_69_alloc_table !charP_charM_dest_10_69)))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_12 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_740 = src_7 in
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_740 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_3
       (#"whole_program.jc" 4521 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_3 ))
       then
        (tmp_0_12 :=
         (Unsafe_uint64.(-)  size_3
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 38 39#
          "expl:Integer cast"
          (Unsafe_uint64_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4525 72 84# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) )) )) else (tmp_0_12 := !ret));
        begin
        (len := !tmp_0_12);
         begin
         (let _jessie_747 =
         (let _jessie_746 = dest_10 in
         (let _jessie_745 = src_7 in
         (let _jessie_744 = !len in
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_746 _jessie_745
          _jessie_744 charP_charM_dest_10_69 voidP_src_7_70_alloc_table
          voidP_dest_10_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_10_69, dest_10, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strlcpy.c" 10 13 67#
            (forall i_53 : int.
             ((((<=) (0) i_53) /\ ((<) i_53 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_53))
              (select !charP_charM_dest_10_69 (shift dest_10 i_53)))))) } ;
           () end;
          begin
          (let _jessie_749 =
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 17 18#
          "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4540 21 33# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_750 = dest_10 in
          (let _jessie_751 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_752 = (shift_  _jessie_750 _jessie_751 ) in
          (upd  charP_charM_dest_10_69 _jessie_752 _jessie_749 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 12 13 28#
             (valid_str dest_10 voidP_dest_10_69_alloc_table
             !charP_charM_dest_10_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_10 !charP_charM_dest_10_69) !len)) } ;
            () end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_size_is_lower_src
  #"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior size_is_lower_src" =
  fun
   (dest_10 : (pointer voidP)) (src_7 : (pointer voidP)) (size_3 : Uint64.t)
   (charP_charM_dest_10_69 : ref (memory voidP Int8.t))
   (voidP_dest_10_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_10_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((Uint64.(<) (#"whole_program.jc" 4474 12 25# "expl:Integer cast"
     (Uint64.of_int (0))) size_3)
    /\ (Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70)))
   /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_10_69_alloc_table dest_10) ->
     (((=) (typeof voidP_dest_10_69_tag_table dest_10) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) i) /\
       ((<) i (offset_max voidP_dest_10_69_alloc_table dest_10))) ->
       ((=) (typeof voidP_dest_10_69_tag_table (shift dest_10 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
     (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0)) /\
     (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
      (Int.(-) (Uint64.to_int size_3) (1)))
     /\
     (forall __framac_tmp30 : int.
      ((((<=) (0) __framac_tmp30) /\
       ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
   (not (same_block dest_10 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 4475 10 58# "expl:Assigns clause"
      (not_assigns voidP_dest_10_69_alloc_table voidP_dest_10_69_alloc_table
      (old !charP_charM_dest_10_69) !charP_charM_dest_10_69
      (pset_range (pset_singleton dest_10) (0)
      (Int.(-) (Uint64.to_int size_3) (1)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
      "expl:Ensures clause"
      (forall i_55 : int.
       ((((<=) (0) i_55) /\ ((<) i_55 (Int.(-) (Uint64.to_int size_3) (1))))
        ->
        (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_55))
        (select !charP_charM_dest_10_69 (shift dest_10 i_55))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strlcpy.h" 27 15 30#
     "expl:Ensures clause"
     (valid_str dest_10 voidP_dest_10_69_alloc_table !charP_charM_dest_10_69)))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_12 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_725 = src_7 in
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_725 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_3
       (#"whole_program.jc" 4521 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_3 ))
       then
        (tmp_0_12 :=
         (Unsafe_uint64.(-)  size_3
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 38 39#
          "expl:Integer cast"
          (Unsafe_uint64_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4525 72 84# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) )) )) else (tmp_0_12 := !ret));
        begin
        (len := !tmp_0_12);
         begin
         (let _jessie_732 =
         (let _jessie_731 = dest_10 in
         (let _jessie_730 = src_7 in
         (let _jessie_729 = !len in
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_731 _jessie_730
          _jessie_729 charP_charM_dest_10_69 voidP_src_7_70_alloc_table
          voidP_dest_10_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_10_69, dest_10, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strlcpy.c" 10 13 67#
            (forall i_53 : int.
             ((((<=) (0) i_53) /\ ((<) i_53 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_53))
              (select !charP_charM_dest_10_69 (shift dest_10 i_53)))))) } ;
           () end;
          begin
          (let _jessie_734 =
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 17 18#
          "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4540 21 33# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_735 = dest_10 in
          (let _jessie_736 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_737 = (shift_  _jessie_735 _jessie_736 ) in
          (upd  charP_charM_dest_10_69 _jessie_737 _jessie_734 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 12 13 28#
             (valid_str dest_10 voidP_dest_10_69_alloc_table
             !charP_charM_dest_10_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_10 !charP_charM_dest_10_69) !len)) } ;
            () end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_zero_size
  #"/home/work/workspace/self/verker-gh/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior zero_size" =
  fun
   (dest_10 : (pointer voidP)) (src_7 : (pointer voidP)) (size_3 : Uint64.t)
   (charP_charM_dest_10_69 : ref (memory voidP Int8.t))
   (voidP_dest_10_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_10_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   ((Uint64.(=) size_3 (#"whole_program.jc" 4494 21 34# "expl:Integer cast"
    (Uint64.of_int (0))))
   /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_10_69_alloc_table dest_10) ->
     (((=) (typeof voidP_dest_10_69_tag_table dest_10) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) i) /\
       ((<) i (offset_max voidP_dest_10_69_alloc_table dest_10))) ->
       ((=) (typeof voidP_dest_10_69_tag_table (shift dest_10 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
     (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0)) /\
     (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
      (Int.(-) (Uint64.to_int size_3) (1)))
     /\
     (forall __framac_tmp30 : int.
      ((((<=) (0) __framac_tmp30) /\
       ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 4459 12 788#
   ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
   (not (same_block dest_10 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"whole_program.jc" 4495 10 18# "expl:Assigns clause"
     (not_assigns voidP_dest_10_69_alloc_table voidP_dest_10_69_alloc_table
     (old !charP_charM_dest_10_69) !charP_charM_dest_10_69 pset_empty))) } 
   ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_12 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_755 = src_7 in
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_755 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker-gh/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_3
       (#"whole_program.jc" 4521 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_3 ))
       then
        (tmp_0_12 :=
         (Unsafe_uint64.(-)  size_3
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 8 38 39#
          "expl:Integer cast"
          (Unsafe_uint64_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4525 72 84# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) )) )) else (tmp_0_12 := !ret));
        begin
        (len := !tmp_0_12);
         begin
         (let _jessie_762 =
         (let _jessie_761 = dest_10 in
         (let _jessie_760 = src_7 in
         (let _jessie_759 = !len in
         (#"/home/work/workspace/self/verker-gh/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_761 _jessie_760
          _jessie_759 charP_charM_dest_10_69 voidP_src_7_70_alloc_table
          voidP_dest_10_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_10_69, dest_10, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strlcpy.c" 10 13 67#
            (forall i_53 : int.
             ((((<=) (0) i_53) /\ ((<) i_53 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_53))
              (select !charP_charM_dest_10_69 (shift dest_10 i_53)))))) } ;
           () end;
          begin
          (let _jessie_764 =
          (#"/home/work/workspace/self/verker-gh/strlcpy.c" 11 17 18#
          "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"whole_program.jc" 4540 21 33# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) )) in
          (let _jessie_765 = dest_10 in
          (let _jessie_766 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_767 = (shift_  _jessie_765 _jessie_766 ) in
          (upd  charP_charM_dest_10_69 _jessie_767 _jessie_764 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 12 13 28#
             (valid_str dest_10 voidP_dest_10_69_alloc_table
             !charP_charM_dest_10_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_10_69, dest_10 }
           ensures {
             (#"/home/work/workspace/self/verker-gh/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_10 !charP_charM_dest_10_69) !len)) } ;
            () end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
end

module Function_strlen_0_safety
#"/home/work/workspace/self/verker-gh/strlen.h" 86 7 28#
"expl:strlen, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlen_0 #"/home/work/workspace/self/verker-gh/strlen.h" 86 7 28#
  "expl:Function strlen, safety" =
  fun
   (s_6 : (pointer voidP)) (voidP_s_6_43_alloc_table : (alloc_table voidP))
   (voidP_s_6_43_tag_table : (tag_table voidP)) (charP_charM_s_6_43 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_6_43_alloc_table s_6) ->
     (((=) (typeof voidP_s_6_43_tag_table s_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_6_43_alloc_table s_6) i) /\
       ((<) i (offset_max voidP_s_6_43_alloc_table s_6))) ->
       ((=) (typeof voidP_s_6_43_tag_table (shift s_6 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strlen.h" 80 13 25#
   (valid_str s_6 voidP_s_6_43_alloc_table charP_charM_s_6_43))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (let sc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let __retres_9 = ref (Safe_uint64.any_  () ) in
    try
     begin
     (sc_0 :=
      (let _jessie_480 = s_6 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker-gh/strlen.c" 11 6 12#
      "expl:Pointer index bounds" true) }); _jessie_480 end));
      'Loop_50:
      loop
      invariant { (#"whole_program.jc" 2904 6 1277# true) }
        variant { (#"/home/work/workspace/self/verker-gh/strlen.c" 9 18 38#
          (Int.(-) (Uint64.to_int (strlen s_6 charP_charM_s_6_43))
          (sub_pointer !sc_0 s_6))) }
       begin
       any unit
       requires { true } reads { s_6 }
       ensures {
         ((#"/home/work/workspace/self/verker-gh/strlen.c" 8 20 54#
          ((=) (Uint64.to_int (strlen s_6 charP_charM_s_6_43))
          (Int.(+) (Uint64.to_int (strlen !sc_0 charP_charM_s_6_43))
          (sub_pointer !sc_0 s_6))))
         /\
         ((#"/home/work/workspace/self/verker-gh/strlen.c" 7 20 33#
          (valid_str !sc_0 voidP_s_6_43_alloc_table charP_charM_s_6_43))
         /\
         (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
         (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 27#
          (same_block s_6 !sc_0))
         /\
         (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 27#
          ((<=) (sub_pointer s_6 !sc_0) (0)))
         /\
         (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 25 44#
          (same_block !sc_0
          (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_43)))))
         /\
         (#"/home/work/workspace/self/verker-gh/strlen.c" 6 25 44#
         ((<=)
         (sub_pointer !sc_0
         (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_43)))) (0))))))))))))
         } ;
        try
         begin
         begin
         (if
         (#"/home/work/workspace/self/verker-gh/strlen.c" 11 14 25#
         (Safe_int32.(<>) 
          (#"/home/work/workspace/self/verker-gh/strlen.c" 11 14 17#
          "expl:Integer cast"
          (Safe_int32_of_Safe_int8.cast 
           (#"/home/work/workspace/self/verker-gh/strlen.c" 11 14 17#
           "expl:Pointer dereference"
           (acc  voidP_s_6_43_alloc_table charP_charM_s_6_43 !sc_0 )) ))
          (#"whole_program.jc" 2925 28 40# "expl:Integer cast"
          (Safe_int32.of_int (0))) )) then ()
         else (raise (Goto_while_0_break_exc ())));
          (sc_0 :=
           (let _jessie_481 =
           (shift_typesafe  !sc_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 2927 44 56# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strlen.c" 11 27 31#
           "expl:Pointer index bounds" true) }); _jessie_481 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_51 -> () end end end; (raise (Goto_while_0_break_exc ()))
     end with Goto_while_0_break_exc _jessie_49 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (__retres_9 :=
       (let _jessie_482 =
       (#"/home/work/workspace/self/verker-gh/strlen.c" 13 8 14#
       "expl:Integer cast"
       (Safe_uint64.of_int 
        (#"/home/work/workspace/self/verker-gh/strlen.c" 13 8 14#
        (sub_pointer_  !sc_0 s_6 )) )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strlen.c" 13 1 15#
       "expl:Pointer index bounds" true) }); _jessie_482 end));
       begin
       (return :=
        (let _jessie_483 = !__retres_9 in
        begin
        (assert {
        (#"whole_program.jc" 2933 7 24# "expl:Pointer index bounds" true) });
         _jessie_483 end)); (raise Return) end end end end)); absurd  end
    with Return -> !return end)
  
end

module Function_strlen_0_behaviors
#"/home/work/workspace/self/verker-gh/strlen.h" 86 7 28#
"expl:strlen, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlen_ensures_default
  #"/home/work/workspace/self/verker-gh/strlen.h" 86 7 28#
  "expl:Function strlen, default behavior" =
  fun
   (s_6 : (pointer voidP)) (voidP_s_6_43_alloc_table : (alloc_table voidP))
   (voidP_s_6_43_tag_table : (tag_table voidP)) (charP_charM_s_6_43 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_6_43_alloc_table s_6) ->
     (((=) (typeof voidP_s_6_43_tag_table s_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_6_43_alloc_table s_6) i) /\
       ((<) i (offset_max voidP_s_6_43_alloc_table s_6))) ->
       ((=) (typeof voidP_s_6_43_tag_table (shift s_6 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strlen.h" 80 13 25#
   (valid_str s_6 voidP_s_6_43_alloc_table charP_charM_s_6_43))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
      "expl:Ensures clause"
      (Uint64.(=) result (strlen s_6 charP_charM_s_6_43)))
     /\
     (#"/home/work/workspace/self/verker-gh/strlen.h" 82 12 32#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strlen.h" 83 12 30#
      "expl:Ensures clause"
      (Int8.(=)
      (select charP_charM_s_6_43 (shift s_6 (Uint64.to_int result)))
      (#"whole_program.jc" 2891 35 46# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strlen.h" 84 12 64#
     "expl:Ensures clause"
     (forall i_42 : int.
      ((((<=) (0) i_42) /\ ((<) i_42 (Uint64.to_int result))) ->
       (Int8.(<>) (select charP_charM_s_6_43 (shift s_6 i_42))
       (#"whole_program.jc" 2896 40 51# "expl:Integer cast" (Int8.of_int
       (0))))))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (let sc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let __retres_9 = ref (Unsafe_uint64.any_  () ) in
    try
     begin
     (sc_0 := s_6);
      'Loop_49:
      loop
      invariant
        { ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
           (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 27#
            (same_block s_6 !sc_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 27#
            ((<=) (sub_pointer s_6 !sc_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker-gh/strlen.c" 6 25 44#
            (same_block !sc_0
            (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_43)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strlen.c" 6 25 44#
           ((<=)
           (sub_pointer !sc_0
           (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_43)))) (0))))))))))
          &&
          ((#"/home/work/workspace/self/verker-gh/strlen.c" 7 20 33#
           (valid_str !sc_0 voidP_s_6_43_alloc_table charP_charM_s_6_43))
          &&
          (#"/home/work/workspace/self/verker-gh/strlen.c" 8 20 54#
          ((=) (Uint64.to_int (strlen s_6 charP_charM_s_6_43))
          (Int.(+) (Uint64.to_int (strlen !sc_0 charP_charM_s_6_43))
          (sub_pointer !sc_0 s_6)))))) } 
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         begin
         (if
         (#"/home/work/workspace/self/verker-gh/strlen.c" 11 14 25#
         (Unsafe_int32.(<>) 
          (#"/home/work/workspace/self/verker-gh/strlen.c" 11 14 17#
          "expl:Integer cast"
          (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_s_6_43 !sc_0 )
           ))
          (#"whole_program.jc" 2925 28 40# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) )) then ()
         else (raise (Goto_while_0_break_exc ())));
          (sc_0 :=
           (shift_  !sc_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 2927 44 56# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) )) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_51 -> () end end end; (raise (Goto_while_0_break_exc ()))
     end with Goto_while_0_break_exc _jessie_49 ->
     'While_0_break:
     'While_0_break:
     begin
     ();
      begin
      (__retres_9 :=
       (#"/home/work/workspace/self/verker-gh/strlen.c" 13 8 14#
       "expl:Integer cast"
       (Unsafe_uint64.of_int 
        (#"/home/work/workspace/self/verker-gh/strlen.c" 13 8 14#
        (sub_pointer_  !sc_0 s_6 )) )));
       begin (return := !__retres_9); (raise Return) end end end end));
     absurd  end with Return -> !return end)
  
end

theory Axiomatic_Strnlen

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use bool.Bool 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate valid_strn (s_27 : (pointer voidP)) (cnt : Uint64.t)
  (voidP_s_27_44_alloc_table_at_L : (alloc_table voidP))
  (charP_charM_s_27_44_at_L : (memory voidP Int8.t))
  =
     ((exists n_4_0 : Uint64.t.
       ((Uint64.(<) n_4_0 cnt) /\
       ((Int8.(=)
        (select charP_charM_s_27_44_at_L (shift s_27 (Uint64.to_int n_4_0)))
        (#"whole_program.jc" 2941 62 73# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       (if ((<=) (0) (Uint64.to_int n_4_0)) then
        (((<=) (offset_min voidP_s_27_44_alloc_table_at_L s_27) (0)) /\
        (((>=) (offset_max voidP_s_27_44_alloc_table_at_L s_27)
         (Uint64.to_int n_4_0))
        /\
        (forall __framac_tmp21 : int.
         ((((<=) (0) __framac_tmp21) /\
          ((<=) __framac_tmp21 (Uint64.to_int n_4_0))) -> ((=) true true)))))
        else ((=) true true)))))
     \/
     (if ((<=) (0) (Uint64.to_int cnt)) then
      (((<=) (offset_min voidP_s_27_44_alloc_table_at_L s_27) (0)) /\
      (((>=) (offset_max voidP_s_27_44_alloc_table_at_L s_27)
       (Uint64.to_int cnt))
      /\
      (forall __framac_tmp20 : int.
       ((((<=) (0) __framac_tmp20) /\
        ((<=) __framac_tmp20 (Uint64.to_int cnt))) -> ((=) true true)))))
      else ((=) true true)))
  
  lemma Valid_strn_shift1
  #"/home/work/workspace/self/verker-gh/strnlen.h" 13 7 133#
  "expl:Lemma valid_strn_shift1" :
  (forall voidP_s_28_311_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_28_311_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 13 7 133#
    (forall s_28 : (pointer voidP).
     (forall cnt_0 : Uint64.t.
      (((valid_strn s_28 cnt_0 voidP_s_28_311_alloc_table_at_L
        charP_charM_s_28_311_at_L)
       /\
       ((Uint64.(>) cnt_0 (#"whole_program.jc" 2966 58 71#
        "expl:Integer cast" (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_28_311_at_L s_28)
       (#"whole_program.jc" 2967 34 45# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       (valid_strn (shift s_28 (1)) (#"whole_program.jc" 2969 32 68#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_0) (1))))
       voidP_s_28_311_alloc_table_at_L charP_charM_s_28_311_at_L)))))))
  
  function strnlen (pointer voidP) Uint64.t (memory voidP Int8.t) :
  Uint64.t
  
  lemma Strnlen_range
  #"/home/work/workspace/self/verker-gh/strnlen.h" 23 7 109#
  "expl:Lemma strnlen_range" :
  (forall voidP_s_30_312_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_30_312_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 23 7 109#
    (forall s_30 : (pointer voidP).
     (forall cnt_2 : Uint64.t.
      ((valid_strn s_30 cnt_2 voidP_s_30_312_alloc_table_at_L
       charP_charM_s_30_312_at_L) ->
       ((Uint64.(<=) (#"whole_program.jc" 2980 20 33# "expl:Integer cast"
        (Uint64.of_int (0))) (strnlen s_30 cnt_2 charP_charM_s_30_312_at_L))
       /\ (Uint64.(<=) (strnlen s_30 cnt_2 charP_charM_s_30_312_at_L) cnt_2))))))))
  
  lemma Strnlen_null
  #"/home/work/workspace/self/verker-gh/strnlen.h" 28 7 93#
  "expl:Lemma strnlen_null" :
  (forall charP_charM_s_31_313_at_L : (memory voidP Int8.t).
   (#"/home/work/workspace/self/verker-gh/strnlen.h" 28 7 93#
   (forall s_31 : (pointer voidP).
    (forall cnt_3 : Uint64.t.
     ((Uint64.(=) (strnlen s_31 cnt_3 charP_charM_s_31_313_at_L)
      (#"whole_program.jc" 2986 45 58# "expl:Integer cast" (Uint64.of_int
      (0))))
     <->
     ((Int8.(=) (select charP_charM_s_31_313_at_L s_31)
      (#"whole_program.jc" 2987 34 45# "expl:Integer cast" (Int8.of_int
      (0))))
     \/
     (Uint64.(=) cnt_3 (#"whole_program.jc" 2987 60 73# "expl:Integer cast"
     (Uint64.of_int (0))))))))))
  
  lemma Strnlen_before_zero
  #"/home/work/workspace/self/verker-gh/strnlen.h" 32 7 122#
  "expl:Lemma strnlen_before_zero" :
  (forall voidP_s_32_314_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_32_314_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 32 7 122#
    (forall s_32 : (pointer voidP).
     (forall i_43 : Uint64.t.
      (forall cnt_4 : Uint64.t.
       (((valid_strn s_32 cnt_4 voidP_s_32_314_alloc_table_at_L
         charP_charM_s_32_314_at_L)
        /\
        ((Uint64.(<=) (#"whole_program.jc" 2993 52 65# "expl:Integer cast"
         (Uint64.of_int (0))) i_43)
        /\ (Uint64.(<) i_43 (strnlen s_32 cnt_4 charP_charM_s_32_314_at_L))))
        ->
        (Int8.(<>)
        (select charP_charM_s_32_314_at_L (shift s_32 (Uint64.to_int i_43)))
        (#"whole_program.jc" 2995 57 68# "expl:Integer cast" (Int8.of_int
        (0)))))))))))
  
  lemma Strnlen_at_zero
  #"/home/work/workspace/self/verker-gh/strnlen.h" 37 7 133#
  "expl:Lemma strnlen_at_zero" :
  (forall voidP_s_33_315_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_33_315_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 37 7 133#
    (forall s_33 : (pointer voidP).
     (forall cnt_5 : Uint64.t.
      (((valid_strn s_33 cnt_5 voidP_s_33_315_alloc_table_at_L
        charP_charM_s_33_315_at_L)
       /\ (Uint64.(<) (strnlen s_33 cnt_5 charP_charM_s_33_315_at_L) cnt_5))
       ->
       (Int8.(=)
       (select charP_charM_s_33_315_at_L
       (shift s_33
       (Uint64.to_int (strnlen s_33 cnt_5 charP_charM_s_33_315_at_L))))
       (#"whole_program.jc" 3003 20 31# "expl:Integer cast" (Int8.of_int
       (0))))))))))
  
  lemma Strnlen_at_cnt
  #"/home/work/workspace/self/verker-gh/strnlen.h" 42 7 133#
  "expl:Lemma strnlen_at_cnt" :
  (forall voidP_s_34_316_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_34_316_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 42 7 133#
    (forall s_34 : (pointer voidP).
     (forall i_44 : Uint64.t.
      (forall cnt_6 : Uint64.t.
       (((valid_strn s_34 cnt_6 voidP_s_34_316_alloc_table_at_L
         charP_charM_s_34_316_at_L)
        /\ (Uint64.(=) i_44 (strnlen s_34 cnt_6 charP_charM_s_34_316_at_L)))
        ->
        ((Int8.(=)
         (select charP_charM_s_34_316_at_L (shift s_34 (Uint64.to_int i_44)))
         (#"whole_program.jc" 3011 58 69# "expl:Integer cast" (Int8.of_int
         (0))))
        \/ (Uint64.(=) i_44 cnt_6)))))))))
  
  lemma Strnlen_zero
  #"/home/work/workspace/self/verker-gh/strnlen.h" 47 7 209#
  "expl:Lemma strnlen_zero" :
  (forall voidP_s_35_317_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_35_317_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 47 7 209#
    (forall s_35 : (pointer voidP).
     (forall cnt_7 : Uint64.t.
      (forall n_5 : Uint64.t.
       (((valid_strn s_35 cnt_7 voidP_s_35_317_alloc_table_at_L
         charP_charM_s_35_317_at_L)
        /\
        ((Uint64.(<) n_5 cnt_7) /\
        ((Int8.(=)
         (select charP_charM_s_35_317_at_L (shift s_35 (Uint64.to_int n_5)))
         (#"whole_program.jc" 3019 58 69# "expl:Integer cast" (Int8.of_int
         (0))))
        /\
        (forall i_45 : Uint64.t.
         ((Uint64.(<) i_45 n_5) ->
          (Int8.(<>)
          (select charP_charM_s_35_317_at_L
          (shift s_35 (Uint64.to_int i_45))) (#"whole_program.jc" 3022 62 73#
          "expl:Integer cast" (Int8.of_int (0))))))))) ->
        (Uint64.(=) (strnlen s_35 cnt_7 charP_charM_s_35_317_at_L) n_5))))))))
  
  lemma Strnlen_cnt
  #"/home/work/workspace/self/verker-gh/strnlen.h" 55 7 162#
  "expl:Lemma strnlen_cnt" :
  (forall voidP_s_36_318_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_36_318_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 55 7 162#
    (forall s_36 : (pointer voidP).
     (forall cnt_8 : Uint64.t.
      (((valid_strn s_36 cnt_8 voidP_s_36_318_alloc_table_at_L
        charP_charM_s_36_318_at_L)
       /\
       (forall n_6 : Uint64.t.
        ((Uint64.(<) n_6 cnt_8) ->
         (Int8.(<>)
         (select charP_charM_s_36_318_at_L (shift s_36 (Uint64.to_int n_6)))
         (#"whole_program.jc" 3031 59 70# "expl:Integer cast" (Int8.of_int
         (0))))))) ->
       (Uint64.(=) (strnlen s_36 cnt_8 charP_charM_s_36_318_at_L) cnt_8)))))))
  
  lemma Strnlen_shift
  #"/home/work/workspace/self/verker-gh/strnlen.h" 61 7 161#
  "expl:Lemma strnlen_shift" :
  (forall voidP_s_37_319_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_37_319_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 61 7 161#
    (forall s_37 : (pointer voidP).
     (forall i_46 : Uint64.t.
      (forall cnt_9 : Uint64.t.
       (((valid_strn s_37 cnt_9 voidP_s_37_319_alloc_table_at_L
         charP_charM_s_37_319_at_L)
        /\ (Uint64.(<=) i_46 (strnlen s_37 cnt_9 charP_charM_s_37_319_at_L)))
        ->
        ((=)
        (Uint64.to_int
        (strnlen (shift s_37 (Uint64.to_int i_46)) cnt_9
        charP_charM_s_37_319_at_L))
        (Int.(-)
        (Uint64.to_int (strnlen s_37 cnt_9 charP_charM_s_37_319_at_L))
        (Uint64.to_int i_46))))))))))
  
  lemma Strnlen_shift_ex
  #"/home/work/workspace/self/verker-gh/strnlen.h" 67 7 160#
  "expl:Lemma strnlen_shift_ex" :
  (forall voidP_s_38_320_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_38_320_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 67 7 160#
    (forall s_38 : (pointer voidP).
     (forall i_47 : Uint64.t.
      (forall cnt_10 : Uint64.t.
       (((valid_strn s_38 cnt_10 voidP_s_38_320_alloc_table_at_L
         charP_charM_s_38_320_at_L)
        /\
        ((Uint64.(<) (#"whole_program.jc" 3048 53 66# "expl:Integer cast"
         (Uint64.of_int (0))) i_47)
        /\
        (Uint64.(<=) i_47 (strnlen s_38 cnt_10 charP_charM_s_38_320_at_L))))
        ->
        (Uint64.(<)
        (strnlen (shift s_38 (Uint64.to_int i_47)) cnt_10
        charP_charM_s_38_320_at_L)
        (strnlen s_38 cnt_10 charP_charM_s_38_320_at_L)))))))))
  
  lemma Strnlen_shift1
  #"/home/work/workspace/self/verker-gh/strnlen.h" 73 7 159#
  "expl:Lemma strnlen_shift1" :
  (forall voidP_s_39_321_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_39_321_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 73 7 159#
    (forall s_39 : (pointer voidP).
     (forall cnt_11 : Uint64.t.
      (((valid_strn s_39 cnt_11 voidP_s_39_321_alloc_table_at_L
        charP_charM_s_39_321_at_L)
       /\
       ((Uint64.(>) cnt_11 (#"whole_program.jc" 3056 60 73#
        "expl:Integer cast" (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_39_321_at_L s_39)
       (#"whole_program.jc" 3057 34 45# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (Uint64.to_int (strnlen s_39 cnt_11 charP_charM_s_39_321_at_L))
       (Int.(+)
       (Uint64.to_int
       (strnlen (shift s_39 (1)) (#"whole_program.jc" 3060 33 70#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_11) (1))))
       charP_charM_s_39_321_at_L)) (1)))))))))
  
  lemma Strnlen_less
  #"/home/work/workspace/self/verker-gh/strnlen.h" 78 7 139#
  "expl:Lemma strnlen_less" :
  (forall voidP_s_40_322_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_40_322_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 78 7 139#
    (forall s_40 : (pointer voidP).
     (forall i_48 : Uint64.t.
      (forall cnt_12 : Uint64.t.
       (((valid_strn s_40 cnt_12 voidP_s_40_322_alloc_table_at_L
         charP_charM_s_40_322_at_L)
        /\ (Uint64.(<=) i_48 cnt_12)) ->
        (Uint64.(<=) (strnlen s_40 i_48 charP_charM_s_40_322_at_L)
        (strnlen s_40 cnt_12 charP_charM_s_40_322_at_L)))))))))
  
  lemma Valid_str_strn
  #"/home/work/workspace/self/verker-gh/strnlen.h" 84 7 114#
  "expl:Lemma valid_str_strn" :
  (forall voidP_s_41_323_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_41_323_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strnlen.h" 84 7 114#
    (forall s_41 : (pointer voidP).
     (forall cnt_13 : Uint64.t.
      (((valid_str s_41 voidP_s_41_323_alloc_table_at_L
        charP_charM_s_41_323_at_L)
       /\ (Uint64.(<=) cnt_13 (strlen s_41 charP_charM_s_41_323_at_L))) ->
       (valid_strn s_41 cnt_13 voidP_s_41_323_alloc_table_at_L
       charP_charM_s_41_323_at_L)))))))
  
  axiom Strnlen_definition :
  (forall s_29 : (pointer voidP).
   (forall cnt_1 : Uint64.t.
    (forall charP_charM_s_29_45_at_L : (memory voidP Int8.t)
     [(strnlen s_29 cnt_1 charP_charM_s_29_45_at_L)] .
     ((=) (strnlen s_29 cnt_1 charP_charM_s_29_45_at_L)
     (if
      (Bool.orb
      (Int8.(=) (select charP_charM_s_29_45_at_L (shift s_29 (0)))
      (#"whole_program.jc" 2972 32 43# "expl:Integer cast" (Int8.of_int
      (0))))
      (Uint64.(=) cnt_1 (#"whole_program.jc" 2972 58 71# "expl:Integer cast"
      (Uint64.of_int (0))))) then (#"whole_program.jc" 2972 79 92#
      "expl:Integer cast" (Uint64.of_int (0))) else
      (#"whole_program.jc" 2972 98 204# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int
      (strnlen (shift s_29 (1)) (#"whole_program.jc" 2974 32 68#
      "expl:Integer cast"
      (Uint64.of_int (Int.(-) (Uint64.to_int cnt_1) (1))))
      charP_charM_s_29_45_at_L))))))))))
  
end

module Function_strnchr_safety
#"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
"expl:strnchr, safety"

  use enum.Uint64 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr #"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
  "expl:Function strnchr, safety" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_46_alloc_table : (alloc_table voidP)) (voidP_s_7_46_tag_table :
   (tag_table voidP)) (charP_charM_s_7_46 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_7_46_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_46_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_46_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_46_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_46_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_46_alloc_table charP_charM_s_7_46))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Safe_bit_uint64.any_  () ) in
     (let tmp_0_8 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_10 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 :=
        (let _jessie_513 = !mutable_s_7 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strnchr.c" 5 11 15#
        "expl:Pointer index bounds" true) }); _jessie_513 end));
        begin
        (ocount :=
         (let _jessie_508 = !mutable_count_3 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strnchr.c" 6 11 17#
         "expl:Pointer index bounds" true) }); _jessie_508 end));
         'Loop_54:
         loop
         invariant { (#"whole_program.jc" 3191 6 2745# true) }
           variant {
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 13 18 23#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 13 18 23#
             !mutable_count_3))) }
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 12 20 69#
             (forall p_14 : (pointer voidP).
              (((same_block !os_1 p_14) /\
               (((<=) (sub_pointer !os_1 p_14) (0)) /\
               ((same_block p_14 !mutable_s_7) /\
               ((<) (sub_pointer p_14 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_46 p_14)
               (#"whole_program.jc" 3222 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_46_alloc_table charP_charM_s_7_46))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 3193 40 53#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_8 :=
             (let _jessie_509 = !mutable_count_3 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
             "expl:Pointer index bounds" true) }); _jessie_509 end));
             begin
             (mutable_count_3 :=
              (let _jessie_510 =
              (Safe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 3229 59 72# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
              "expl:Pointer index bounds" true) }); _jessie_510 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
             (Safe_bit_uint64.(<>)  !tmp_0_8
              (#"whole_program.jc" 3232 50 63# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 36#
              (Safe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Safe_bit_int32_of_Safe_bit_int8.cast 
                (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 28#
                "expl:Pointer dereference"
                (acc  voidP_s_7_46_alloc_table charP_charM_s_7_46
                 !mutable_s_7 )) ))
               (#"whole_program.jc" 3234 28 40# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 25#
             (Safe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 8#
               "expl:Pointer dereference"
               (acc  voidP_s_7_46_alloc_table charP_charM_s_7_46 !mutable_s_7
                )) ))
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_10 :=
               (let _jessie_511 = !mutable_s_7 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 17 3 20#
               "expl:Pointer index bounds" true) }); _jessie_511 end));
               (raise (Return_label_exc ())) end else ());
             (mutable_s_7 :=
              (let _jessie_512 =
              (shift_typesafe  !mutable_s_7
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 3243 46 58# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 38 41#
              "expl:Pointer index bounds" true) }); _jessie_512 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_55 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_52 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_10 :=
         (let _jessie_514 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strnchr.c" 18 1 20#
         "expl:Pointer index bounds" true) }); _jessie_514 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_53 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_515 = !__retres_10 in
       begin
       (assert {
       (#"whole_program.jc" 3249 7 25# "expl:Pointer index bounds" true) });
        _jessie_515 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)))
  
end

module Function_strnchr_behaviors
#"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
"expl:strnchr, behaviors"

  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr_ensures_default
  #"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
  "expl:Function strnchr, default behavior" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_46_alloc_table : (alloc_table voidP)) (voidP_s_7_46_tag_table :
   (tag_table voidP)) (charP_charM_s_7_46 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_7_46_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_46_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_46_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_46_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_46_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_46_alloc_table charP_charM_s_7_46))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 3127 10 1759# "expl:Behavior disjointness check"
    (not
    ((exists p_16_0 : (pointer voidP).
      ((same_block !mutable_s_7 p_16_0) /\
      (((<=) (sub_pointer !mutable_s_7 p_16_0) (0)) /\
      ((same_block p_16_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46))))
      /\
      (((<)
       (sub_pointer p_16_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_7_46 p_16_0)
      (#"whole_program.jc" 3139 55 70# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))
    /\
    (forall p_15_0 : (pointer voidP).
     (((same_block !mutable_s_7 p_15_0) /\
      (((<=) (sub_pointer !mutable_s_7 p_15_0) (0)) /\
      ((same_block p_15_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46))))
      /\
      ((<)
      (sub_pointer p_15_0
      (shift !mutable_s_7
      (Bit_uint64.to_int
      (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_7_46 p_15_0)
      (#"whole_program.jc" 3152 56 71# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) });
     (check {
     (#"whole_program.jc" 3154 10 1640# "expl:Behavior completeness check"
     ((forall p_15_1 : (pointer voidP).
       (((same_block !mutable_s_7 p_15_1) /\
        (((<=) (sub_pointer !mutable_s_7 p_15_1) (0)) /\
        ((same_block p_15_1
         (shift !mutable_s_7
         (Bit_uint64.to_int
         (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46))))
        /\
        ((<)
        (sub_pointer p_15_1
        (shift !mutable_s_7
        (Bit_uint64.to_int
        (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))) (0)))))
        ->
        (Bit_int8.(<>) (select charP_charM_s_7_46 p_15_1)
        (#"whole_program.jc" 3165 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_16)))))
     \/
     (exists p_16_1 : (pointer voidP).
      ((same_block !mutable_s_7 p_16_1) /\
      (((<=) (sub_pointer !mutable_s_7 p_16_1) (0)) /\
      ((same_block p_16_1
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46))))
      /\
      (((<)
       (sub_pointer p_16_1
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_7_46 p_16_1)
      (#"whole_program.jc" 3178 53 68# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))) });
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_8 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_10 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount := !mutable_count_3);
         'Loop_51:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
              ((#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 30#
               (Bit_uint64.(<=) (#"whole_program.jc" 3193 40 53#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_3))
              /\
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 25 40#
              (Bit_uint64.(<=) !mutable_count_3 !ocount)))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
               (same_block !os_1 !mutable_s_7))
              /\
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
               ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
               (same_block !mutable_s_7
               (shift !os_1
               (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
              ((<=)
              (sub_pointer !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))))
              (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 9 20 44#
              ((=) (sub_pointer !mutable_s_7 !os_1)
              (Int.(-) (Bit_uint64.to_int !ocount)
              (Bit_uint64.to_int !mutable_count_3))))
             &&
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 10 20 40#
              (valid_strn !mutable_s_7 !mutable_count_3
              voidP_s_7_46_alloc_table charP_charM_s_7_46))
             &&
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 11 20 69#
              ((=)
              (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))
              (Int.(+) (sub_pointer !mutable_s_7 !os_1)
              (Bit_uint64.to_int
              (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))))
             &&
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 12 20 69#
             (forall p_14 : (pointer voidP).
              (((same_block !os_1 p_14) /\
               (((<=) (sub_pointer !os_1 p_14) (0)) /\
               ((same_block p_14 !mutable_s_7) /\
               ((<) (sub_pointer p_14 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_46 p_14)
               (#"whole_program.jc" 3222 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_0_8 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 3229 59 72# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_8
              (#"whole_program.jc" 3232 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
               (#"whole_program.jc" 3234 28 40# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_10 := !mutable_s_7); (raise (Return_label_exc ()))
              end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 3243 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_55 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_52 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_10 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_53 ->
      'Return_label:
      'Return_label: begin (return := !__retres_10); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_exists
  #"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior exists" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_46_alloc_table : (alloc_table voidP)) (voidP_s_7_46_tag_table :
   (tag_table voidP)) (charP_charM_s_7_46 : (memory voidP Int8.t)) 
   requires {
   ((exists p_16 : (pointer voidP).
     ((same_block s_7 p_16) /\
     (((<=) (sub_pointer s_7 p_16) (0)) /\
     ((same_block p_16
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
     /\
     (((<)
      (sub_pointer p_16
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_7_46 p_16)
     (#"whole_program.jc" 3092 29 44# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))
   /\
   (((allocated voidP_s_7_46_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_46_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_46_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_46_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_46_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_46_alloc_table charP_charM_s_7_46)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
      "expl:Ensures clause" (same_block s_7 result))
     /\
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      (same_block result
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnchr.h" 19 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_7_46 result)
      (#"whole_program.jc" 3105 51 75# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16))))
     /\
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 20 15 69#
     "expl:Ensures clause"
     (forall p_17 : (pointer voidP).
      (((same_block s_7 p_17) /\
       (((<=) (sub_pointer s_7 p_17) (0)) /\
       ((same_block p_17 result) /\ ((<) (sub_pointer p_17 result) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_7_46 p_17)
       (#"whole_program.jc" 3114 40 64# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))) } diverges 
   ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_8 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_10 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount := !mutable_count_3);
         'Loop_52:
         loop
         invariant { (#"whole_program.jc" 3191 6 2745# true) } 
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 12 20 69#
             (forall p_14 : (pointer voidP).
              (((same_block !os_1 p_14) /\
               (((<=) (sub_pointer !os_1 p_14) (0)) /\
               ((same_block p_14 !mutable_s_7) /\
               ((<) (sub_pointer p_14 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_46 p_14)
               (#"whole_program.jc" 3222 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_46_alloc_table charP_charM_s_7_46))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 3193 40 53#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_8 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 3229 59 72# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_8
              (#"whole_program.jc" 3232 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
               (#"whole_program.jc" 3234 28 40# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_10 := !mutable_s_7); (raise (Return_label_exc ()))
              end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 3243 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_55 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_52 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_10 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_53 ->
      'Return_label:
      'Return_label: begin (return := !__retres_10); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_not_exists
  #"/home/work/workspace/self/verker-gh/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior not_exists" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_46_alloc_table : (alloc_table voidP)) (voidP_s_7_46_tag_table :
   (tag_table voidP)) (charP_charM_s_7_46 : (memory voidP Int8.t)) 
   requires {
   ((forall p_15 : (pointer voidP).
     (((same_block s_7 p_15) /\
      (((<=) (sub_pointer s_7 p_15) (0)) /\
      ((same_block p_15
       (shift s_7
       (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
      /\
      ((<)
      (sub_pointer p_15
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_7_46 p_15)
      (#"whole_program.jc" 3124 29 44# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))
   /\
   (((allocated voidP_s_7_46_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_46_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_46_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_46_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_46_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_46_alloc_table charP_charM_s_7_46)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strnchr.h" 23 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_8 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_10 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount := !mutable_count_3);
         'Loop_53:
         loop
         invariant { (#"whole_program.jc" 3191 6 2745# true) } 
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 12 20 69#
             (forall p_14 : (pointer voidP).
              (((same_block !os_1 p_14) /\
               (((<=) (sub_pointer !os_1 p_14) (0)) /\
               ((same_block p_14 !mutable_s_7) /\
               ((<) (sub_pointer p_14 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_46 p_14)
               (#"whole_program.jc" 3222 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_46)))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_46_alloc_table charP_charM_s_7_46))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount charP_charM_s_7_46))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker-gh/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 3193 40 53#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker-gh/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_8 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 3229 59 72# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_8
              (#"whole_program.jc" 3232 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
               (#"whole_program.jc" 3234 28 40# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_46 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker-gh/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_10 := !mutable_s_7); (raise (Return_label_exc ()))
              end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 3243 46 58# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_55 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_52 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_10 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_53 ->
      'Return_label:
      'Return_label: begin (return := !__retres_10); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
end

module Function_strnlen_0_safety
#"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
"expl:strnlen, safety"

  use enum.Uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnlen_0 #"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
  "expl:Function strnlen, safety" =
  fun
   (s_8 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_48_alloc_table :
   (alloc_table voidP)) (voidP_s_8_48_tag_table : (tag_table voidP))
   (charP_charM_s_8_48 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_8_48_alloc_table s_8) ->
     (((=) (typeof voidP_s_8_48_tag_table s_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_48_alloc_table s_8) i) /\
       ((<) i (offset_max voidP_s_8_48_alloc_table s_8))) ->
       ((=) (typeof voidP_s_8_48_tag_table (shift s_8 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnlen.h" 96 13 33#
   (valid_strn s_8 count_4 voidP_s_8_48_alloc_table charP_charM_s_8_48))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Safe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (Safe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 :=
       (let _jessie_534 = s_8 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 6 12#
       "expl:Pointer index bounds" true) }); _jessie_534 end));
       'Loop_58:
       loop
       invariant { (#"whole_program.jc" 3302 6 2565# true) }
         variant {
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 13 18 23#
           (Bit_uint64.to_int
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 13 18 23#
           !mutable_count_4))) }
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 12 20 71#
           (forall i_49 : int.
            ((((<=) (0) i_49) /\ ((<) i_49 (sub_pointer !sc_0_0 s_8))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_49))
             (#"whole_program.jc" 3335 55 66# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 11 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_48))
           (sub_pointer !sc_0_0 s_8))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 10 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_48_alloc_table
           charP_charM_s_8_48))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 9 20 54#
           ((=) (sub_pointer !sc_0_0 s_8)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            (same_block s_8 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            ((<=) (sub_pointer s_8 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
            (same_block !sc_0_0
            (shift s_8
            (Bit_uint64.to_int
            (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))))
           (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 30#
            (Bit_uint64.(<=) (#"whole_program.jc" 3306 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0))
            !mutable_count_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 25 48#
           (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strnlen.c" 6 20 51#
          (same_block s_8 !sc_0_0)))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_9 :=
           (let _jessie_535 = !mutable_count_4 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
           "expl:Pointer index bounds" true) }); _jessie_535 end));
           begin
           (mutable_count_4 :=
            (let _jessie_536 =
            (Safe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 3342 59 72# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 1)) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
            "expl:Pointer index bounds" true) }); _jessie_536 end)); () end
          end;
           (if
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
           (Safe_bit_uint64.(<>)  !tmp_0_9
            (#"whole_program.jc" 3345 50 63# "expl:Integer cast"
            (Safe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 42#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 34#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 34#
              "expl:Pointer dereference"
              (acc  voidP_s_8_48_alloc_table charP_charM_s_8_48 !sc_0_0 )) ))
             (#"whole_program.jc" 3347 28 40# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())))
           else (raise (Goto_while_0_break_exc ())));
           (sc_0_0 :=
            (let _jessie_537 =
            (shift_typesafe  !sc_0_0
             (Safe_int32.to_int 
              (#"whole_program.jc" 3350 48 60# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 44 48#
            "expl:Pointer index bounds" true) }); _jessie_537 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_58 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_56 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_11 :=
        (let _jessie_538 =
        (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
        "expl:Integer cast"
        (Safe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
         (sub_pointer_  !sc_0_0 s_8 )) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 1 15#
        "expl:Pointer index bounds" true) }); _jessie_538 end));
        begin
        (return :=
         (let _jessie_539 = !__retres_11 in
         begin
         (assert {
         (#"whole_program.jc" 3356 7 25# "expl:Pointer index bounds" true) });
          _jessie_539 end)); (raise Return) end end end end))); absurd  end
    with Return -> !return end))
  
end

module Function_strnlen_0_behaviors
#"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
"expl:strnlen, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnlen_ensures_count_len
  #"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
  "expl:Function strnlen, behavior count_len" =
  fun
   (s_8 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_48_alloc_table :
   (alloc_table voidP)) (voidP_s_8_48_tag_table : (tag_table voidP))
   (charP_charM_s_8_48 : (memory voidP Int8.t)) 
   requires {
   ((forall i_50 : int.
     ((((<=) (0) i_50) /\ ((<=) i_50 (Bit_uint64.to_int count_4))) ->
      (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_50))
      (#"whole_program.jc" 3273 37 48# "expl:Integer cast" (Int8.of_int
      (0))))))
   /\
   (((allocated voidP_s_8_48_alloc_table s_8) ->
     (((=) (typeof voidP_s_8_48_tag_table s_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_48_alloc_table s_8) i) /\
       ((<) i (offset_max voidP_s_8_48_alloc_table s_8))) ->
       ((=) (typeof voidP_s_8_48_tag_table (shift s_8 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnlen.h" 96 13 33#
   (valid_strn s_8 count_4 voidP_s_8_48_alloc_table charP_charM_s_8_48)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strnlen.h" 105 15 31#
     "expl:Ensures clause" (Bit_uint64.(=) result count_4))) } diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8);
       'Loop_57:
       loop
       invariant { (#"whole_program.jc" 3302 6 2565# true) } 
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 12 20 71#
           (forall i_49 : int.
            ((((<=) (0) i_49) /\ ((<) i_49 (sub_pointer !sc_0_0 s_8))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_49))
             (#"whole_program.jc" 3335 55 66# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 11 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_48))
           (sub_pointer !sc_0_0 s_8))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 10 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_48_alloc_table
           charP_charM_s_8_48))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 9 20 54#
           ((=) (sub_pointer !sc_0_0 s_8)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            (same_block s_8 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            ((<=) (sub_pointer s_8 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
            (same_block !sc_0_0
            (shift s_8
            (Bit_uint64.to_int
            (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))))
           (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 30#
            (Bit_uint64.(<=) (#"whole_program.jc" 3306 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0))
            !mutable_count_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 25 48#
           (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strnlen.c" 6 20 51#
          (same_block s_8 !sc_0_0)))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_9 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 3342 59 72# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_9
            (#"whole_program.jc" 3345 50 63# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_48 !sc_0_0 ) ))
             (#"whole_program.jc" 3347 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())))
           else (raise (Goto_while_0_break_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 3350 48 60# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_58 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_56 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_11 :=
        (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
         (sub_pointer_  !sc_0_0 s_8 )) )));
        begin (return := !__retres_11); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
  let strnlen_ensures_default
  #"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
  "expl:Function strnlen, default behavior" =
  fun
   (s_8 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_48_alloc_table :
   (alloc_table voidP)) (voidP_s_8_48_tag_table : (tag_table voidP))
   (charP_charM_s_8_48 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_8_48_alloc_table s_8) ->
     (((=) (typeof voidP_s_8_48_tag_table s_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_48_alloc_table s_8) i) /\
       ((<) i (offset_max voidP_s_8_48_alloc_table s_8))) ->
       ((=) (typeof voidP_s_8_48_tag_table (shift s_8 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnlen.h" 96 13 33#
   (valid_strn s_8 count_4 voidP_s_8_48_alloc_table charP_charM_s_8_48))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strnlen.h" 98 12 40#
     "expl:Ensures clause"
     (Bit_uint64.(=) result (strnlen s_8 count_4 charP_charM_s_8_48)))) }
   diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 3276 10 546# "expl:Behavior disjointness check"
    (not
    ((exists i_51_0 : int.
      (((<=) (0) i_51_0) /\
      (((<=) i_51_0 (Bit_uint64.to_int !mutable_count_4)) /\
      (Int8.(=) (select charP_charM_s_8_48 (shift s_8 i_51_0))
      (#"whole_program.jc" 3279 63 74# "expl:Integer cast" (Int8.of_int
      (0)))))))
    /\
    (forall i_50_0 : int.
     ((((<=) (0) i_50_0) /\
      ((<=) i_50_0 (Bit_uint64.to_int !mutable_count_4))) ->
      (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_50_0))
      (#"whole_program.jc" 3283 64 75# "expl:Integer cast" (Int8.of_int
      (0))))))))) });
     (check {
     (#"whole_program.jc" 3285 10 521# "expl:Behavior completeness check"
     ((forall i_50_1 : int.
       ((((<=) (0) i_50_1) /\
        ((<=) i_50_1 (Bit_uint64.to_int !mutable_count_4))) ->
        (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_50_1))
        (#"whole_program.jc" 3288 60 71# "expl:Integer cast" (Int8.of_int
        (0))))))
     \/
     (exists i_51_1 : int.
      (((<=) (0) i_51_1) /\
      (((<=) i_51_1 (Bit_uint64.to_int !mutable_count_4)) /\
      (Int8.(=) (select charP_charM_s_8_48 (shift s_8 i_51_1))
      (#"whole_program.jc" 3292 61 72# "expl:Integer cast" (Int8.of_int
      (0))))))))) });
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8);
       'Loop_55:
       loop
       invariant
         { ((#"/home/work/workspace/self/verker-gh/strnlen.c" 6 20 51#
            (same_block s_8 !sc_0_0))
           &&
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
            ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 3306 40 53#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_4))
            /\
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 25 48#
            (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init))))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
            ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
             (same_block s_8 !sc_0_0))
            /\
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
            ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
             ((<=) (sub_pointer s_8 !sc_0_0) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
            ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
             (same_block !sc_0_0
             (shift s_8
             (Bit_uint64.to_int
             (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
            ((<=)
            (sub_pointer !sc_0_0
            (shift s_8
            (Bit_uint64.to_int
            (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))))
            (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 9 20 54#
            ((=) (sub_pointer !sc_0_0 s_8)
            (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
            (Bit_uint64.to_int !mutable_count_4))))
           &&
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 10 20 41#
            (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_48_alloc_table
            charP_charM_s_8_48))
           &&
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 11 20 78#
            ((=)
            (Bit_uint64.to_int
            (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))
            (Int.(+)
            (Bit_uint64.to_int
            (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_48))
            (sub_pointer !sc_0_0 s_8))))
           &&
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 12 20 71#
           (forall i_49 : int.
            ((((<=) (0) i_49) /\ ((<) i_49 (sub_pointer !sc_0_0 s_8))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_49))
             (#"whole_program.jc" 3335 55 66# "expl:Integer cast"
             (Int8.of_int (0))))))))))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_9 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 3342 59 72# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_9
            (#"whole_program.jc" 3345 50 63# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_48 !sc_0_0 ) ))
             (#"whole_program.jc" 3347 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())))
           else (raise (Goto_while_0_break_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 3350 48 60# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_58 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_56 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_11 :=
        (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
         (sub_pointer_  !sc_0_0 s_8 )) )));
        begin (return := !__retres_11); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
  let strnlen_ensures_null_byte
  #"/home/work/workspace/self/verker-gh/strnlen.h" 109 7 43#
  "expl:Function strnlen, behavior null_byte" =
  fun
   (s_8 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_48_alloc_table :
   (alloc_table voidP)) (voidP_s_8_48_tag_table : (tag_table voidP))
   (charP_charM_s_8_48 : (memory voidP Int8.t)) 
   requires {
   ((exists i_51 : int.
     (((<=) (0) i_51) /\
     (((<=) i_51 (Bit_uint64.to_int count_4)) /\
     (Int8.(=) (select charP_charM_s_8_48 (shift s_8 i_51))
     (#"whole_program.jc" 3262 37 48# "expl:Integer cast" (Int8.of_int (0)))))))
   /\
   (((allocated voidP_s_8_48_alloc_table s_8) ->
     (((=) (typeof voidP_s_8_48_tag_table s_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_48_alloc_table s_8) i) /\
       ((<) i (offset_max voidP_s_8_48_alloc_table s_8))) ->
       ((=) (typeof voidP_s_8_48_tag_table (shift s_8 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strnlen.h" 96 13 33#
   (valid_strn s_8 count_4 voidP_s_8_48_alloc_table charP_charM_s_8_48)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
      "expl:Ensures clause"
      (Int8.(=)
      (select charP_charM_s_8_48 (shift s_8 (Bit_uint64.to_int result)))
      (#"whole_program.jc" 3264 33 44# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strnlen.h" 102 15 67#
     "expl:Ensures clause"
     (forall i_52 : int.
      ((((<=) (0) i_52) /\ ((<) i_52 (Bit_uint64.to_int result))) ->
       (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_52))
       (#"whole_program.jc" 3269 38 49# "expl:Integer cast" (Int8.of_int
       (0))))))))))) } diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8);
       'Loop_56:
       loop
       invariant { (#"whole_program.jc" 3302 6 2565# true) } 
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8 }
        ensures {
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 12 20 71#
           (forall i_49 : int.
            ((((<=) (0) i_49) /\ ((<) i_49 (sub_pointer !sc_0_0 s_8))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_49))
             (#"whole_program.jc" 3335 55 66# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 11 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_48))
           (sub_pointer !sc_0_0 s_8))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 10 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_48_alloc_table
           charP_charM_s_8_48))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 9 20 54#
           ((=) (sub_pointer !sc_0_0 s_8)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            (same_block s_8 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 27#
            ((<=) (sub_pointer s_8 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 20 60#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
            (same_block !sc_0_0
            (shift s_8
            (Bit_uint64.to_int
            (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 8 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8
           (Bit_uint64.to_int
           (strnlen s_8 (at !mutable_count_4 'Init) charP_charM_s_8_48))))
           (0))))))))))
          /\
          ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strnlen.c" 7 20 30#
            (Bit_uint64.(<=) (#"whole_program.jc" 3306 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0))
            !mutable_count_4))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 7 25 48#
           (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init))))))
          /\
          (#"/home/work/workspace/self/verker-gh/strnlen.c" 6 20 51#
          (same_block s_8 !sc_0_0)))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_9 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 3342 59 72# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_9
            (#"whole_program.jc" 3345 50 63# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker-gh/strnlen.c" 15 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_48 !sc_0_0 ) ))
             (#"whole_program.jc" 3347 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())))
           else (raise (Goto_while_0_break_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 3350 48 60# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_58 -> () end end end; (raise (Goto_while_0_break_exc ()))
      end with Goto_while_0_break_exc _jessie_56 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (__retres_11 :=
        (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker-gh/strnlen.c" 18 8 14#
         (sub_pointer_  !sc_0_0 s_8 )) )));
        begin (return := !__retres_11); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_StrPBrk

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  function strpbrk (pointer voidP) (pointer voidP) : (pointer
  voidP)
  
  lemma Strpbrk_strend
  #"/home/work/workspace/self/verker-gh/strpbrk.h" 12 7 107#
  "expl:Lemma strpbrk_strend" :
  (forall voidP_cs_49_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_cs_49_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker-gh/strpbrk.h" 12 7 107#
    (forall cs_0_0 : (pointer voidP).
     (forall ct_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_cs_49_alloc_table_at_L cs_0_0) (0)) /\
        (((>=) (offset_max voidP_cs_49_alloc_table_at_L cs_0_0) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_cs_49_at_L cs_0_0)
       (#"whole_program.jc" 3370 34 45# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strpbrk cs_0_0 ct_0_0) null)))))))
  
  lemma Strpbrk_empty_ct
  #"/home/work/workspace/self/verker-gh/strpbrk.h" 17 7 127#
  "expl:Lemma strpbrk_empty_ct" :
  (forall voidP_ct_50_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_49_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_50_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_49_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strpbrk.h" 17 7 127#
      (forall cs_1_1 : (pointer voidP).
       (forall ct_1_1 : (pointer voidP).
        (((valid_str cs_1_1 voidP_cs_49_alloc_table_at_L
          charP_charM_cs_49_at_L)
         /\
         ((valid_str ct_1_1 voidP_ct_50_alloc_table_at_L
          charP_charM_ct_50_at_L)
         /\
         (Int8.(=) (select charP_charM_ct_50_at_L ct_1_1)
         (#"whole_program.jc" 3377 34 45# "expl:Integer cast" (Int8.of_int
         (0)))))) -> ((=) (strpbrk cs_1_1 ct_1_1) null)))))))))
  
  lemma Strpbrk_range
  #"/home/work/workspace/self/verker-gh/strpbrk.h" 22 7 174#
  "expl:Lemma strpbrk_range" :
  (forall voidP_ct_50_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_49_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_50_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_49_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strpbrk.h" 22 7 174#
      (forall cs_2 : (pointer voidP).
       (forall ct_2_0 : (pointer voidP).
        (((valid_str cs_2 voidP_cs_49_alloc_table_at_L
          charP_charM_cs_49_at_L)
         /\
         (valid_str ct_2_0 voidP_ct_50_alloc_table_at_L
         charP_charM_ct_50_at_L)) ->
         ((((=) (strpbrk cs_2 ct_2_0) null) /\
          (not
          ((same_block cs_2 (strpbrk cs_2 ct_2_0)) /\
          (((<=) (sub_pointer cs_2 (strpbrk cs_2 ct_2_0)) (0)) /\
          ((same_block (strpbrk cs_2 ct_2_0)
           (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_49_at_L))))
          /\
          ((<)
          (sub_pointer (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_49_at_L))))
          (0)))))))
         \/
         ((same_block cs_2 (strpbrk cs_2 ct_2_0)) /\
         (((<=) (sub_pointer cs_2 (strpbrk cs_2 ct_2_0)) (0)) /\
         ((same_block (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_49_at_L))))
         /\
         (((<)
          (sub_pointer (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_49_at_L))))
          (0))
         /\ (not ((=) (strpbrk cs_2 ct_2_0) null)))))))))))))))
  
  lemma Strpbrk_shift1
  #"/home/work/workspace/self/verker-gh/strpbrk.h" 28 7 173#
  "expl:Lemma strpbrk_shift1" :
  (forall voidP_ct_50_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_49_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_50_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_49_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strpbrk.h" 28 7 173#
      (forall cs_3 : (pointer voidP).
       (forall ct_3 : (pointer voidP).
        (((valid_str cs_3 voidP_cs_49_alloc_table_at_L
          charP_charM_cs_49_at_L)
         /\
         ((valid_str ct_3 voidP_ct_50_alloc_table_at_L
          charP_charM_ct_50_at_L)
         /\
         ((Int8.(<>) (select charP_charM_cs_49_at_L cs_3)
          (#"whole_program.jc" 3408 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array ct_3 (select charP_charM_cs_49_at_L cs_3)
         charP_charM_ct_50_at_L))))) ->
         ((=) (strpbrk cs_3 ct_3) (strpbrk (shift cs_3 (1)) ct_3))))))))))
  
  lemma Strpbrk_stop_in_ct
  #"/home/work/workspace/self/verker-gh/strpbrk.h" 34 7 155#
  "expl:Lemma strpbrk_stop_in_ct" :
  (forall voidP_ct_50_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_49_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_50_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_49_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker-gh/strpbrk.h" 34 7 155#
      (forall cs_4 : (pointer voidP).
       (forall ct_4 : (pointer voidP).
        (((valid_str cs_4 voidP_cs_49_alloc_table_at_L
          charP_charM_cs_49_at_L)
         /\
         ((valid_str ct_4 voidP_ct_50_alloc_table_at_L
          charP_charM_ct_50_at_L)
         /\
         ((Int8.(<>) (select charP_charM_cs_49_at_L cs_4)
          (#"whole_program.jc" 3416 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array ct_4 (select charP_charM_cs_49_at_L cs_4)
         charP_charM_ct_50_at_L)))) -> ((=) (strpbrk cs_4 ct_4) cs_4)))))))))
  
end

module Function_strpbrk_0_safety
#"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
"expl:strpbrk, safety"

  use enum.Uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strpbrk_0 #"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, safety" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_52_alloc_table : (alloc_table voidP))
   (voidP_ct_1_53_alloc_table : (alloc_table voidP)) (voidP_ct_1_53_tag_table
   : (tag_table voidP)) (voidP_cs_1_52_tag_table : (tag_table voidP))
   (charP_charM_cs_1_52 : (memory voidP Int8.t)) (charP_charM_ct_1_53 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_1_53_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_53_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_53_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_53_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_53_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_52_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_52_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_52_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_52_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_52_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3423 12 93#
   ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
   /\
   (#"/home/work/workspace/self/verker-gh/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_53_alloc_table charP_charM_ct_1_53)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_12 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 :=
        (let _jessie_561 = cs_1_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 6 14#
        "expl:Pointer index bounds" true) }); _jessie_561 end));
        'Loop_65:
        loop
        invariant { (#"whole_program.jc" 3611 6 15000# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 14 18 41#
            (Int.(-) (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))
            (sub_pointer !sc1 cs_1_0))) }
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 9 20 156#
            (forall p_21 : (pointer voidP).
             (forall t_9 : (pointer voidP).
              (((same_block cs_1_0 p_21) /\
               (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
               ((same_block p_21 !sc1) /\
               (((<) (sub_pointer p_21 !sc1) (0)) /\
               ((same_block ct_1_0 t_9) /\
               (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
               ((same_block t_9
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
               /\
               ((<)
               (sub_pointer t_9
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_52 p_21)
               (select charP_charM_ct_1_53 t_9))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 28#
           (Safe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Safe_int32_of_Safe_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 20#
             "expl:Pointer dereference"
             (acc  voidP_cs_1_52_alloc_table charP_charM_cs_1_52 !sc1 )) ))
            (#"whole_program.jc" 3649 28 40# "expl:Integer cast"
            (Safe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (sc2 :=
              (let _jessie_562 = ct_1_0 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 7 15#
              "expl:Pointer index bounds" true) }); _jessie_562 end));
              'Loop_66:
              loop
              invariant { (#"whole_program.jc" 3654 15 8573# true) }
                variant {
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 21 19 42#
                  (Int.(-)
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))
                  (sub_pointer !sc2 ct_1_0))) }
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53) ->
                   (in_array !sc2 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53)))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 19 21 66#
                  (forall t_6 : (pointer voidP).
                   (((same_block ct_1_0 t_6) /\
                    (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                    ((same_block t_6 !sc2) /\
                    ((<) (sub_pointer t_6 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                    (select charP_charM_ct_1_53 t_6)))))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_53_alloc_table
                  charP_charM_ct_1_53))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 29#
                 (Safe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Safe_int32_of_Safe_int8.cast 
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 21#
                   "expl:Pointer dereference"
                   (acc  voidP_ct_1_53_alloc_table charP_charM_ct_1_53 !sc2 ))
                   ))
                  (#"whole_program.jc" 3687 37 49# "expl:Integer cast"
                  (Safe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 19#
                  (Safe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 11#
                    "expl:Pointer dereference"
                    (acc  voidP_cs_1_52_alloc_table charP_charM_cs_1_52 !sc1
                     )) ))
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 15 19#
                    "expl:Pointer dereference"
                    (acc  voidP_ct_1_53_alloc_table charP_charM_ct_1_53 !sc2
                     )) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker-gh/strpbrk.c" 25 15 154#
                     (exists p_18 : (pointer voidP).
                      (exists t_4 : (pointer voidP).
                       ((same_block cs_1_0 p_18) /\
                       (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
                       ((same_block p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                       /\
                       (((<)
                        (sub_pointer p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_4) /\
                       (((<=) (sub_pointer ct_1_0 t_4) (0)) /\
                       ((same_block t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                       /\
                       (((<)
                        (sub_pointer t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_52 p_18)
                        (select charP_charM_ct_1_53 t_4))
                       /\ (((=) p_18 !sc1) /\ ((=) t_4 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strpbrk.c" 31 15 112#
                      (forall p_19 : (pointer voidP).
                       (forall t_5 : (pointer voidP).
                        (((same_block cs_1_0 p_19) /\
                         (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                         ((same_block p_19 !sc1) /\
                         (((<) (sub_pointer p_19 !sc1) (0)) /\
                         ((same_block ct_1_0 t_5) /\
                         (((<=) (sub_pointer ct_1_0 t_5) (0)) /\
                         ((same_block t_5
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         /\
                         ((<)
                         (sub_pointer t_5
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_52 p_19)
                         (select charP_charM_ct_1_53 t_5)))))) } ; () end;
                    begin
                    (__retres_12 :=
                     (let _jessie_563 = !sc1 in
                     begin
                     (assert {
                     (#"/home/work/workspace/self/verker-gh/strpbrk.c" 36 4 23#
                     "expl:Pointer index bounds" true) }); _jessie_563 end));
                     (raise (Return_label_exc ())) end end else ());
                  (sc2 :=
                   (let _jessie_564 =
                   (shift_typesafe  !sc2
                    (Safe_int32.to_int 
                     (#"whole_program.jc" 3776 55 67# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) ) in
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 31 36#
                   "expl:Pointer index bounds" true) }); _jessie_564 end))
                 end; (raise (Loop_continue_exc ())) end with
                 Loop_continue_exc _jessie_63 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_59 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 38 13 70#
                (forall t_7 : (pointer voidP).
                 (((same_block ct_1_0 t_7) /\
                  (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
                  ((same_block t_7
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                  /\
                  ((<)
                  (sub_pointer t_7
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                  (select charP_charM_ct_1_53 t_7))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 39 13 90#
                (forall p_20 : (pointer voidP).
                 (forall t_8 : (pointer voidP).
                  (((same_block cs_1_0 p_20) /\
                   (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                   ((same_block p_20 !sc1) /\
                   (((<=) (sub_pointer p_20 !sc1) (0)) /\
                   ((same_block ct_1_0 t_8) /\
                   (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                   ((same_block t_8
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                   /\
                   ((<)
                   (sub_pointer t_8
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_52 p_20)
                   (select charP_charM_ct_1_53 t_8)))))) } ; () end end end;
            (sc1 :=
             (let _jessie_565 =
             (shift_typesafe  !sc1
              (Safe_int32.to_int 
               (#"whole_program.jc" 3836 46 58# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 30 35#
             "expl:Pointer index bounds" true) }); _jessie_565 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_65 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_60 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres_12 :=
         (let _jessie_566 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strpbrk.c" 41 1 20#
         "expl:Pointer index bounds" true) }); _jessie_566 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_61 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_567 = !__retres_12 in
       begin
       (assert {
       (#"whole_program.jc" 3842 7 25# "expl:Pointer index bounds" true) });
        _jessie_567 end)); (raise Return) end end))); absurd  end with Return
    -> !return end)
  
end

module Function_strpbrk_0_behaviors
#"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
"expl:strpbrk, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strpbrk_ensures_default
  #"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, default behavior" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_52_alloc_table : (alloc_table voidP))
   (voidP_ct_1_53_alloc_table : (alloc_table voidP)) (voidP_ct_1_53_tag_table
   : (tag_table voidP)) (voidP_cs_1_52_tag_table : (tag_table voidP))
   (charP_charM_cs_1_52 : (memory voidP Int8.t)) (charP_charM_ct_1_53 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_1_53_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_53_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_53_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_53_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_53_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_52_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_52_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_52_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_52_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_52_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3423 12 93#
   ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
   /\
   (#"/home/work/workspace/self/verker-gh/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_53_alloc_table charP_charM_ct_1_53)))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 50 12 38#
     "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))) } diverges 
   ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 3501 10 3453# "expl:Behavior disjointness check"
    (not
    ((exists p_23_0 : (pointer voidP).
      (exists t_11_0 : (pointer voidP).
       ((same_block cs_1_0 p_23_0) /\
       (((<=) (sub_pointer cs_1_0 p_23_0) (0)) /\
       ((same_block p_23_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
       /\
       (((<)
        (sub_pointer p_23_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
        (0))
       /\
       ((same_block ct_1_0 t_11_0) /\
       (((<=) (sub_pointer ct_1_0 t_11_0) (0)) /\
       ((same_block t_11_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       /\
       (((<)
        (sub_pointer t_11_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_52 p_23_0)
       (select charP_charM_ct_1_53 t_11_0))))))))))))
    /\
    (forall p_22_0 : (pointer voidP).
     (forall t_10_0 : (pointer voidP).
      (((same_block cs_1_0 p_22_0) /\
       (((<=) (sub_pointer cs_1_0 p_22_0) (0)) /\
       ((same_block p_22_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
       /\
       (((<)
        (sub_pointer p_22_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
        (0))
       /\
       ((same_block ct_1_0 t_10_0) /\
       (((<=) (sub_pointer ct_1_0 t_10_0) (0)) /\
       ((same_block t_10_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       /\
       ((<)
       (sub_pointer t_10_0
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       (0))))))))) ->
       (Int8.(<>) (select charP_charM_cs_1_52 p_22_0)
       (select charP_charM_ct_1_53 t_10_0)))))))) });
     (check {
     (#"whole_program.jc" 3552 10 3302# "expl:Behavior completeness check"
     ((forall p_22_1 : (pointer voidP).
       (forall t_10_1 : (pointer voidP).
        (((same_block cs_1_0 p_22_1) /\
         (((<=) (sub_pointer cs_1_0 p_22_1) (0)) /\
         ((same_block p_22_1
          (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
         /\
         (((<)
          (sub_pointer p_22_1
          (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
          (0))
         /\
         ((same_block ct_1_0 t_10_1) /\
         (((<=) (sub_pointer ct_1_0 t_10_1) (0)) /\
         ((same_block t_10_1
          (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
         /\
         ((<)
         (sub_pointer t_10_1
         (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
         (0))))))))) ->
         (Int8.(<>) (select charP_charM_cs_1_52 p_22_1)
         (select charP_charM_ct_1_53 t_10_1)))))
     \/
     (exists p_23_1 : (pointer voidP).
      (exists t_11_1 : (pointer voidP).
       ((same_block cs_1_0 p_23_1) /\
       (((<=) (sub_pointer cs_1_0 p_23_1) (0)) /\
       ((same_block p_23_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
       /\
       (((<)
        (sub_pointer p_23_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
        (0))
       /\
       ((same_block ct_1_0 t_11_1) /\
       (((<=) (sub_pointer ct_1_0 t_11_1) (0)) /\
       ((same_block t_11_1
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       /\
       (((<)
        (sub_pointer t_11_1
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_52 p_23_1)
       (select charP_charM_ct_1_53 t_11_1)))))))))))))) });
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_12 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_59:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
              (same_block cs_1_0 !sc1))
             /\
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
              ((<=) (sub_pointer cs_1_0 !sc1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
              (same_block !sc1
              (shift cs_1_0
              (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
             ((<=)
             (sub_pointer !sc1
             (shift cs_1_0
             (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 8 20 34#
             (valid_str !sc1 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
            &&
            ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 9 20 156#
             (forall p_21 : (pointer voidP).
              (forall t_9 : (pointer voidP).
               (((same_block cs_1_0 p_21) /\
                (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
                ((same_block p_21 !sc1) /\
                (((<) (sub_pointer p_21 !sc1) (0)) /\
                ((same_block ct_1_0 t_9) /\
                (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
                ((same_block t_9
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                ((<)
                (sub_pointer t_9
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                ->
                (Int8.(<>) (select charP_charM_cs_1_52 p_21)
                (select charP_charM_ct_1_53 t_9))))))
            &&
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_52 !sc1 ) ))
            (#"whole_program.jc" 3649 28 40# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_60:
              loop
              invariant
                { ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                    (same_block ct_1_0 !sc2))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                    ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                    (same_block !sc2
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                   ((<=)
                   (sub_pointer !sc2
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0))))))))))
                  &&
                  ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 18 21 35#
                   (valid_str !sc2 voidP_ct_1_53_alloc_table
                   charP_charM_ct_1_53))
                  &&
                  ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 19 21 66#
                   (forall t_6 : (pointer voidP).
                    (((same_block ct_1_0 t_6) /\
                     (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                     ((same_block t_6 !sc2) /\
                     ((<) (sub_pointer t_6 !sc2) (0))))) ->
                     (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                     (select charP_charM_ct_1_53 t_6)))))
                  &&
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53) ->
                   (in_array !sc2 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53)))))) } 
               begin
               any unit requires { true } ensures { true } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_53 !sc2 ) ))
                  (#"whole_program.jc" 3687 37 49# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_52 !sc1 ) ))
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_53 !sc2 ) )) ))
                  then
                   begin
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 25 15 154#
                   "expl:Assertion in line 25"
                   (exists p_18 : (pointer voidP).
                    (exists t_4 : (pointer voidP).
                     ((same_block cs_1_0 p_18) /\
                     (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
                     ((same_block p_18
                      (shift cs_1_0
                      (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                     /\
                     (((<)
                      (sub_pointer p_18
                      (shift cs_1_0
                      (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                      (0))
                     /\
                     ((same_block ct_1_0 t_4) /\
                     (((<=) (sub_pointer ct_1_0 t_4) (0)) /\
                     ((same_block t_4
                      (shift ct_1_0
                      (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                     /\
                     (((<)
                      (sub_pointer t_4
                      (shift ct_1_0
                      (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                      (0))
                     /\
                     ((Int8.(=) (select charP_charM_cs_1_52 p_18)
                      (select charP_charM_ct_1_53 t_4))
                     /\ (((=) p_18 !sc1) /\ ((=) t_4 !sc2)))))))))))))) });
                    () end;
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker-gh/strpbrk.c" 31 15 112#
                    "expl:Assertion in line 31"
                    (forall p_19 : (pointer voidP).
                     (forall t_5 : (pointer voidP).
                      (((same_block cs_1_0 p_19) /\
                       (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                       ((same_block p_19 !sc1) /\
                       (((<) (sub_pointer p_19 !sc1) (0)) /\
                       ((same_block ct_1_0 t_5) /\
                       (((<=) (sub_pointer ct_1_0 t_5) (0)) /\
                       ((same_block t_5
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                       /\
                       ((<)
                       (sub_pointer t_5
                       (shift ct_1_0
                       (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                       (0))))))))) ->
                       (Int8.(<>) (select charP_charM_cs_1_52 p_19)
                       (select charP_charM_ct_1_53 t_5)))))) }); () end;
                    begin
                    (__retres_12 := !sc1); (raise (Return_label_exc ())) end
                   end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 3776 55 67# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_63 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_59 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strpbrk.c" 38 13 70#
              "expl:Assertion in line 38"
              (forall t_7 : (pointer voidP).
               (((same_block ct_1_0 t_7) /\
                (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
                ((same_block t_7
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                ((<)
                (sub_pointer t_7
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))
                ->
                (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                (select charP_charM_ct_1_53 t_7))))) }); () end;
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strpbrk.c" 39 13 90#
              "expl:Assertion in line 39"
              (forall p_20 : (pointer voidP).
               (forall t_8 : (pointer voidP).
                (((same_block cs_1_0 p_20) /\
                 (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                 ((same_block p_20 !sc1) /\
                 (((<=) (sub_pointer p_20 !sc1) (0)) /\
                 ((same_block ct_1_0 t_8) /\
                 (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                 ((same_block t_8
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                 /\
                 ((<)
                 (sub_pointer t_8
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_52 p_20)
                 (select charP_charM_ct_1_53 t_8)))))) }); () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 3836 46 58# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_65 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_60 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_12 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_61 ->
      'Return_label:
      'Return_label: begin (return := !__retres_12); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let strpbrk_ensures_found
  #"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, behavior found" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_52_alloc_table : (alloc_table voidP))
   (voidP_ct_1_53_alloc_table : (alloc_table voidP)) (voidP_ct_1_53_tag_table
   : (tag_table voidP)) (voidP_cs_1_52_tag_table : (tag_table voidP))
   (charP_charM_cs_1_52 : (memory voidP Int8.t)) (charP_charM_ct_1_53 :
   (memory voidP Int8.t)) 
   requires {
   ((exists p_23 : (pointer voidP).
     (exists t_11 : (pointer voidP).
      ((same_block cs_1_0 p_23) /\
      (((<=) (sub_pointer cs_1_0 p_23) (0)) /\
      ((same_block p_23
       (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
      /\
      (((<)
       (sub_pointer p_23
       (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
       (0))
      /\
      ((same_block ct_1_0 t_11) /\
      (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
      ((same_block t_11
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
      /\
      (((<)
       (sub_pointer t_11
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       (0))
      /\
      (Int8.(=) (select charP_charM_cs_1_52 p_23)
      (select charP_charM_ct_1_53 t_11))))))))))))
   /\
   (((allocated voidP_ct_1_53_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_53_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_53_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_53_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_53_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_52_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_52_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_52_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_52_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_52_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3423 12 93#
   ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
   /\
   (#"/home/work/workspace/self/verker-gh/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_53_alloc_table charP_charM_ct_1_53))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
      "expl:Ensures clause" (same_block cs_1_0 result))
     /\
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
      "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
      "expl:Ensures clause"
      (same_block result
      (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
      "expl:Ensures clause"
      ((<)
      (sub_pointer result
      (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
      (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 57 15 76#
      "expl:Ensures clause"
      (exists t_12 : (pointer voidP).
       ((same_block ct_1_0 t_12) /\
       (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
       ((same_block t_12
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       /\
       (((<=)
        (sub_pointer t_12
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_52 result)
       (select charP_charM_ct_1_53 t_12))))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 58 15 140#
     "expl:Ensures clause"
     (forall p_24 : (pointer voidP).
      (forall t_13 : (pointer voidP).
       (((same_block cs_1_0 p_24) /\
        (((<=) (sub_pointer cs_1_0 p_24) (0)) /\
        ((same_block p_24 result) /\
        (((<) (sub_pointer p_24 result) (0)) /\
        ((same_block ct_1_0 t_13) /\
        (((<=) (sub_pointer ct_1_0 t_13) (0)) /\
        ((same_block t_13
         (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
        /\
        ((<)
        (sub_pointer t_13
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
        (0))))))))) ->
        (Int8.(<>) (select charP_charM_cs_1_52 p_24)
        (select charP_charM_ct_1_53 t_13)))))))))))))))))) } diverges  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_12 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_61:
        loop
        invariant { (#"whole_program.jc" 3611 6 15000# true) } 
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 9 20 156#
            (forall p_21 : (pointer voidP).
             (forall t_9 : (pointer voidP).
              (((same_block cs_1_0 p_21) /\
               (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
               ((same_block p_21 !sc1) /\
               (((<) (sub_pointer p_21 !sc1) (0)) /\
               ((same_block ct_1_0 t_9) /\
               (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
               ((same_block t_9
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
               /\
               ((<)
               (sub_pointer t_9
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_52 p_21)
               (select charP_charM_ct_1_53 t_9))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_52 !sc1 ) ))
            (#"whole_program.jc" 3649 28 40# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_62:
              loop
              invariant { (#"whole_program.jc" 3654 15 8573# true) } 
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53) ->
                   (in_array !sc2 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53)))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 19 21 66#
                  (forall t_6 : (pointer voidP).
                   (((same_block ct_1_0 t_6) /\
                    (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                    ((same_block t_6 !sc2) /\
                    ((<) (sub_pointer t_6 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                    (select charP_charM_ct_1_53 t_6)))))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_53_alloc_table
                  charP_charM_ct_1_53))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_53 !sc2 ) ))
                  (#"whole_program.jc" 3687 37 49# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_52 !sc1 ) ))
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_53 !sc2 ) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker-gh/strpbrk.c" 25 15 154#
                     (exists p_18 : (pointer voidP).
                      (exists t_4 : (pointer voidP).
                       ((same_block cs_1_0 p_18) /\
                       (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
                       ((same_block p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                       /\
                       (((<)
                        (sub_pointer p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_4) /\
                       (((<=) (sub_pointer ct_1_0 t_4) (0)) /\
                       ((same_block t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                       /\
                       (((<)
                        (sub_pointer t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_52 p_18)
                        (select charP_charM_ct_1_53 t_4))
                       /\ (((=) p_18 !sc1) /\ ((=) t_4 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strpbrk.c" 31 15 112#
                      (forall p_19 : (pointer voidP).
                       (forall t_5 : (pointer voidP).
                        (((same_block cs_1_0 p_19) /\
                         (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                         ((same_block p_19 !sc1) /\
                         (((<) (sub_pointer p_19 !sc1) (0)) /\
                         ((same_block ct_1_0 t_5) /\
                         (((<=) (sub_pointer ct_1_0 t_5) (0)) /\
                         ((same_block t_5
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         /\
                         ((<)
                         (sub_pointer t_5
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_52 p_19)
                         (select charP_charM_ct_1_53 t_5)))))) } ; () end;
                    begin
                    (__retres_12 := !sc1); (raise (Return_label_exc ())) end
                   end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 3776 55 67# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_63 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_59 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 38 13 70#
                (forall t_7 : (pointer voidP).
                 (((same_block ct_1_0 t_7) /\
                  (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
                  ((same_block t_7
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                  /\
                  ((<)
                  (sub_pointer t_7
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                  (select charP_charM_ct_1_53 t_7))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 39 13 90#
                (forall p_20 : (pointer voidP).
                 (forall t_8 : (pointer voidP).
                  (((same_block cs_1_0 p_20) /\
                   (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                   ((same_block p_20 !sc1) /\
                   (((<=) (sub_pointer p_20 !sc1) (0)) /\
                   ((same_block ct_1_0 t_8) /\
                   (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                   ((same_block t_8
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                   /\
                   ((<)
                   (sub_pointer t_8
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_52 p_20)
                   (select charP_charM_ct_1_53 t_8)))))) } ; () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 3836 46 58# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_65 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_60 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_12 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_61 ->
      'Return_label:
      'Return_label: begin (return := !__retres_12); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let strpbrk_ensures_not_found
  #"/home/work/workspace/self/verker-gh/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, behavior not_found" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_52_alloc_table : (alloc_table voidP))
   (voidP_ct_1_53_alloc_table : (alloc_table voidP)) (voidP_ct_1_53_tag_table
   : (tag_table voidP)) (voidP_cs_1_52_tag_table : (tag_table voidP))
   (charP_charM_cs_1_52 : (memory voidP Int8.t)) (charP_charM_ct_1_53 :
   (memory voidP Int8.t)) 
   requires {
   ((forall p_22 : (pointer voidP).
     (forall t_10 : (pointer voidP).
      (((same_block cs_1_0 p_22) /\
       (((<=) (sub_pointer cs_1_0 p_22) (0)) /\
       ((same_block p_22
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
       /\
       (((<)
        (sub_pointer p_22
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
        (0))
       /\
       ((same_block ct_1_0 t_10) /\
       (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
       ((same_block t_10
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       /\
       ((<)
       (sub_pointer t_10
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
       (0))))))))) ->
       (Int8.(<>) (select charP_charM_cs_1_52 p_22)
       (select charP_charM_ct_1_53 t_10)))))
   /\
   (((allocated voidP_ct_1_53_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_53_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_53_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_53_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_53_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_52_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_52_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_52_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_52_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_52_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3423 12 93#
   ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
   /\
   (#"/home/work/workspace/self/verker-gh/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_53_alloc_table charP_charM_ct_1_53))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strpbrk.h" 67 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_12 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_63:
        loop
        invariant { (#"whole_program.jc" 3611 6 15000# true) } 
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 9 20 156#
            (forall p_21 : (pointer voidP).
             (forall t_9 : (pointer voidP).
              (((same_block cs_1_0 p_21) /\
               (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
               ((same_block p_21 !sc1) /\
               (((<) (sub_pointer p_21 !sc1) (0)) /\
               ((same_block ct_1_0 t_9) /\
               (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
               ((same_block t_9
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
               /\
               ((<)
               (sub_pointer t_9
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_52 p_21)
               (select charP_charM_ct_1_53 t_9))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_52 !sc1 ) ))
            (#"whole_program.jc" 3649 28 40# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_64:
              loop
              invariant { (#"whole_program.jc" 3654 15 8573# true) } 
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53) ->
                   (in_array !sc2 (select charP_charM_cs_1_52 !sc1)
                   charP_charM_ct_1_53)))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 19 21 66#
                  (forall t_6 : (pointer voidP).
                   (((same_block ct_1_0 t_6) /\
                    (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                    ((same_block t_6 !sc2) /\
                    ((<) (sub_pointer t_6 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                    (select charP_charM_ct_1_53 t_6)))))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_53_alloc_table
                  charP_charM_ct_1_53))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_53 !sc2 ) ))
                  (#"whole_program.jc" 3687 37 49# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_52 !sc1 ) ))
                   (#"/home/work/workspace/self/verker-gh/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_53 !sc2 ) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker-gh/strpbrk.c" 25 15 154#
                     (exists p_18 : (pointer voidP).
                      (exists t_4 : (pointer voidP).
                       ((same_block cs_1_0 p_18) /\
                       (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
                       ((same_block p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                       /\
                       (((<)
                        (sub_pointer p_18
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_4) /\
                       (((<=) (sub_pointer ct_1_0 t_4) (0)) /\
                       ((same_block t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                       /\
                       (((<)
                        (sub_pointer t_4
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_52 p_18)
                        (select charP_charM_ct_1_53 t_4))
                       /\ (((=) p_18 !sc1) /\ ((=) t_4 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker-gh/strpbrk.c" 31 15 112#
                      (forall p_19 : (pointer voidP).
                       (forall t_5 : (pointer voidP).
                        (((same_block cs_1_0 p_19) /\
                         (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                         ((same_block p_19 !sc1) /\
                         (((<) (sub_pointer p_19 !sc1) (0)) /\
                         ((same_block ct_1_0 t_5) /\
                         (((<=) (sub_pointer ct_1_0 t_5) (0)) /\
                         ((same_block t_5
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         /\
                         ((<)
                         (sub_pointer t_5
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_52 p_19)
                         (select charP_charM_ct_1_53 t_5)))))) } ; () end;
                    begin
                    (__retres_12 := !sc1); (raise (Return_label_exc ())) end
                   end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 3776 55 67# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_63 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_59 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 38 13 70#
                (forall t_7 : (pointer voidP).
                 (((same_block ct_1_0 t_7) /\
                  (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
                  ((same_block t_7
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                  /\
                  ((<)
                  (sub_pointer t_7
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_52 !sc1)
                  (select charP_charM_ct_1_53 t_7))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strpbrk.c" 39 13 90#
                (forall p_20 : (pointer voidP).
                 (forall t_8 : (pointer voidP).
                  (((same_block cs_1_0 p_20) /\
                   (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                   ((same_block p_20 !sc1) /\
                   (((<=) (sub_pointer p_20 !sc1) (0)) /\
                   ((same_block ct_1_0 t_8) /\
                   (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                   ((same_block t_8
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                   /\
                   ((<)
                   (sub_pointer t_8
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_52 p_20)
                   (select charP_charM_ct_1_53 t_8)))))) } ; () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 3836 46 58# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_65 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end with Goto_while_0_break_exc _jessie_60 ->
       'While_0_break:
       'While_0_break: begin (); (__retres_12 := (null  )) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_61 ->
      'Return_label:
      'Return_label: begin (return := !__retres_12); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
end

module Function_strrchr_safety
#"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
"expl:strrchr, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int8 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strrchr #"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
  "expl:Function strrchr, safety" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_55_alloc_table :
   (alloc_table voidP)) (voidP_s_9_55_tag_table : (tag_table voidP))
   (charP_charM_s_9_55 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_9_55_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_55_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_55_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_55_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_55_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strrchr.c" 20 13 25#
   (valid_str s_9 voidP_s_9_55_alloc_table charP_charM_s_9_55))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last :=
       (let _jessie_593 = (null  ) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strrchr.c" 36 1 6#
       "expl:Pointer index bounds" true) }); _jessie_593 end));
       begin
       (os_2 :=
        (let _jessie_589 = !mutable_s_9 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strrchr.c" 37 11 15#
        "expl:Pointer index bounds" true) }); _jessie_589 end));
        'Loop_70:
        loop
        invariant { (#"whole_program.jc" 3958 6 3692# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 44 18 39#
            (Int.(-) (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))
            (sub_pointer !mutable_s_9 !os_2))) }
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 43 20 89#
            (((<>) !last null) ->
             (forall p_27 : (pointer voidP).
              (((same_block !last p_27) /\
               (((<) (sub_pointer !last p_27) (0)) /\
               ((same_block p_27 !mutable_s_9) /\
               ((<) (sub_pointer p_27 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_55 p_27)
               (#"whole_program.jc" 4007 49 64# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 42 20 91#
            (((=) !last null) <->
            (forall p_26 : (pointer voidP).
             (((same_block !os_2 p_26) /\
              (((<=) (sub_pointer !os_2 p_26) (0)) /\
              ((same_block p_26 !mutable_s_9) /\
              ((<) (sub_pointer p_26 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_55 p_26)
              (#"whole_program.jc" 3999 49 64# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 41 20 91#
            (((<>) !last null) <->
            (exists p_25 : (pointer voidP).
             ((same_block !os_2 p_25) /\
             (((<=) (sub_pointer !os_2 p_25) (0)) /\
             ((same_block p_25 !mutable_s_9) /\
             (((<) (sub_pointer p_25 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 p_25)
             (#"whole_program.jc" 3991 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 40 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3977 51 66# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3982 48 63# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 25#
           (Safe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 8#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 8#
             "expl:Pointer dereference"
             (acc  voidP_s_9_55_alloc_table charP_charM_s_9_55 !mutable_s_9 ))
             ))
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_17 )) )) ))
           then
            (last :=
             (let _jessie_590 = !mutable_s_9 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 48 3 11#
             "expl:Pointer index bounds" true) }); _jessie_590 end)) 
           else ());
            begin
            (tmp_0_10 :=
             (let _jessie_591 = !mutable_s_9 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 11 14#
             "expl:Pointer index bounds" true) }); _jessie_591 end));
             begin
             (mutable_s_9 :=
              (let _jessie_592 =
              (shift_typesafe  !mutable_s_9
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 4018 49 61# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 11 14#
              "expl:Pointer index bounds" true) }); _jessie_592 end)); () end
            end;
            (if
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 10 14#
            (Safe_bit_int8.(<>) 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 10 14#
             "expl:Pointer dereference"
             (acc  voidP_s_9_55_alloc_table charP_charM_s_9_55 !tmp_0_10 ))
             (#"whole_program.jc" 4022 28 39# "expl:Integer cast"
             (Safe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_68 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_66 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 50 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_55 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4030 52 63# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 51 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 52 12 96#
         ((exists p_28 : (pointer voidP).
           ((same_block !os_2 p_28) /\
           (((<=) (sub_pointer !os_2 p_28) (0)) /\
           ((same_block p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           /\
           (((<)
            (sub_pointer p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_55 p_28)
           (#"whole_program.jc" 4059 57 72# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_13 :=
        (let _jessie_594 = !last in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strrchr.c" 53 1 21#
        "expl:Pointer index bounds" true) }); _jessie_594 end));
        begin
        (return :=
         (let _jessie_595 = !__retres_13 in
         begin
         (assert {
         (#"whole_program.jc" 4065 7 25# "expl:Pointer index bounds" true) });
          _jessie_595 end)); (raise Return) end end end end)))); absurd  end
    with Return -> !return end))
  
end

module Function_strrchr_behaviors
#"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
"expl:strrchr, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strrchr_ensures_default
  #"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
  "expl:Function strrchr, default behavior" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_55_alloc_table :
   (alloc_table voidP)) (voidP_s_9_55_tag_table : (tag_table voidP))
   (charP_charM_s_9_55 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_9_55_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_55_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_55_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_55_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_55_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strrchr.c" 20 13 25#
   (valid_str s_9 voidP_s_9_55_alloc_table charP_charM_s_9_55))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 3894 10 1721# "expl:Behavior disjointness check"
    (not
    ((exists p_30_0 : (pointer voidP).
      ((same_block !mutable_s_9 p_30_0) /\
      (((<=) (sub_pointer !mutable_s_9 p_30_0) (0)) /\
      ((same_block p_30_0
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55))))
      /\
      (((<=)
       (sub_pointer p_30_0
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_9_55 p_30_0)
      (#"whole_program.jc" 3906 55 70# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))
    /\
    (forall p_29_0 : (pointer voidP).
     (((same_block !mutable_s_9 p_29_0) /\
      (((<=) (sub_pointer !mutable_s_9 p_29_0) (0)) /\
      ((same_block p_29_0
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55))))
      /\
      ((<=)
      (sub_pointer p_29_0
      (shift !mutable_s_9
      (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_9_55 p_29_0)
      (#"whole_program.jc" 3919 56 71# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) });
     (check {
     (#"whole_program.jc" 3921 10 1602# "expl:Behavior completeness check"
     ((forall p_29_1 : (pointer voidP).
       (((same_block !mutable_s_9 p_29_1) /\
        (((<=) (sub_pointer !mutable_s_9 p_29_1) (0)) /\
        ((same_block p_29_1
         (shift !mutable_s_9
         (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55))))
        /\
        ((<=)
        (sub_pointer p_29_1
        (shift !mutable_s_9
        (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55)))) (0))))) ->
        (Bit_int8.(<>) (select charP_charM_s_9_55 p_29_1)
        (#"whole_program.jc" 3932 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_17)))))
     \/
     (exists p_30_1 : (pointer voidP).
      ((same_block !mutable_s_9 p_30_1) /\
      (((<=) (sub_pointer !mutable_s_9 p_30_1) (0)) /\
      ((same_block p_30_1
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55))))
      /\
      (((<=)
       (sub_pointer p_30_1
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_55)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_9_55 p_30_1)
      (#"whole_program.jc" 3945 53 68# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))) });
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_67:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
             ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
              (same_block !os_2 !mutable_s_9))
             /\
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
             ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
              ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
             ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
              (same_block !mutable_s_9
              (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
             ((<=)
             (sub_pointer !mutable_s_9
             (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strrchr.c" 40 20 79#
             ((((=) !last null) /\
              (not
              ((same_block !os_2 !last) /\
              (((<=) (sub_pointer !os_2 !last) (0)) /\
              ((same_block !last !mutable_s_9) /\
              (((<) (sub_pointer !last !mutable_s_9) (0)) /\
              (Bit_int8.(=) (select charP_charM_s_9_55 !last)
              (#"whole_program.jc" 3977 51 66# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
             \/
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             ((Bit_int8.(=) (select charP_charM_s_9_55 !last)
              (#"whole_program.jc" 3982 48 63# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))
             /\ (not ((=) !last null)))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strrchr.c" 41 20 91#
             (((<>) !last null) <->
             (exists p_25 : (pointer voidP).
              ((same_block !os_2 p_25) /\
              (((<=) (sub_pointer !os_2 p_25) (0)) /\
              ((same_block p_25 !mutable_s_9) /\
              (((<) (sub_pointer p_25 !mutable_s_9) (0)) /\
              (Bit_int8.(=) (select charP_charM_s_9_55 p_25)
              (#"whole_program.jc" 3991 49 64# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strrchr.c" 42 20 91#
             (((=) !last null) <->
             (forall p_26 : (pointer voidP).
              (((same_block !os_2 p_26) /\
               (((<=) (sub_pointer !os_2 p_26) (0)) /\
               ((same_block p_26 !mutable_s_9) /\
               ((<) (sub_pointer p_26 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_55 p_26)
               (#"whole_program.jc" 3999 49 64# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
            &&
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 43 20 89#
            (((<>) !last null) ->
             (forall p_27 : (pointer voidP).
              (((same_block !last p_27) /\
               (((<) (sub_pointer !last p_27) (0)) /\
               ((same_block p_27 !mutable_s_9) /\
               ((<) (sub_pointer p_27 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_55 p_27)
               (#"whole_program.jc" 4007 49 64# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_55 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_10 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4018 49 61# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_55 !tmp_0_10 )
             (#"whole_program.jc" 4022 28 39# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_68 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_66 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strrchr.c" 50 12 25#
       "expl:Assertion in line 50"
       (Bit_int8.(=)
       (select charP_charM_s_9_55 (shift !mutable_s_9 (Int.(-_) (1))))
       (#"whole_program.jc" 4030 52 63# "expl:Integer cast"
       (Bit_int8.of_int_const 0)))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strrchr.c" 51 12 36#
       "expl:Assertion in line 51"
       ((=) !mutable_s_9
       (shift (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55)))
       (1)))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strrchr.c" 52 12 96#
       "expl:Assertion in line 52"
       ((exists p_28 : (pointer voidP).
         ((same_block !os_2 p_28) /\
         (((<=) (sub_pointer !os_2 p_28) (0)) /\
         ((same_block p_28
          (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
         /\
         (((<)
          (sub_pointer p_28
          (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
          (0))
         /\
         (Bit_int8.(=) (select charP_charM_s_9_55 p_28)
         (#"whole_program.jc" 4059 57 72# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
        ((<>) !last null))) }); () end;
       begin
       (__retres_13 := !last);
        begin (return := !__retres_13); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let strrchr_ensures_found
  #"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
  "expl:Function strrchr, behavior found" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_55_alloc_table :
   (alloc_table voidP)) (voidP_s_9_55_tag_table : (tag_table voidP))
   (charP_charM_s_9_55 : (memory voidP Int8.t)) 
   requires {
   ((exists p_30 : (pointer voidP).
     ((same_block s_9 p_30) /\
     (((<=) (sub_pointer s_9 p_30) (0)) /\
     ((same_block p_30
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
     /\
     (((<=)
      (sub_pointer p_30
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_9_55 p_30)
     (#"whole_program.jc" 3858 29 44# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))
   /\
   (((allocated voidP_s_9_55_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_55_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_55_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_55_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_55_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strrchr.c" 20 13 25#
   (valid_str s_9 voidP_s_9_55_alloc_table charP_charM_s_9_55)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
      "expl:Ensures clause" (same_block s_9 result))
     /\
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
      "expl:Ensures clause"
      (same_block result
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))
     /\
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strrchr.c" 25 15 36#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_9_55 result)
      (#"whole_program.jc" 3869 51 75# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17))))
     /\
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 26 15 95#
     "expl:Ensures clause"
     (forall p_31 : (pointer voidP).
      (((same_block result p_31) /\
       (((<) (sub_pointer result p_31) (0)) /\
       ((same_block p_31
        (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
       /\
       ((<=)
       (sub_pointer p_31
       (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_9_55 p_31)
       (#"whole_program.jc" 3883 40 64# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))) } diverges 
   ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_68:
        loop
        invariant { (#"whole_program.jc" 3958 6 3692# true) } 
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 43 20 89#
            (((<>) !last null) ->
             (forall p_27 : (pointer voidP).
              (((same_block !last p_27) /\
               (((<) (sub_pointer !last p_27) (0)) /\
               ((same_block p_27 !mutable_s_9) /\
               ((<) (sub_pointer p_27 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_55 p_27)
               (#"whole_program.jc" 4007 49 64# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 42 20 91#
            (((=) !last null) <->
            (forall p_26 : (pointer voidP).
             (((same_block !os_2 p_26) /\
              (((<=) (sub_pointer !os_2 p_26) (0)) /\
              ((same_block p_26 !mutable_s_9) /\
              ((<) (sub_pointer p_26 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_55 p_26)
              (#"whole_program.jc" 3999 49 64# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 41 20 91#
            (((<>) !last null) <->
            (exists p_25 : (pointer voidP).
             ((same_block !os_2 p_25) /\
             (((<=) (sub_pointer !os_2 p_25) (0)) /\
             ((same_block p_25 !mutable_s_9) /\
             (((<) (sub_pointer p_25 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 p_25)
             (#"whole_program.jc" 3991 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 40 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3977 51 66# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3982 48 63# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_55 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_10 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4018 49 61# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_55 !tmp_0_10 )
             (#"whole_program.jc" 4022 28 39# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_68 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_66 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 50 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_55 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4030 52 63# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 51 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 52 12 96#
         ((exists p_28 : (pointer voidP).
           ((same_block !os_2 p_28) /\
           (((<=) (sub_pointer !os_2 p_28) (0)) /\
           ((same_block p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           /\
           (((<)
            (sub_pointer p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_55 p_28)
           (#"whole_program.jc" 4059 57 72# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_13 := !last);
        begin (return := !__retres_13); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let strrchr_ensures_not_found
  #"/home/work/workspace/self/verker-gh/strrchr.c" 34 5 35#
  "expl:Function strrchr, behavior not_found" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_55_alloc_table :
   (alloc_table voidP)) (voidP_s_9_55_tag_table : (tag_table voidP))
   (charP_charM_s_9_55 : (memory voidP Int8.t)) 
   requires {
   ((forall p_29 : (pointer voidP).
     (((same_block s_9 p_29) /\
      (((<=) (sub_pointer s_9 p_29) (0)) /\
      ((same_block p_29
       (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
      /\
      ((<=)
      (sub_pointer p_29
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_9_55 p_29)
      (#"whole_program.jc" 3891 29 44# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))
   /\
   (((allocated voidP_s_9_55_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_55_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_55_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_55_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_55_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker-gh/strrchr.c" 20 13 25#
   (valid_str s_9 voidP_s_9_55_alloc_table charP_charM_s_9_55)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strrchr.c" 30 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_69:
        loop
        invariant { (#"whole_program.jc" 3958 6 3692# true) } 
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 43 20 89#
            (((<>) !last null) ->
             (forall p_27 : (pointer voidP).
              (((same_block !last p_27) /\
               (((<) (sub_pointer !last p_27) (0)) /\
               ((same_block p_27 !mutable_s_9) /\
               ((<) (sub_pointer p_27 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_55 p_27)
               (#"whole_program.jc" 4007 49 64# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 42 20 91#
            (((=) !last null) <->
            (forall p_26 : (pointer voidP).
             (((same_block !os_2 p_26) /\
              (((<=) (sub_pointer !os_2 p_26) (0)) /\
              ((same_block p_26 !mutable_s_9) /\
              ((<) (sub_pointer p_26 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_55 p_26)
              (#"whole_program.jc" 3999 49 64# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 41 20 91#
            (((<>) !last null) <->
            (exists p_25 : (pointer voidP).
             ((same_block !os_2 p_25) /\
             (((<=) (sub_pointer !os_2 p_25) (0)) /\
             ((same_block p_25 !mutable_s_9) /\
             (((<) (sub_pointer p_25 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 p_25)
             (#"whole_program.jc" 3991 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 40 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3977 51 66# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_55 !last)
             (#"whole_program.jc" 3982 48 63# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 20 46#
           ((#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 39 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_55 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strrchr.c" 47 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_10 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4018 49 61# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker-gh/strrchr.c" 49 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_55 !tmp_0_10 )
             (#"whole_program.jc" 4022 28 39# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_68 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_66 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 50 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_55 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4030 52 63# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 51 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 52 12 96#
         ((exists p_28 : (pointer voidP).
           ((same_block !os_2 p_28) /\
           (((<=) (sub_pointer !os_2 p_28) (0)) /\
           ((same_block p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
           /\
           (((<)
            (sub_pointer p_28
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_55))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_55 p_28)
           (#"whole_program.jc" 4059 57 72# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_13 := !last);
        begin (return := !__retres_13); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
end

theory Root_char_xP

  use why3.Bool.Bool 
  
  type char_xP 
  
end

module Function_strpbrk_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strpbrk_0
  (cs_1_0 : (pointer voidP)) 
   (ct_1_0 : (pointer voidP)) 
    (voidP_ct_1_53_alloc_table : (alloc_table voidP)) 
     (voidP_cs_1_52_alloc_table : (alloc_table voidP)) 
      (voidP_ct_1_53_tag_table : (tag_table voidP)) 
       (voidP_cs_1_52_tag_table : (tag_table voidP)) 
        (charP_charM_ct_1_53 : (memory voidP Int8.t)) 
         (charP_charM_cs_1_52 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 3423 12 93# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 47 13 26#
             "expl:Requires clause"
             (valid_str cs_1_0 voidP_cs_1_52_alloc_table charP_charM_cs_1_52))
            /\
            (#"/home/work/workspace/self/verker-gh/strpbrk.h" 48 13 26#
            "expl:Requires clause"
            (valid_str ct_1_0 voidP_ct_1_53_alloc_table charP_charM_ct_1_53)))))
            }
          ensures {
            (((allocated voidP_cs_1_52_alloc_table result) ->
              (((=) (typeof voidP_cs_1_52_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_cs_1_52_alloc_table result) i) /\
                ((<) i (offset_max voidP_cs_1_52_alloc_table result))) ->
                ((=) (typeof voidP_cs_1_52_tag_table (shift result i))
                charP_tag)))))
            /\
            (((forall p_22 : (pointer voidP).
               (forall t_10 : (pointer voidP).
                (((same_block cs_1_0 p_22) /\
                 (((<=) (sub_pointer cs_1_0 p_22) (0)) /\
                 ((same_block p_22
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                 /\
                 (((<)
                  (sub_pointer p_22
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0))
                 /\
                 ((same_block ct_1_0 t_10) /\
                 (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                 ((same_block t_10
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                 /\
                 ((<)
                 (sub_pointer t_10
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_52 p_22)
                 (select charP_charM_ct_1_53 t_10))))) ->
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 67 15 31#
              "expl:Ensures clause" ((=) result null)))
            /\
            (((exists p_23 : (pointer voidP).
               (exists t_11 : (pointer voidP).
                ((same_block cs_1_0 p_23) /\
                (((<=) (sub_pointer cs_1_0 p_23) (0)) /\
                ((same_block p_23
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                /\
                (((<)
                 (sub_pointer p_23
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0))
                /\
                ((same_block ct_1_0 t_11) /\
                (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                ((same_block t_11
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                (((<)
                 (sub_pointer t_11
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_52 p_23)
                (select charP_charM_ct_1_53 t_11)))))))))))) ->
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
               "expl:Ensures clause" (same_block cs_1_0 result))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
               "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               (same_block result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               ((<)
               (sub_pointer result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 57 15 76#
               "expl:Ensures clause"
               (exists t_12 : (pointer voidP).
                ((same_block ct_1_0 t_12) /\
                (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                ((same_block t_12
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                (((<=)
                 (sub_pointer t_12
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_52 result)
                (select charP_charM_ct_1_53 t_12))))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 58 15 140#
              "expl:Ensures clause"
              (forall p_24 : (pointer voidP).
               (forall t_13 : (pointer voidP).
                (((same_block cs_1_0 p_24) /\
                 (((<=) (sub_pointer cs_1_0 p_24) (0)) /\
                 ((same_block p_24 result) /\
                 (((<) (sub_pointer p_24 result) (0)) /\
                 ((same_block ct_1_0 t_13) /\
                 (((<=) (sub_pointer ct_1_0 t_13) (0)) /\
                 ((same_block t_13
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                 /\
                 ((<)
                 (sub_pointer t_13
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_52 p_24)
                 (select charP_charM_ct_1_53 t_13))))))))))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strpbrk.h" 50 12 38#
            "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))))) }
  
end

module Function_strsep_safety
#"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38# "expl:strsep, safety"

  use Safe_int8_of_Safe_int32 
  
  use Safe_int32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_eq_pointer_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strpbrk_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strsep #"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
  "expl:Function strsep, safety" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_59
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_57 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_57_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_58_alloc_table : (alloc_table voidP))
   (voidP_result_59_alloc_table : (alloc_table voidP))
   (voidP_result_59_tag_table : (tag_table voidP)) (voidP_ct_2_58_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_58 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_2_58_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_58_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_58_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_58_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_58_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 4070 12 491# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_57 s_10)
   voidP_result_59_alloc_table !charP_charM_result_59)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin :=
       (let _jessie_688 =
       (#"/home/work/workspace/self/verker-gh/strsep.c" 5 16 18#
       "expl:Pointer dereference"
       (acc  char_xP_s_10_57_alloc_table !char_xP_char_xM_s_10_57 s_10 )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strsep.c" 5 1 5#
       "expl:Pointer index bounds" true) }); _jessie_688 end));
       (if
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       (eq_pointer  voidP_result_59_alloc_table voidP_result_59_alloc_table
        !sbegin (null  ) )))
       then
        begin
        (__retres_14 :=
         (let _jessie_689 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker-gh/strsep.c" 9 2 21#
         "expl:Pointer index bounds" true) }); _jessie_689 end));
         (raise (Return_label_exc ())) end else ());
       begin
       (end_0 :=
        (let _jessie_678 =
        (let _jessie_680 = !sbegin in
        (let _jessie_679 = ct_2 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0_safe.strpbrk_0  _jessie_680 _jessie_679
         voidP_ct_2_58_alloc_table voidP_result_59_alloc_table
         voidP_ct_2_58_tag_table voidP_result_59_tag_table
         charP_charM_ct_2_58 !charP_charM_result_59 )))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Pointer index bounds" true) }); _jessie_678 end));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        (neq_pointer  voidP_result_59_alloc_table voidP_result_59_alloc_table
         !end_0 (null  ) )))
        then
         begin
         (tmp_0_11 :=
          (let _jessie_681 = !end_0 in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 14 3 8#
          "expl:Pointer index bounds" true) }); _jessie_681 end));
          begin
          (end_0 :=
           (let _jessie_682 =
           (shift_typesafe  !end_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 4148 50 62# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 3 8#
           "expl:Pointer index bounds" true) }); _jessie_682 end));
           (let _jessie_684 =
           (let _jessie_683 =
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 14 15#
           "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"whole_program.jc" 4149 62 74# "expl:Integer cast"
            (Safe_int32.of_int (0))) )) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 2 15#
           "expl:Pointer index bounds" true) }); _jessie_683 end) in
           (let _jessie_685 = !tmp_0_11 in
           (let _jessie_686 = (0) in
           (let _jessie_687 = _jessie_685 in
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 2 15#
           "expl:Pointer dereference"
           (upd  voidP_result_59_alloc_table charP_charM_result_59
            _jessie_685 _jessie_684 )))))) end end else ());
        begin
        (let _jessie_674 =
        (let _jessie_673 = !end_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strsep.c" 16 1 9#
        "expl:Pointer index bounds" true) }); _jessie_673 end) in
        (let _jessie_675 = s_10 in
        (let _jessie_676 = (0) in
        (let _jessie_677 = _jessie_675 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 16 1 9#
        "expl:Pointer dereference"
        (upd  char_xP_s_10_57_alloc_table char_xP_char_xM_s_10_57 _jessie_675
         _jessie_674 ))))));
         begin
         (__retres_14 :=
          (let _jessie_672 = !sbegin in
          begin
          (assert {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 17 1 15#
          "expl:Pointer index bounds" true) }); _jessie_672 end));
          (raise (Return_label_exc ())) end end end end with Return_label_exc
      _jessie_69 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_690 = !__retres_14 in
       begin
       (assert {
       (#"whole_program.jc" 4155 7 25# "expl:Pointer index bounds" true) });
        _jessie_690 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Function_strpbrk_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strpbrk_0
  (cs_1_0 : (pointer voidP)) 
   (ct_1_0 : (pointer voidP)) 
    (voidP_ct_1_53_alloc_table : (alloc_table voidP)) 
     (voidP_cs_1_52_alloc_table : (alloc_table voidP)) 
      (voidP_ct_1_53_tag_table : (tag_table voidP)) 
       (voidP_cs_1_52_tag_table : (tag_table voidP)) 
        (charP_charM_ct_1_53 : (memory voidP Int8.t)) 
         (charP_charM_cs_1_52 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true }
          ensures {
            (((allocated voidP_cs_1_52_alloc_table result) ->
              (((=) (typeof voidP_cs_1_52_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_cs_1_52_alloc_table result) i) /\
                ((<) i (offset_max voidP_cs_1_52_alloc_table result))) ->
                ((=) (typeof voidP_cs_1_52_tag_table (shift result i))
                charP_tag)))))
            /\
            (((forall p_22 : (pointer voidP).
               (forall t_10 : (pointer voidP).
                (((same_block cs_1_0 p_22) /\
                 (((<=) (sub_pointer cs_1_0 p_22) (0)) /\
                 ((same_block p_22
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                 /\
                 (((<)
                  (sub_pointer p_22
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0))
                 /\
                 ((same_block ct_1_0 t_10) /\
                 (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                 ((same_block t_10
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                 /\
                 ((<)
                 (sub_pointer t_10
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_52 p_22)
                 (select charP_charM_ct_1_53 t_10))))) ->
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 67 15 31#
              "expl:Ensures clause" ((=) result null)))
            /\
            (((exists p_23 : (pointer voidP).
               (exists t_11 : (pointer voidP).
                ((same_block cs_1_0 p_23) /\
                (((<=) (sub_pointer cs_1_0 p_23) (0)) /\
                ((same_block p_23
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52))))
                /\
                (((<)
                 (sub_pointer p_23
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0))
                /\
                ((same_block ct_1_0 t_11) /\
                (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                ((same_block t_11
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                (((<)
                 (sub_pointer t_11
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_52 p_23)
                (select charP_charM_ct_1_53 t_11)))))))))))) ->
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
               "expl:Ensures clause" (same_block cs_1_0 result))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 28#
               "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               (same_block result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               ((<)
               (sub_pointer result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_52)))) (0)))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strpbrk.h" 57 15 76#
               "expl:Ensures clause"
               (exists t_12 : (pointer voidP).
                ((same_block ct_1_0 t_12) /\
                (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                ((same_block t_12
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                /\
                (((<=)
                 (sub_pointer t_12
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_52 result)
                (select charP_charM_ct_1_53 t_12))))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strpbrk.h" 58 15 140#
              "expl:Ensures clause"
              (forall p_24 : (pointer voidP).
               (forall t_13 : (pointer voidP).
                (((same_block cs_1_0 p_24) /\
                 (((<=) (sub_pointer cs_1_0 p_24) (0)) /\
                 ((same_block p_24 result) /\
                 (((<) (sub_pointer p_24 result) (0)) /\
                 ((same_block ct_1_0 t_13) /\
                 (((<=) (sub_pointer ct_1_0 t_13) (0)) /\
                 ((same_block t_13
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53))))
                 /\
                 ((<)
                 (sub_pointer t_13
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_53)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_52 p_24)
                 (select charP_charM_ct_1_53 t_13))))))))))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strpbrk.h" 50 12 38#
            "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))))) }
  
end

module Function_strsep_behaviors
#"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
"expl:strsep, behaviors"

  use Unsafe_int8_of_Unsafe_int32 
  
  use Unsafe_int32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strpbrk_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strsep_ensures_default
  #"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
  "expl:Function strsep, default behavior" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_59
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_57 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_57_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_58_alloc_table : (alloc_table voidP))
   (voidP_result_59_alloc_table : (alloc_table voidP))
   (voidP_result_59_tag_table : (tag_table voidP)) (voidP_ct_2_58_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_58 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_2_58_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_58_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_58_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_58_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_58_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 4070 12 491# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_57 s_10)
   voidP_result_59_alloc_table !charP_charM_result_59)))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 4105 10 301# "expl:Behavior disjointness check"
    (not
    ((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\
    (((=) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null) /\
    ((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null))))))
    });
     (check {
     (#"whole_program.jc" 4110 10 213# "expl:Behavior disjointness check"
     (not
     (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
     ((valid_str (select !char_xP_char_xM_s_10_57 s_10)
      voidP_result_59_alloc_table !charP_charM_result_59)
     /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null)))))
     });
     (check {
     (#"whole_program.jc" 4114 10 213# "expl:Behavior disjointness check"
     (not
     (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
     ((valid_str (select !char_xP_char_xM_s_10_57 s_10)
      voidP_result_59_alloc_table !charP_charM_result_59)
     /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null)))))
     });
     (check {
     (#"whole_program.jc" 4118 10 353# "expl:Behavior completeness check"
     (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
       voidP_result_59_alloc_table !charP_charM_result_59)
      /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null))
     \/
     (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
       voidP_result_59_alloc_table !charP_charM_result_59)
      /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null))
     \/ ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))) });
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_57 s_10 ));
       (if
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_14 := (null  )); (raise (Return_label_exc ())) end
       else ());
       begin
       (end_0 :=
        (let _jessie_604 = !sbegin in
        (let _jessie_603 = ct_2 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_604 _jessie_603
         voidP_ct_2_58_alloc_table voidP_result_59_alloc_table
         voidP_ct_2_58_tag_table voidP_result_59_tag_table
         charP_charM_ct_2_58 !charP_charM_result_59 )))));
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strsep.c" 12 12 38#
        "expl:Assertion in line 12" ((=) (strpbrk !sbegin ct_2) !end_0)) });
         () end;
        (if
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_11 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 4148 50 62# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_608 =
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 14 15#
           "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"whole_program.jc" 4149 62 74# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) in
           (let _jessie_609 = !tmp_0_11 in
           (let _jessie_610 = (0) in
           (let _jessie_611 = _jessie_609 in
           (upd  charP_charM_result_59 _jessie_611 _jessie_608 ))))) end end
        else ());
        begin
        (let _jessie_598 = !end_0 in
        (let _jessie_599 = s_10 in
        (let _jessie_600 = (0) in
        (let _jessie_601 = _jessie_599 in
        (upd  char_xP_char_xM_s_10_57 _jessie_601 _jessie_598 )))));
         begin (__retres_14 := !sbegin); (raise (Return_label_exc ())) end
        end end end with Return_label_exc _jessie_69 ->
      'Return_label:
      'Return_label: begin (return := !__retres_14); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_null
  #"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_59
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_57 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_57_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_58_alloc_table : (alloc_table voidP))
   (voidP_result_59_alloc_table : (alloc_table voidP))
   (voidP_result_59_tag_table : (tag_table voidP)) (voidP_ct_2_58_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_58 : (memory voidP Int8.t)) 
   requires {
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (((allocated voidP_ct_2_58_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_58_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_58_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_58_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_58_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 4070 12 491# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_57 s_10)
   voidP_result_59_alloc_table !charP_charM_result_59))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
       (not_assigns voidP_result_59_alloc_table voidP_result_59_alloc_table
       (old !charP_charM_result_59) !charP_charM_result_59 pset_empty))
      /\
      (#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
      (not_assigns char_xP_s_10_57_alloc_table char_xP_s_10_57_alloc_table
      (old !char_xP_char_xM_s_10_57) !char_xP_char_xM_s_10_57 pset_empty)))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 25 15 31#
     "expl:Ensures clause" ((=) result null)))) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_57 s_10 ));
       (if
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_14 := (null  )); (raise (Return_label_exc ())) end
       else ());
       begin
       (end_0 :=
        (let _jessie_623 = !sbegin in
        (let _jessie_622 = ct_2 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_623 _jessie_622
         voidP_ct_2_58_alloc_table voidP_result_59_alloc_table
         voidP_ct_2_58_tag_table voidP_result_59_tag_table
         charP_charM_ct_2_58 !charP_charM_result_59 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_11 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 4148 50 62# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_627 =
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 14 15#
           "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"whole_program.jc" 4149 62 74# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) in
           (let _jessie_628 = !tmp_0_11 in
           (let _jessie_629 = (0) in
           (let _jessie_630 = _jessie_628 in
           (upd  charP_charM_result_59 _jessie_630 _jessie_627 ))))) end end
        else ());
        begin
        (let _jessie_617 = !end_0 in
        (let _jessie_618 = s_10 in
        (let _jessie_619 = (0) in
        (let _jessie_620 = _jessie_618 in
        (upd  char_xP_char_xM_s_10_57 _jessie_620 _jessie_617 )))));
         begin (__retres_14 := !sbegin); (raise (Return_label_exc ())) end
        end end end with Return_label_exc _jessie_69 ->
      'Return_label:
      'Return_label: begin (return := !__retres_14); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_strpbrk_not_null
  #"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_strpbrk_not_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_59
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_57 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_57_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_58_alloc_table : (alloc_table voidP))
   (voidP_result_59_alloc_table : (alloc_table voidP))
   (voidP_result_59_tag_table : (tag_table voidP)) (voidP_ct_2_58_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_58 : (memory voidP Int8.t)) 
   requires {
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null))
   /\
   (((allocated voidP_ct_2_58_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_58_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_58_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_58_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_58_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 4070 12 491# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_57 s_10)
   voidP_result_59_alloc_table !charP_charM_result_59))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
       (not_assigns voidP_result_59_alloc_table voidP_result_59_alloc_table
       (old !charP_charM_result_59) !charP_charM_result_59
       (pset_singleton
       (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))))
      /\
      (#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
      (not_assigns char_xP_s_10_57_alloc_table char_xP_s_10_57_alloc_table
      (old !char_xP_char_xM_s_10_57) !char_xP_char_xM_s_10_57
      (pset_singleton s_10))))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
      "expl:Ensures clause"
      ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strsep.h" 38 15 46#
      "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_s_10_57 s_10)
      (shift (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2) (1))))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strsep.h" 39 15 45#
      "expl:Ensures clause"
      (Int8.(=)
      (select !charP_charM_result_59
      (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))
      (#"whole_program.jc" 4102 37 48# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 40 15 33#
     "expl:Ensures clause"
     (valid_str result voidP_result_59_alloc_table !charP_charM_result_59)))))))))))
     }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_57 s_10 ));
       (if
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_14 := (null  )); (raise (Return_label_exc ())) end
       else ());
       begin
       (end_0 :=
        (let _jessie_661 = !sbegin in
        (let _jessie_660 = ct_2 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_661 _jessie_660
         voidP_ct_2_58_alloc_table voidP_result_59_alloc_table
         voidP_ct_2_58_tag_table voidP_result_59_tag_table
         charP_charM_ct_2_58 !charP_charM_result_59 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_11 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 4148 50 62# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_665 =
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 14 15#
           "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"whole_program.jc" 4149 62 74# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) in
           (let _jessie_666 = !tmp_0_11 in
           (let _jessie_667 = (0) in
           (let _jessie_668 = _jessie_666 in
           (upd  charP_charM_result_59 _jessie_668 _jessie_665 ))))) end end
        else ());
        begin
        (let _jessie_655 = !end_0 in
        (let _jessie_656 = s_10 in
        (let _jessie_657 = (0) in
        (let _jessie_658 = _jessie_656 in
        (upd  char_xP_char_xM_s_10_57 _jessie_658 _jessie_655 )))));
         begin (__retres_14 := !sbegin); (raise (Return_label_exc ())) end
        end end end with Return_label_exc _jessie_69 ->
      'Return_label:
      'Return_label: begin (return := !__retres_14); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_strpbrk_null
  #"/home/work/workspace/self/verker-gh/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_strpbrk_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_59
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_57 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_57_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_58_alloc_table : (alloc_table voidP))
   (voidP_result_59_alloc_table : (alloc_table voidP))
   (voidP_result_59_tag_table : (tag_table voidP)) (voidP_ct_2_58_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_58 : (memory voidP Int8.t)) 
   requires {
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_57 s_10) ct_2) null))
   /\
   (((allocated voidP_ct_2_58_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_58_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_58_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_58_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_58_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
   /\
   (#"whole_program.jc" 4070 12 491#
   ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 4070 12 491#
    ((#"whole_program.jc" 4070 12 491#
     ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 4070 12 491# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
     voidP_result_59_alloc_table !charP_charM_result_59)
    /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_57 s_10)
   voidP_result_59_alloc_table !charP_charM_result_59))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
       (not_assigns voidP_result_59_alloc_table voidP_result_59_alloc_table
       (old !charP_charM_result_59) !charP_charM_result_59 pset_empty))
      /\
      (#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
      (not_assigns char_xP_s_10_57_alloc_table char_xP_s_10_57_alloc_table
      (old !char_xP_char_xM_s_10_57) !char_xP_char_xM_s_10_57
      (pset_singleton s_10))))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
      "expl:Ensures clause"
      ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
     /\
     (#"/home/work/workspace/self/verker-gh/strsep.h" 31 15 26#
     "expl:Ensures clause" ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))))))
     }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_57 s_10 ));
       (if
       (#"/home/work/workspace/self/verker-gh/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_14 := (null  )); (raise (Return_label_exc ())) end
       else ());
       begin
       (end_0 :=
        (let _jessie_642 = !sbegin in
        (let _jessie_641 = ct_2 in
        (#"/home/work/workspace/self/verker-gh/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_642 _jessie_641
         voidP_ct_2_58_alloc_table voidP_result_59_alloc_table
         voidP_ct_2_58_tag_table voidP_result_59_tag_table
         charP_charM_ct_2_58 !charP_charM_result_59 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker-gh/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker-gh/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_11 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 4148 50 62# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_646 =
           (#"/home/work/workspace/self/verker-gh/strsep.c" 14 14 15#
           "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"whole_program.jc" 4149 62 74# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) in
           (let _jessie_647 = !tmp_0_11 in
           (let _jessie_648 = (0) in
           (let _jessie_649 = _jessie_647 in
           (upd  charP_charM_result_59 _jessie_649 _jessie_646 ))))) end end
        else ());
        begin
        (let _jessie_636 = !end_0 in
        (let _jessie_637 = s_10 in
        (let _jessie_638 = (0) in
        (let _jessie_639 = _jessie_637 in
        (upd  char_xP_char_xM_s_10_57 _jessie_639 _jessie_636 )))));
         begin (__retres_14 := !sbegin); (raise (Return_label_exc ())) end
        end end end with Return_label_exc _jessie_69 ->
      'Return_label:
      'Return_label: begin (return := !__retres_14); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

module Function_strspn_0_safety
#"/home/work/workspace/self/verker-gh/strspn.h" 69 7 48#
"expl:strspn, safety"

  use enum.Uint64 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  let strspn_0 #"/home/work/workspace/self/verker-gh/strspn.h" 69 7 48#
  "expl:Function strspn, safety" =
  fun
   (s_11_0 : (pointer voidP)) (accept_0 : (pointer voidP))
   (voidP_s_11_60_alloc_table : (alloc_table voidP))
   (voidP_accept_61_alloc_table : (alloc_table voidP))
   (voidP_accept_61_tag_table : (tag_table voidP)) (voidP_s_11_60_tag_table :
   (tag_table voidP)) (charP_charM_s_11_60 : (memory voidP Int8.t))
   (charP_charM_accept_61 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_accept_61_alloc_table accept_0) ->
     (((=) (typeof voidP_accept_61_tag_table accept_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_accept_61_alloc_table accept_0) i) /\
       ((<) i (offset_max voidP_accept_61_alloc_table accept_0))) ->
       ((=) (typeof voidP_accept_61_tag_table (shift accept_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_11_60_alloc_table s_11_0) ->
     (((=) (typeof voidP_s_11_60_tag_table s_11_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_11_60_alloc_table s_11_0) i) /\
       ((<) i (offset_max voidP_s_11_60_alloc_table s_11_0))) ->
       ((=) (typeof voidP_s_11_60_tag_table (shift s_11_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4160 12 97#
   ((#"/home/work/workspace/self/verker-gh/strspn.h" 60 13 25#
    (valid_str s_11_0 voidP_s_11_60_alloc_table charP_charM_s_11_60))
   /\
   (#"/home/work/workspace/self/verker-gh/strspn.h" 61 13 30#
   (valid_str accept_0 voidP_accept_61_alloc_table charP_charM_accept_61))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (let p_2_1 = ref (any_pointer  () : (pointer voidP)) in
    (let a = ref (any_pointer  () : (pointer voidP)) in
    (let count_6 = ref (Safe_uint64.any_  () ) in
    (let __retres_15 = ref (Safe_uint64.any_  () ) in
    try
     begin
     try
      begin
      (count_6 :=
       (let _jessie_706 =
       (#"/home/work/workspace/self/verker-gh/strspn.c" 7 16 17#
       "expl:Integer cast"
       (Safe_uint64_of_Safe_int32.cast 
        (#"whole_program.jc" 4217 38 50# "expl:Integer cast"
        (Safe_int32.of_int (0))) )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker-gh/strspn.c" 7 1 7#
       "expl:Pointer index bounds" true) }); _jessie_706 end));
       begin
       (p_2_1 :=
        (let _jessie_700 = s_11_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strspn.c" 18 6 11#
        "expl:Pointer index bounds" true) }); _jessie_700 end));
        'Loop_73:
        loop
        invariant { (#"whole_program.jc" 4220 6 6384# true) }
          variant {
            (#"/home/work/workspace/self/verker-gh/strspn.c" 16 18 37#
            (Int.(-) (Uint64.to_int (strlen s_11_0 charP_charM_s_11_60))
            (sub_pointer !p_2_1 s_11_0))) }
         begin
         any unit
         requires { true } reads { accept_0, s_11_0 }
         ensures {
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 15 20 66#
            ((=) (strspn s_11_0 accept_0)
            (Int.(+) (strspn !p_2_1 accept_0) (Uint64.to_int !count_6))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 14 20 32#
            (valid_str !p_2_1 voidP_s_11_60_alloc_table charP_charM_s_11_60))
           /\
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 12 20 140#
            (forall c_35 : (pointer voidP).
             (((same_block s_11_0 c_35) /\
              (((<=) (sub_pointer s_11_0 c_35) (0)) /\
              ((same_block c_35 !p_2_1) /\
              ((<) (sub_pointer c_35 !p_2_1) (0))))) ->
              (exists t_14 : (pointer voidP).
               ((same_block accept_0 t_14) /\
               (((<=) (sub_pointer accept_0 t_14) (0)) /\
               ((same_block t_14
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
               /\
               (((<)
                (sub_pointer t_14
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                (0))
               /\
               (Int8.(=) (select charP_charM_s_11_60 c_35)
               (select charP_charM_accept_61 t_14))))))))))
           /\
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 11 20 34#
            ((=) (Uint64.to_int !count_6) (sub_pointer !p_2_1 s_11_0)))
           /\
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 43#
            (#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 43#
            ((#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 30#
             (Uint64.(<=) (#"whole_program.jc" 4234 40 53#
             "expl:Integer cast" (Uint64.of_int (0))) !count_6))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.c" 10 25 43#
            (Uint64.(<=) !count_6 (strlen s_11_0 charP_charM_s_11_60))))))
           /\
           (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
           (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 26#
            (same_block s_11_0 !p_2_1))
           /\
           (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 26#
            ((<=) (sub_pointer s_11_0 !p_2_1) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 25 43#
            (same_block !p_2_1
            (shift s_11_0
            (Uint64.to_int (strlen s_11_0 charP_charM_s_11_60)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strspn.c" 9 25 43#
           ((<=)
           (sub_pointer !p_2_1
           (shift s_11_0 (Uint64.to_int (strlen s_11_0 charP_charM_s_11_60))))
           (0))))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strspn.c" 18 13 23#
           (Safe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strspn.c" 18 13 15#
            "expl:Integer cast"
            (Safe_int32_of_Safe_int8.cast 
             (#"/home/work/workspace/self/verker-gh/strspn.c" 18 13 15#
             "expl:Pointer dereference"
             (acc  voidP_s_11_60_alloc_table charP_charM_s_11_60 !p_2_1 )) ))
            (#"whole_program.jc" 4265 28 40# "expl:Integer cast"
            (Safe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (a :=
              (let _jessie_701 = accept_0 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strspn.c" 25 7 17#
              "expl:Pointer index bounds" true) }); _jessie_701 end));
              'Loop_74:
              loop
              invariant { (#"whole_program.jc" 4270 15 2539# true) }
                variant {
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 23 19 48#
                  (Int.(-)
                  (Uint64.to_int (strlen accept_0 charP_charM_accept_61))
                  (sub_pointer !a accept_0))) }
               begin
               any unit
               requires { true } reads { accept_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 22 21 61#
                  ((in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
                   charP_charM_accept_61) ->
                   (in_array !a (select charP_charM_s_11_60 !p_2_1)
                   charP_charM_accept_61)))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 21 21 33#
                  (valid_str !a voidP_accept_61_alloc_table
                  charP_charM_accept_61))
                 /\
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 20 21 66#
                  (forall c_34 : (pointer voidP).
                   (((same_block accept_0 c_34) /\
                    (((<=) (sub_pointer accept_0 c_34) (0)) /\
                    ((same_block c_34 !a) /\ ((<) (sub_pointer c_34 !a) (0)))))
                    ->
                    (Int8.(<>) (select charP_charM_accept_61 c_34)
                    (select charP_charM_s_11_60 !p_2_1)))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 32#
                  (same_block accept_0 !a))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 32#
                  ((<=) (sub_pointer accept_0 !a) (0)))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 31 59#
                  (same_block !a
                  (shift accept_0
                  (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))))
                 /\
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 19 31 59#
                 ((<=)
                 (sub_pointer !a
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                 (0))))))))))))) } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 25 19 29#
                 (Safe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 25 19 21#
                  "expl:Integer cast"
                  (Safe_int32_of_Safe_int8.cast 
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 25 19 21#
                   "expl:Pointer dereference"
                   (acc  voidP_accept_61_alloc_table charP_charM_accept_61 !a
                    )) ))
                  (#"whole_program.jc" 4303 38 50# "expl:Integer cast"
                  (Safe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 26 7 15#
                  (Safe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 26 7 9#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker-gh/strspn.c" 26 7 9#
                    "expl:Pointer dereference"
                    (acc  voidP_s_11_60_alloc_table charP_charM_s_11_60
                     !p_2_1 )) ))
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 26 13 15#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker-gh/strspn.c" 26 13 15#
                    "expl:Pointer dereference"
                    (acc  voidP_accept_61_alloc_table charP_charM_accept_61
                     !a )) )) )) then (raise (Goto_while_1_break_exc ()))
                  else ());
                  (a :=
                   (let _jessie_702 =
                   (shift_typesafe  !a
                    (Safe_int32.to_int 
                     (#"whole_program.jc" 4310 53 65# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) ) in
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 25 31 34#
                   "expl:Pointer index bounds" true) }); _jessie_702 end))
                 end; (raise (Loop_continue_exc ())) end with
                 Loop_continue_exc _jessie_74 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_70 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              (if
              (#"/home/work/workspace/self/verker-gh/strspn.c" 29 6 16#
              (Safe_int32.(=) 
               (#"/home/work/workspace/self/verker-gh/strspn.c" 29 6 8#
               "expl:Integer cast"
               (Safe_int32_of_Safe_int8.cast 
                (#"/home/work/workspace/self/verker-gh/strspn.c" 29 6 8#
                "expl:Pointer dereference"
                (acc  voidP_accept_61_alloc_table charP_charM_accept_61 !a ))
                ))
               (#"whole_program.jc" 4315 32 44# "expl:Integer cast"
               (Safe_int32.of_int (0))) ))
              then
               begin
               begin
               any unit
               requires { true } reads { accept_0 }
               ensures {
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 30 14 35#
                 (not
                 (in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
                 charP_charM_accept_61))) } ; () end;
                begin
                (__retres_15 :=
                 (let _jessie_703 = !count_6 in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 31 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_703 end));
                 (raise (Return_label_exc ())) end end else ());
              begin
              any unit
              requires { true } reads { accept_0 }
              ensures {
                (#"/home/work/workspace/self/verker-gh/strspn.c" 32 13 33#
                (in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
                charP_charM_accept_61)) } ; () end;
              (count_6 :=
               (let _jessie_704 =
               (Safe_uint64.(+)  !count_6
                (#"whole_program.jc" 4336 62 75# "expl:Integer cast"
                (Safe_uint64.of_int (1))) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strspn.c" 33 2 9#
               "expl:Pointer index bounds" true) }); _jessie_704 end)) end
             end;
            (p_2_1 :=
             (let _jessie_705 =
             (shift_typesafe  !p_2_1
              (Safe_int32.to_int 
               (#"whole_program.jc" 4338 48 60# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker-gh/strspn.c" 18 25 28#
             "expl:Pointer index bounds" true) }); _jessie_705 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_76 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_71 ->
      'While_0_break:
      'While_0_break:
      begin
      ();
       (__retres_15 :=
        (let _jessie_707 = !count_6 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker-gh/strspn.c" 35 1 14#
        "expl:Pointer index bounds" true) }); _jessie_707 end)) end end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_72 ->
     'Return_label:
     'Return_label:
     begin
     (return :=
      (let _jessie_708 = !__retres_15 in
      begin
      (assert {
      (#"whole_program.jc" 4344 7 25# "expl:Pointer index bounds" true) });
       _jessie_708 end)); (raise Return) end end)))); absurd  end with Return
    -> !return end)
  
end

module Function_strspn_0_behaviors
#"/home/work/workspace/self/verker-gh/strspn.h" 69 7 48#
"expl:strspn, behaviors"

  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  let strspn_ensures_default
  #"/home/work/workspace/self/verker-gh/strspn.h" 69 7 48#
  "expl:Function strspn, default behavior" =
  fun
   (s_11_0 : (pointer voidP)) (accept_0 : (pointer voidP))
   (voidP_s_11_60_alloc_table : (alloc_table voidP))
   (voidP_accept_61_alloc_table : (alloc_table voidP))
   (voidP_accept_61_tag_table : (tag_table voidP)) (voidP_s_11_60_tag_table :
   (tag_table voidP)) (charP_charM_s_11_60 : (memory voidP Int8.t))
   (charP_charM_accept_61 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_accept_61_alloc_table accept_0) ->
     (((=) (typeof voidP_accept_61_tag_table accept_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_accept_61_alloc_table accept_0) i) /\
       ((<) i (offset_max voidP_accept_61_alloc_table accept_0))) ->
       ((=) (typeof voidP_accept_61_tag_table (shift accept_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_11_60_alloc_table s_11_0) ->
     (((=) (typeof voidP_s_11_60_tag_table s_11_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_11_60_alloc_table s_11_0) i) /\
       ((<) i (offset_max voidP_s_11_60_alloc_table s_11_0))) ->
       ((=) (typeof voidP_s_11_60_tag_table (shift s_11_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4160 12 97#
   ((#"/home/work/workspace/self/verker-gh/strspn.h" 60 13 25#
    (valid_str s_11_0 voidP_s_11_60_alloc_table charP_charM_s_11_60))
   /\
   (#"/home/work/workspace/self/verker-gh/strspn.h" 61 13 30#
   (valid_str accept_0 voidP_accept_61_alloc_table charP_charM_accept_61))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 24#
      "expl:Ensures clause"
      (Uint64.(<=) (#"whole_program.jc" 4164 35 48# "expl:Integer cast"
      (Uint64.of_int (0))) result))
     /\
     (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 17 37#
      "expl:Ensures clause"
      (Uint64.(<=) result (strlen s_11_0 charP_charM_s_11_60)))
     /\
     (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strspn.h" 64 12 87#
      "expl:Ensures clause"
      (forall t_15 : (pointer voidP).
       (((same_block accept_0 t_15) /\
        (((<=) (sub_pointer accept_0 t_15) (0)) /\
        ((same_block t_15
         (shift accept_0
         (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
        /\
        ((<)
        (sub_pointer t_15
        (shift accept_0
        (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))) (0))))) ->
        (Int8.(<>)
        (select charP_charM_s_11_60 (shift s_11_0 (Uint64.to_int result)))
        (select charP_charM_accept_61 t_15)))))
     /\
     (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker-gh/strspn.h" 65 12 134#
      "expl:Ensures clause"
      (forall p_32 : (pointer voidP).
       (((same_block s_11_0 p_32) /\
        (((<=) (sub_pointer s_11_0 p_32) (0)) /\
        ((same_block p_32 (shift s_11_0 (Uint64.to_int result))) /\
        ((<) (sub_pointer p_32 (shift s_11_0 (Uint64.to_int result))) (0)))))
        ->
        (exists t_16 : (pointer voidP).
         ((same_block accept_0 t_16) /\
         (((<=) (sub_pointer accept_0 t_16) (0)) /\
         ((same_block t_16
          (shift accept_0
          (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
         /\
         (((<)
          (sub_pointer t_16
          (shift accept_0
          (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))) (0))
         /\
         (Int8.(=) (select charP_charM_s_11_60 p_32)
         (select charP_charM_accept_61 t_16))))))))))
     /\
     (#"/home/work/workspace/self/verker-gh/strspn.h" 67 12 40#
     "expl:Ensures clause"
     ((=) (Uint64.to_int result) (strspn s_11_0 accept_0))))))))))))) }
   diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (let p_2_1 = ref (any_pointer  () : (pointer voidP)) in
    (let a = ref (any_pointer  () : (pointer voidP)) in
    (let count_6 = ref (Unsafe_uint64.any_  () ) in
    (let __retres_15 = ref (Unsafe_uint64.any_  () ) in
    try
     begin
     try
      begin
      (count_6 :=
       (#"/home/work/workspace/self/verker-gh/strspn.c" 7 16 17#
       "expl:Integer cast"
       (Unsafe_uint64_of_Unsafe_int32.cast 
        (#"whole_program.jc" 4217 38 50# "expl:Integer cast"
        (Unsafe_int32.of_int (0))) )));
       begin
       (p_2_1 := s_11_0);
        'Loop_71:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
             (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 26#
              (same_block s_11_0 !p_2_1))
             /\
             (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 26#
              ((<=) (sub_pointer s_11_0 !p_2_1) (0)))
             /\
             (#"/home/work/workspace/self/verker-gh/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker-gh/strspn.c" 9 25 43#
              (same_block !p_2_1
              (shift s_11_0
              (Uint64.to_int (strlen s_11_0 charP_charM_s_11_60)))))
             /\
             (#"/home/work/workspace/self/verker-gh/strspn.c" 9 25 43#
             ((<=)
             (sub_pointer !p_2_1
             (shift s_11_0
             (Uint64.to_int (strlen s_11_0 charP_charM_s_11_60)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker-gh/strspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 4234 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_6))
             /\
             (#"/home/work/workspace/self/verker-gh/strspn.c" 10 25 43#
             (Uint64.(<=) !count_6 (strlen s_11_0 charP_charM_s_11_60))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_6) (sub_pointer !p_2_1 s_11_0)))
            &&
            ((#"/home/work/workspace/self/verker-gh/strspn.c" 12 20 140#
             (forall c_35 : (pointer voidP).
              (((same_block s_11_0 c_35) /\
               (((<=) (sub_pointer s_11_0 c_35) (0)) /\
               ((same_block c_35 !p_2_1) /\
               ((<) (sub_pointer c_35 !p_2_1) (0))))) ->
               (exists t_14 : (pointer voidP).
                ((same_block accept_0 t_14) /\
                (((<=) (sub_pointer accept_0 t_14) (0)) /\
                ((same_block t_14
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                /\
                (((<)
                 (sub_pointer t_14
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_60 c_35)
                (select charP_charM_accept_61 t_14))))))))))
            &&
            ((#"/home/work/workspace/self/verker-gh/strspn.c" 14 20 32#
             (valid_str !p_2_1 voidP_s_11_60_alloc_table charP_charM_s_11_60))
            &&
            (#"/home/work/workspace/self/verker-gh/strspn.c" 15 20 66#
            ((=) (strspn s_11_0 accept_0)
            (Int.(+) (strspn !p_2_1 accept_0) (Uint64.to_int !count_6))))))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker-gh/strspn.c" 18 13 23#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker-gh/strspn.c" 18 13 15#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_s_11_60 !p_2_1 ) ))
            (#"whole_program.jc" 4265 28 40# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_exc ())));
            try
             begin
             (a := accept_0);
              'Loop_72:
              loop
              invariant
                { ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 32#
                    (same_block accept_0 !a))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 32#
                    ((<=) (sub_pointer accept_0 !a) (0)))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker-gh/strspn.c" 19 31 59#
                    (same_block !a
                    (shift accept_0
                    (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))))
                   /\
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 19 31 59#
                   ((<=)
                   (sub_pointer !a
                   (shift accept_0
                   (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                   (0))))))))))
                  &&
                  ((#"/home/work/workspace/self/verker-gh/strspn.c" 20 21 66#
                   (forall c_34 : (pointer voidP).
                    (((same_block accept_0 c_34) /\
                     (((<=) (sub_pointer accept_0 c_34) (0)) /\
                     ((same_block c_34 !a) /\
                     ((<) (sub_pointer c_34 !a) (0))))) ->
                     (Int8.(<>) (select charP_charM_accept_61 c_34)
                     (select charP_charM_s_11_60 !p_2_1)))))
                  &&
                  ((#"/home/work/workspace/self/verker-gh/strspn.c" 21 21 33#
                   (valid_str !a voidP_accept_61_alloc_table
                   charP_charM_accept_61))
                  &&
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 22 21 61#
                  ((in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
                   charP_charM_accept_61) ->
                   (in_array !a (select charP_charM_s_11_60 !p_2_1)
                   charP_charM_accept_61)))))) } 
               begin
               any unit requires { true } ensures { true } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker-gh/strspn.c" 25 19 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 25 19 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_accept_61 !a ) ))
                  (#"whole_program.jc" 4303 38 50# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker-gh/strspn.c" 26 7 15#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 26 7 9#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_s_11_60 !p_2_1 ) ))
                   (#"/home/work/workspace/self/verker-gh/strspn.c" 26 13 15#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_accept_61 !a ) )) ))
                  then (raise (Goto_while_1_break_exc ())) else ());
                  (a :=
                   (shift_  !a
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 4310 53 65# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_74 -> () end end end;
              (raise (Goto_while_1_break_exc ())) end with
             Goto_while_1_break_exc _jessie_70 ->
             'While_1_break:
             'While_1_break:
             begin
             ();
              (if
              (#"/home/work/workspace/self/verker-gh/strspn.c" 29 6 16#
              (Unsafe_int32.(=) 
               (#"/home/work/workspace/self/verker-gh/strspn.c" 29 6 8#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_int8.cast 
                (acc  charP_charM_accept_61 !a ) ))
               (#"whole_program.jc" 4315 32 44# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then
               begin
               begin
               (assert {
               (#"/home/work/workspace/self/verker-gh/strspn.c" 30 14 35#
               "expl:Assertion in line 30"
               (not
               (in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
               charP_charM_accept_61))) }); () end;
                begin
                (__retres_15 := !count_6); (raise (Return_label_exc ())) end
               end else ());
              begin
              (assert {
              (#"/home/work/workspace/self/verker-gh/strspn.c" 32 13 33#
              "expl:Assertion in line 32"
              (in_array accept_0 (select charP_charM_s_11_60 !p_2_1)
              charP_charM_accept_61)) }); () end;
              (count_6 :=
               (Unsafe_uint64.(+)  !count_6
                (#"whole_program.jc" 4336 62 75# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end;
            (p_2_1 :=
             (shift_  !p_2_1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 4338 48 60# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_76 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_71 ->
      'While_0_break: 'While_0_break: begin (); (__retres_15 := !count_6) end
      end; (raise (Return_label_exc ())) end with Return_label_exc _jessie_72
     ->
     'Return_label:
     'Return_label: begin (return := !__retres_15); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct__BoolP

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function _BoolP_tag  : (tag_id _BoolP)
  
  axiom U__BoolP_parenttag_bottom :
  (parenttag _BoolP_tag bottom_tag)
  
  axiom U__BoolP_is_final :
  (forall _BoolP_tag_table : (tag_table _BoolP).
   (forall p : (pointer _BoolP).
    ((instanceof _BoolP_tag_table p _BoolP_tag) ->
     ((=) (typeof _BoolP_tag_table p) _BoolP_tag))))
  
  predicate frame_tag_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_tag_table : (tag_table _BoolP)) (_BoolP_tag_table : (tag_table
  _BoolP))
  =
     ((tag_extends old__BoolP_tag_table _BoolP_tag_table) /\
     (alloc_tag_block old__BoolP_tag_table _BoolP_tag_table p))
  
  predicate frame_free_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((free_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (free_block old__BoolP_alloc_table _BoolP_alloc_table p))
  
  predicate frame_alloc_struct__BoolP (p : (pointer _BoolP)) (n : int)
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((alloc_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (alloc_block old__BoolP_alloc_table _BoolP_alloc_table p n))
  
  predicate fresh_tag_struct__BoolP (p : (pointer _BoolP)) (_BoolP_tag_table
  : (tag_table _BoolP)) = (tag_fresh _BoolP_tag_table p)
  
  predicate fresh_alloc_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = (alloc_fresh _BoolP_alloc_table p)
  
  predicate container_of_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate container_of_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate typeof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = ((=) (typeof _BoolP_tag_table p) _BoolP_tag)
  
  predicate typeof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r : int)
  (_BoolP_tag_table : (tag_table _BoolP))
  =
     (((=) (typeof _BoolP_tag_table p) _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof _BoolP_tag_table (shift p i)) _BoolP_tag))))
  
  predicate instanceof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = (instanceof _BoolP_tag_table p _BoolP_tag)
  
  predicate instanceof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP))
  =
     ((instanceof _BoolP_tag_table p _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof _BoolP_tag_table (shift p i) _BoolP_tag))))
  
  predicate right_valid_struct__BoolP (p : (pointer _BoolP)) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((>=) (offset_max _BoolP_alloc_table p) b)
  
  predicate left_valid_struct__BoolP (p : (pointer _BoolP)) (a : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((<=) (offset_min _BoolP_alloc_table p) a)
  
  predicate valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((<=) (offset_min _BoolP_alloc_table p) a) /\
     ((>=) (offset_max _BoolP_alloc_table p) b))
  
  predicate strict_valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b :
  int) (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((=) (offset_min _BoolP_alloc_table p) a) /\
     ((=) (offset_max _BoolP_alloc_table p) b))
  
  axiom U__BoolP_int : ((=) (int_of_tag _BoolP_tag) (4))
  
end

module Struct__BoolP_unsafe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !_BoolP_alloc_table p)) }
    writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP_requires
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { ((>=) n (0)) } writes { _BoolP_alloc_table, _BoolP_tag_table
     }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
end

module Struct__BoolP_safe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires { true } writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
  val allocate_singleton_struct__BoolP
  (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
   (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
    requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
    ensures {
      ((strict_valid_struct__BoolP result (0) (0) !_BoolP_alloc_table) /\
      ((frame_alloc_struct__BoolP result (1) (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\
      ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
       !_BoolP_tag_table)
      /\
      ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
      ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
      ((typeof_singleton_struct__BoolP result !_BoolP_tag_table) /\
      (container_of_singleton_struct__BoolP result !_BoolP_tag_table))))))) }
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

theory Struct_char_xP

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function char_xP_tag  : (tag_id char_xP)
  
  axiom Char_xP_parenttag_bottom :
  (parenttag char_xP_tag bottom_tag)
  
  axiom Char_xP_is_final :
  (forall char_xP_tag_table : (tag_table char_xP).
   (forall p : (pointer char_xP).
    ((instanceof char_xP_tag_table p char_xP_tag) ->
     ((=) (typeof char_xP_tag_table p) char_xP_tag))))
  
  predicate frame_tag_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_tag_table : (tag_table char_xP)) (char_xP_tag_table :
  (tag_table char_xP))
  =
     ((tag_extends old_char_xP_tag_table char_xP_tag_table) /\
     (alloc_tag_block old_char_xP_tag_table char_xP_tag_table p))
  
  predicate frame_free_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((free_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (free_block old_char_xP_alloc_table char_xP_alloc_table p))
  
  predicate frame_alloc_struct_char_xP (p : (pointer char_xP)) (n : int)
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((alloc_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (alloc_block old_char_xP_alloc_table char_xP_alloc_table p n))
  
  predicate fresh_tag_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (tag_fresh char_xP_tag_table p)
  
  predicate fresh_alloc_struct_char_xP (p : (pointer char_xP))
  (char_xP_alloc_table : (alloc_table char_xP))
  = (alloc_fresh char_xP_alloc_table p)
  
  predicate container_of_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate container_of_struct_char_xP (p : (pointer char_xP)) (l : int) (r
  : int) (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate typeof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = ((=) (typeof char_xP_tag_table p) char_xP_tag)
  
  predicate typeof_struct_char_xP (p : (pointer char_xP)) (l : int) (r : int)
  (char_xP_tag_table : (tag_table char_xP))
  =
     (((=) (typeof char_xP_tag_table p) char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof char_xP_tag_table (shift p i)) char_xP_tag))))
  
  predicate instanceof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (instanceof char_xP_tag_table p char_xP_tag)
  
  predicate instanceof_struct_char_xP (p : (pointer char_xP)) (l : int) (r :
  int) (char_xP_tag_table : (tag_table char_xP))
  =
     ((instanceof char_xP_tag_table p char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof char_xP_tag_table (shift p i) char_xP_tag))))
  
  predicate right_valid_struct_char_xP (p : (pointer char_xP)) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((>=) (offset_max char_xP_alloc_table p) b)
  
  predicate left_valid_struct_char_xP (p : (pointer char_xP)) (a : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((<=) (offset_min char_xP_alloc_table p) a)
  
  predicate valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((<=) (offset_min char_xP_alloc_table p) a) /\
     ((>=) (offset_max char_xP_alloc_table p) b))
  
  predicate strict_valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b
  : int) (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((=) (offset_min char_xP_alloc_table p) a) /\
     ((=) (offset_max char_xP_alloc_table p) b))
  
  axiom Char_xP_int : ((=) (int_of_tag char_xP_tag) (5))
  
end

module Struct_char_xP_unsafe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !char_xP_alloc_table p)) }
    writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP_requires
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { ((>=) n (0)) } writes { char_xP_alloc_table,
     char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
end

module Struct_char_xP_safe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires { true } writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
  val allocate_singleton_struct_char_xP
  (char_xP_alloc_table : ref (alloc_table char_xP)) 
   (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
    requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
    ensures {
      ((strict_valid_struct_char_xP result (0) (0) !char_xP_alloc_table) /\
      ((frame_alloc_struct_char_xP result (1) (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\
      ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
       !char_xP_tag_table)
      /\
      ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
      ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
      ((typeof_singleton_struct_char_xP result !char_xP_tag_table) /\
      (container_of_singleton_struct_char_xP result !char_xP_tag_table)))))))
      }
  
end

module Struct_unsigned_charP_unsafe

  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_unsigned_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_unsigned_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !voidP_alloc_table))) }
  
  val allocate_struct_unsigned_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_unsigned_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_unsigned_charP result (0) n !voidP_tag_table)))))))
       }
  
end

module Struct_unsigned_charP_safe

  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_unsigned_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_unsigned_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !voidP_alloc_table))) }
  
  val allocate_struct_unsigned_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_unsigned_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_unsigned_charP result (0) n !voidP_tag_table)))))))
       }
  
  val allocate_singleton_struct_unsigned_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_unsigned_charP result (0) (0) !voidP_alloc_table)
      /\
      ((frame_alloc_struct_unsigned_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_unsigned_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_unsigned_charP result !voidP_tag_table)))))))
      }
  
end

theory Struct_unsigned_intP

  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function unsigned_intP_tag  : (tag_id
  unsigned_intP)
  
  axiom Unsigned_intP_parenttag_bottom :
  (parenttag unsigned_intP_tag bottom_tag)
  
  axiom Unsigned_intP_is_final :
  (forall unsigned_intP_tag_table : (tag_table unsigned_intP).
   (forall p : (pointer unsigned_intP).
    ((instanceof unsigned_intP_tag_table p unsigned_intP_tag) ->
     ((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag))))
  
  predicate frame_tag_struct_unsigned_intP (p : (pointer unsigned_intP))
  (old_unsigned_intP_tag_table : (tag_table unsigned_intP))
  (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     ((tag_extends old_unsigned_intP_tag_table unsigned_intP_tag_table) /\
     (alloc_tag_block old_unsigned_intP_tag_table unsigned_intP_tag_table p))
  
  predicate frame_free_struct_unsigned_intP (p : (pointer unsigned_intP))
  (old_unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     ((free_extends old_unsigned_intP_alloc_table unsigned_intP_alloc_table)
     /\
     (free_block old_unsigned_intP_alloc_table unsigned_intP_alloc_table p))
  
  predicate frame_alloc_struct_unsigned_intP (p : (pointer unsigned_intP)) (n
  : int) (old_unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     ((alloc_extends old_unsigned_intP_alloc_table unsigned_intP_alloc_table)
     /\
     (alloc_block old_unsigned_intP_alloc_table unsigned_intP_alloc_table p
     n))
  
  predicate fresh_tag_struct_unsigned_intP (p : (pointer unsigned_intP))
  (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = (tag_fresh unsigned_intP_tag_table p)
  
  predicate fresh_alloc_struct_unsigned_intP (p : (pointer unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = (alloc_fresh unsigned_intP_alloc_table p)
  
  predicate container_of_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = true
  
  predicate container_of_struct_unsigned_intP (p : (pointer unsigned_intP))
  (l : int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = true
  
  predicate typeof_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = ((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag)
  
  predicate typeof_struct_unsigned_intP (p : (pointer unsigned_intP)) (l :
  int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     (((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof unsigned_intP_tag_table (shift p i)) unsigned_intP_tag))))
  
  predicate instanceof_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = (instanceof unsigned_intP_tag_table p unsigned_intP_tag)
  
  predicate instanceof_struct_unsigned_intP (p : (pointer unsigned_intP)) (l
  : int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     ((instanceof unsigned_intP_tag_table p unsigned_intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof unsigned_intP_tag_table (shift p i) unsigned_intP_tag))))
  
  predicate right_valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (b
  : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = ((>=) (offset_max unsigned_intP_alloc_table p) b)
  
  predicate left_valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (a
  : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = ((<=) (offset_min unsigned_intP_alloc_table p) a)
  
  predicate valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (a :
  int) (b : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     (((<=) (offset_min unsigned_intP_alloc_table p) a) /\
     ((>=) (offset_max unsigned_intP_alloc_table p) b))
  
  predicate strict_valid_struct_unsigned_intP (p : (pointer unsigned_intP))
  (a : int) (b : int) (unsigned_intP_alloc_table : (alloc_table
  unsigned_intP))
  =
     (((=) (offset_min unsigned_intP_alloc_table p) a) /\
     ((=) (offset_max unsigned_intP_alloc_table p) b))
  
  axiom Unsigned_intP_int : ((=) (int_of_tag unsigned_intP_tag) (7))
  
end

module Struct_unsigned_intP_unsafe

  use import Struct_unsigned_intP 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_unsigned_intP
  (p : (pointer unsigned_intP)) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !unsigned_intP_alloc_table p)) }
    writes { unsigned_intP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_intP_alloc_table (old !unsigned_intP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_intP p (old !unsigned_intP_alloc_table)
       !unsigned_intP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_intP p !unsigned_intP_alloc_table))) }
  
  val allocate_struct_unsigned_intP_requires
  (n : int) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
    (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
     unsigned_intP)
     requires { ((>=) n (0)) } writes { unsigned_intP_alloc_table,
     unsigned_intP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_intP result (0) (Int.(-) n (1))
        !unsigned_intP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_intP result n (old
        !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
        !unsigned_intP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_intP result (old
        !unsigned_intP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_intP result (old
        !unsigned_intP_tag_table))
       /\
       ((typeof_struct_unsigned_intP result (0) n !unsigned_intP_tag_table)
       /\
       (container_of_struct_unsigned_intP result (0) n
       !unsigned_intP_tag_table))))))) }
  
end

module Struct_unsigned_intP_safe

  use import Struct_unsigned_intP 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_unsigned_intP
  (p : (pointer unsigned_intP)) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) : unit
    requires { true } writes { unsigned_intP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_intP_alloc_table (old !unsigned_intP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_intP p (old !unsigned_intP_alloc_table)
       !unsigned_intP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_intP p !unsigned_intP_alloc_table))) }
  
  val allocate_struct_unsigned_intP
  (n : int) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
    (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
     unsigned_intP)
     requires { true } writes { unsigned_intP_alloc_table,
     unsigned_intP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_intP result (0) (Int.(-) n (1))
        !unsigned_intP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_intP result n (old
        !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
        !unsigned_intP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_intP result (old
        !unsigned_intP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_intP result (old
        !unsigned_intP_tag_table))
       /\
       ((typeof_struct_unsigned_intP result (0) n !unsigned_intP_tag_table)
       /\
       (container_of_struct_unsigned_intP result (0) n
       !unsigned_intP_tag_table))))))) }
  
  val allocate_singleton_struct_unsigned_intP
  (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
   (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
    unsigned_intP)
    requires { true } writes { unsigned_intP_alloc_table,
    unsigned_intP_tag_table }
    ensures {
      ((strict_valid_struct_unsigned_intP result (0) (0)
       !unsigned_intP_alloc_table)
      /\
      ((frame_alloc_struct_unsigned_intP result (1) (old
       !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
      /\
      ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
       !unsigned_intP_tag_table)
      /\
      ((fresh_alloc_struct_unsigned_intP result (old
       !unsigned_intP_alloc_table))
      /\
      ((fresh_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table))
      /\
      ((typeof_singleton_struct_unsigned_intP result
       !unsigned_intP_tag_table)
      /\
      (container_of_singleton_struct_unsigned_intP result
      !unsigned_intP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

theory Enum__bool_of_Uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint8.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

theory Enum__bool_of_Uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint64.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

theory Enum__bool_of_Uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint32.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

theory Enum__bool_of_Uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint16.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

theory Enum__bool_of_Int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Enum__bool.t
  = (Enum__bool.of_int (Int8.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

theory Enum__bool_of_Int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Enum__bool.t
  = (Enum__bool.of_int (Int64.to_int n))
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

theory Enum__bool_of_Int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Enum__bool.t
  = (Enum__bool.of_int (Int32.to_int n))
  
end

module Safe_enum__bool_of_Safe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

theory Enum__bool_of_Int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Enum__bool.t
  = (Enum__bool.of_int (Int16.to_int n))
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint8_of_Safe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint8_of_Enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint8.t
  = (Uint8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint64_of_Safe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint64_of_Enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint64.t
  = (Uint64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint32_of_Safe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint32_of_Enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint32.t
  = (Uint32.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint16_of_Safe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint16_of_Enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint16.t
  = (Uint16.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_int8_of_Safe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int8_of_Enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int8.t
  = (Int8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_int64_of_Safe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int64_of_Enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int64.t
  = (Int64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Safe_int32_of_Safe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int32_of_Enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int32.t
  = (Int32.of_int (Enum__bool.to_int n))
  
end

module Safe_int16_of_Safe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int16_of_Enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int16.t
  = (Int16.of_int (Enum__bool.to_int n))
  
end

theory Axiomatic_Jessie_memory_reinterpretation_predicates

  use Uint8_of_Int8 
  
  use enum.Uint8 
  
  use enum.Int8 
  
  use import int.Int 
  
  use enum.Bit_uint8_of_bit_int8 
  
  use enum.Bit_int8_of_bit_uint8 
  
  use why3.Bool.Bool 
  
  predicate uint8_as_uint8 (d0 : Uint8.t) (a0 : Uint8.t)
  = ((Uint8.(=) d0 a0) /\ ((=) d0 a0))
  
  function complement_to_uint8 (v : Int8.t) : Uint8.t
  =
     (if ((>=) (Int8.to_int v) (0)) then (#"whole_program.jc" 16 20 32#
      "expl:Integer cast" (Uint8_of_Int8.cast v)) else
      (#"whole_program.jc" 16 38 71# "expl:Integer cast"
      (Uint8.of_int (Int.(+) (Int8.to_int v) (256)))))
  
  predicate uint8_as_int8 (d0_0 : Int8.t) (a0_0 : Uint8.t)
  =
     ((uint8_as_uint8 (complement_to_uint8 d0_0) a0_0) /\
     (Bit_int8_of_bit_uint8.bit_uint8_as_bit_int8 d0_0 a0_0))
  
  predicate int8_as_uint8 (d0_1 : Int8.t) (a0_1 : Uint8.t)
  =
     ((uint8_as_uint8 (complement_to_uint8 d0_1) a0_1) /\
     (Bit_uint8_of_bit_int8.bit_int8_as_bit_uint8 d0_1 a0_1))
  
end

module Function_check_bytes8_0

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  val check_bytes8_0
  (start_1 : (pointer voidP)) 
   (value_0 : Uint8.t) 
    (bytes_0 : Uint32.t) 
     (voidP_start_4_alloc_table : (alloc_table voidP)) 
      (voidP_start_4_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_start_4 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_start_4_alloc_table result) ->
            ((instanceof voidP_start_4_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_start_4_alloc_table result) i) /\
              ((<) i (offset_max voidP_start_4_alloc_table result))) ->
              (instanceof voidP_start_4_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_2 : (pointer voidP).
             (((same_block start_1 i_2) /\
              (((<=) (sub_pointer start_1 i_2) (0)) /\
              ((same_block i_2 (shift start_1 (Uint32.to_int bytes_0))) /\
              ((<) (sub_pointer i_2 (shift start_1 (Uint32.to_int bytes_0)))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_2)
              value_0))) ->
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 34 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          (((exists i_3 : (pointer voidP).
             ((same_block start_1 i_3) /\
             (((<=) (sub_pointer start_1 i_3) (0)) /\
             ((same_block i_3 (shift start_1 (Uint32.to_int bytes_0))) /\
             (((<) (sub_pointer i_3 (shift start_1 (Uint32.to_int bytes_0)))
              (0))
             /\
             (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_4 i_3)
             value_0)))))) ->
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             (same_block start_1
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             ((<=)
             (sub_pointer start_1
             (downcast voidP_start_4_tag_table result unsigned_charP_tag))
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             (same_block
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             ((<)
             (sub_pointer
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 30 15 40#
             "expl:Ensures clause"
             (Uint8.(<>)
             (select unsigned_charP_unsigned_charM_start_4
             (downcast voidP_start_4_tag_table result unsigned_charP_tag))
             value_0))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 31 15 72#
            "expl:Ensures clause"
            (forall j_0 : (pointer voidP).
             (((same_block start_1 j_0) /\
              (((<=) (sub_pointer start_1 j_0) (0)) /\
              ((same_block j_0
               (downcast voidP_start_4_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer j_0
              (downcast voidP_start_4_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 j_0)
              value_0))))))))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 26 12 56#
          "expl:Ensures clause"
          ((=) result
          (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
          unsigned_charP_unsigned_charM_start_4)))))) }
  
end

module Function_check_bytes8_0_safe

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  val check_bytes8_0
  (start_1 : (pointer voidP)) 
   (value_0 : Uint8.t) 
    (bytes_0 : Uint32.t) 
     (voidP_start_4_alloc_table : (alloc_table voidP)) 
      (voidP_start_4_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_start_4 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 24 13 39#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
           (((<=) (offset_min voidP_start_4_alloc_table start_1) (0)) /\
           (((>=) (offset_max voidP_start_4_alloc_table start_1)
            (Int.(-) (Uint32.to_int bytes_0) (1)))
           /\
           (forall __framac_tmp3 : int.
            ((((<=) (0) __framac_tmp3) /\
             ((<=) __framac_tmp3 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
             ((=) true true))))) else ((=) true true)))) }
        ensures {
          (((allocated voidP_start_4_alloc_table result) ->
            ((instanceof voidP_start_4_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_start_4_alloc_table result) i) /\
              ((<) i (offset_max voidP_start_4_alloc_table result))) ->
              (instanceof voidP_start_4_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_2 : (pointer voidP).
             (((same_block start_1 i_2) /\
              (((<=) (sub_pointer start_1 i_2) (0)) /\
              ((same_block i_2 (shift start_1 (Uint32.to_int bytes_0))) /\
              ((<) (sub_pointer i_2 (shift start_1 (Uint32.to_int bytes_0)))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 i_2)
              value_0))) ->
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 34 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          (((exists i_3 : (pointer voidP).
             ((same_block start_1 i_3) /\
             (((<=) (sub_pointer start_1 i_3) (0)) /\
             ((same_block i_3 (shift start_1 (Uint32.to_int bytes_0))) /\
             (((<) (sub_pointer i_3 (shift start_1 (Uint32.to_int bytes_0)))
              (0))
             /\
             (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_4 i_3)
             value_0)))))) ->
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             (same_block start_1
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             ((<=)
             (sub_pointer start_1
             (downcast voidP_start_4_tag_table result unsigned_charP_tag))
             (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             (same_block
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             ((<)
             (sub_pointer
             (downcast voidP_start_4_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))) (0)))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/check_bytes8.h" 30 15 40#
             "expl:Ensures clause"
             (Uint8.(<>)
             (select unsigned_charP_unsigned_charM_start_4
             (downcast voidP_start_4_tag_table result unsigned_charP_tag))
             value_0))
            /\
            (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 31 15 72#
            "expl:Ensures clause"
            (forall j_0 : (pointer voidP).
             (((same_block start_1 j_0) /\
              (((<=) (sub_pointer start_1 j_0) (0)) /\
              ((same_block j_0
               (downcast voidP_start_4_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer j_0
              (downcast voidP_start_4_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_4 j_0)
              value_0))))))))))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/check_bytes8.h" 26 12 56#
          "expl:Ensures clause"
          ((=) result
          (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
          unsigned_charP_unsigned_charM_start_4)))))) }
  
end

module Function_memchr

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val memchr
  (s_1 : (pointer voidP)) 
   (c_11 : Int32.t) 
    (n_1 : Uint64.t) 
     (voidP_s_1_6_alloc_table : (alloc_table voidP)) 
      (voidP_s_1_6_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_s_1_6_alloc_table result) ->
            ((instanceof voidP_s_1_6_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_1_6_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_1_6_alloc_table result))) ->
              (instanceof voidP_s_1_6_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p)
               (0))
              /\
              ((same_block p
               (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
               (Uint64.to_int n_1)))
              /\
              ((<)
              (sub_pointer p
              (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
              (Uint64.to_int n_1))) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p)
              (#"whole_program.jc" 357 35 51# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))) ->
            (#"/home/work/workspace/self/verker-gh/memchr.h" 26 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_0)
            /\
            (((<=)
             (sub_pointer
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_0)
             (0))
            /\
            ((same_block p_0
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Uint64.to_int n_1)))
            /\
            (((<)
             (sub_pointer p_0
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Uint64.to_int n_1))) (0))
            /\
            (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_6 p_0)
            (#"whole_program.jc" 323 37 53# "expl:Integer cast"
            (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))) ->
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
            "expl:Ensures clause" (same_block s_1 result))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_1 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
            "expl:Ensures clause"
            (same_block result (shift s_1 (Uint64.to_int n_1))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
            "expl:Ensures clause"
            ((<=) (sub_pointer result (shift s_1 (Uint64.to_int n_1))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 22 15 77#
            "expl:Ensures clause"
            (forall p_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_1)
               (0))
              /\
              ((same_block p_1
               (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer p_1
              (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 p_1)
              (#"whole_program.jc" 346 37 62# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 23 15 42#
           "expl:Ensures clause"
           (Bit_uint8.(=)
           (select unsigned_charP_unsigned_charM_s_1_6
           (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
           (#"whole_program.jc" 348 34 59# "expl:Integer cast"
           (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))))))))))))) }
  
end

module Function_memchr_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val memchr
  (s_1 : (pointer voidP)) 
   (c_11 : Int32.t) 
    (n_1 : Uint64.t) 
     (voidP_s_1_6_alloc_table : (alloc_table voidP)) 
      (voidP_s_1_6_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_s_1_6 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 299 12 768# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memchr.h" 16 13 38#
           "expl:Requires clause"
           (instanceof voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
          /\
          (#"/home/work/workspace/self/verker-gh/memchr.h" 17 13 37#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int n_1) (1))) then
           (((<=)
            (offset_min voidP_s_1_6_alloc_table
            (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_s_1_6_alloc_table
            (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag))
            (Int.(-) (Uint64.to_int n_1) (1)))
           /\
           (forall __framac_tmp4 : int.
            ((((<=) (0) __framac_tmp4) /\
             ((<=) __framac_tmp4 (Int.(-) (Uint64.to_int n_1) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        ensures {
          (((allocated voidP_s_1_6_alloc_table result) ->
            ((instanceof voidP_s_1_6_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_1_6_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_1_6_alloc_table result))) ->
              (instanceof voidP_s_1_6_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p)
               (0))
              /\
              ((same_block p
               (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
               (Uint64.to_int n_1)))
              /\
              ((<)
              (sub_pointer p
              (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
              (Uint64.to_int n_1))) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_6 p)
              (#"whole_program.jc" 357 35 51# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))) ->
            (#"/home/work/workspace/self/verker-gh/memchr.h" 26 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_0)
            /\
            (((<=)
             (sub_pointer
             (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_0)
             (0))
            /\
            ((same_block p_0
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Uint64.to_int n_1)))
            /\
            (((<)
             (sub_pointer p_0
             (shift (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag)
             (Uint64.to_int n_1))) (0))
            /\
            (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_6 p_0)
            (#"whole_program.jc" 323 37 53# "expl:Integer cast"
            (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))) ->
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
            "expl:Ensures clause" (same_block s_1 result))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_1 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
            "expl:Ensures clause"
            (same_block result (shift s_1 (Uint64.to_int n_1))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 21 20 36#
            "expl:Ensures clause"
            ((<=) (sub_pointer result (shift s_1 (Uint64.to_int n_1))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/memchr.h" 22 15 77#
            "expl:Ensures clause"
            (forall p_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_6_tag_table s_1 unsigned_charP_tag) p_1)
               (0))
              /\
              ((same_block p_1
               (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer p_1
              (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_6 p_1)
              (#"whole_program.jc" 346 37 62# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11))))))
           /\
           (#"/home/work/workspace/self/verker-gh/memchr.h" 23 15 42#
           "expl:Ensures clause"
           (Bit_uint8.(=)
           (select unsigned_charP_unsigned_charM_s_1_6
           (downcast voidP_s_1_6_tag_table result unsigned_charP_tag))
           (#"whole_program.jc" 348 34 59# "expl:Integer cast"
           (Bit_uint8_of_Bit_int32.cast_modulo c_11)))))))))))))))))) }
  
end

module Function_memcmp

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcmp
  (cs : (pointer voidP)) 
   (ct : (pointer voidP)) 
    (count : Uint64.t) 
     (voidP_ct_9_alloc_table : (alloc_table voidP)) 
      (voidP_cs_8_alloc_table : (alloc_table voidP)) 
       (voidP_ct_9_tag_table : (tag_table voidP)) 
        (voidP_cs_8_tag_table : (tag_table voidP)) 
         (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
          (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t)) :
           Int32.t
           requires { true }
           ensures {
             (((exists i_5 : int.
                (((<=) (0) i_5) /\
                (((<) i_5 (Uint64.to_int count)) /\
                (Uint8.(<>)
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_5))
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_5)))))) ->
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 40 15 241#
               "expl:Ensures clause"
               (exists i_6 : int.
                (((<=) (0) i_6) /\
                (((<) i_6 (Uint64.to_int count)) /\
                ((forall j_1 : int.
                  ((((<=) (0) j_1) /\ ((<) j_1 i_6)) ->
                   (Uint8.(=)
                   (select unsigned_charP_unsigned_charM_cs_8
                   (shift
                   (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) j_1))
                   (select unsigned_charP_unsigned_charM_ct_9
                   (shift
                   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) j_1)))))
                /\
                ((Uint8.(<>)
                 (select unsigned_charP_unsigned_charM_cs_8
                 (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                 i_6))
                 (select unsigned_charP_unsigned_charM_ct_9
                 (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                 i_6)))
                /\
                ((=) (Int32.to_int result)
                (Int.(-)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_6)))
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_6))))))))))))
             /\
             ((forall i_7 : int.
               ((((<=) (0) i_7) /\ ((<) i_7 (Uint64.to_int count))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_7))
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_7))))) ->
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 37 15 27#
              "expl:Ensures clause"
              (Int32.(=) result (#"whole_program.jc" 534 32 44#
              "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_memcmp_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcmp
  (cs : (pointer voidP)) 
   (ct : (pointer voidP)) 
    (count : Uint64.t) 
     (voidP_ct_9_alloc_table : (alloc_table voidP)) 
      (voidP_cs_8_alloc_table : (alloc_table voidP)) 
       (voidP_ct_9_tag_table : (tag_table voidP)) 
        (voidP_cs_8_tag_table : (tag_table voidP)) 
         (unsigned_charP_unsigned_charM_ct_9 : (memory voidP Uint8.t)) 
          (unsigned_charP_unsigned_charM_cs_8 : (memory voidP Uint8.t)) :
           Int32.t
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 494 12 2275# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 25 13 39#
              "expl:Requires clause"
              (instanceof voidP_cs_8_tag_table cs unsigned_charP_tag))
             /\
             (#"whole_program.jc" 494 12 2275# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 26 13 39#
              "expl:Requires clause"
              (instanceof voidP_ct_9_tag_table ct unsigned_charP_tag))
             /\
             (#"whole_program.jc" 494 12 2275# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 27 13 44#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
               (((<=)
                (offset_min voidP_cs_8_alloc_table
                (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_cs_8_alloc_table
                (downcast voidP_cs_8_tag_table cs unsigned_charP_tag))
                (Int.(-) (Uint64.to_int count) (1)))
               /\
               (forall __framac_tmp5 : int.
                ((((<=) (0) __framac_tmp5) /\
                 ((<=) __framac_tmp5 (Int.(-) (Uint64.to_int count) (1)))) ->
                 ((=) true true))))) else ((=) true true)))
             /\
             (#"whole_program.jc" 494 12 2275# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcmp.c" 28 13 44#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
               (((<=)
                (offset_min voidP_ct_9_alloc_table
                (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_ct_9_alloc_table
                (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
                (Int.(-) (Uint64.to_int count) (1)))
               /\
               (forall __framac_tmp6 : int.
                ((((<=) (0) __framac_tmp6) /\
                 ((<=) __framac_tmp6 (Int.(-) (Uint64.to_int count) (1)))) ->
                 ((=) true true))))) else ((=) true true)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcmp.c" 29 13 118#
             "expl:Requires clause"
             (((same_block
               (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
               (downcast voidP_ct_9_tag_table ct unsigned_charP_tag))
              /\
              (not
              (not
              (same_block
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))
             \/
             ((not
              (same_block
              (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
              (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))
             /\
             (not
             (same_block
             (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
             (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)))))))))))))))
             }
           ensures {
             (((exists i_5 : int.
                (((<=) (0) i_5) /\
                (((<) i_5 (Uint64.to_int count)) /\
                (Uint8.(<>)
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_5))
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_5)))))) ->
               (#"/home/work/workspace/self/verker-gh/memcmp.c" 40 15 241#
               "expl:Ensures clause"
               (exists i_6 : int.
                (((<=) (0) i_6) /\
                (((<) i_6 (Uint64.to_int count)) /\
                ((forall j_1 : int.
                  ((((<=) (0) j_1) /\ ((<) j_1 i_6)) ->
                   (Uint8.(=)
                   (select unsigned_charP_unsigned_charM_cs_8
                   (shift
                   (downcast voidP_cs_8_tag_table cs unsigned_charP_tag) j_1))
                   (select unsigned_charP_unsigned_charM_ct_9
                   (shift
                   (downcast voidP_ct_9_tag_table ct unsigned_charP_tag) j_1)))))
                /\
                ((Uint8.(<>)
                 (select unsigned_charP_unsigned_charM_cs_8
                 (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                 i_6))
                 (select unsigned_charP_unsigned_charM_ct_9
                 (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                 i_6)))
                /\
                ((=) (Int32.to_int result)
                (Int.(-)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_6)))
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_6))))))))))))
             /\
             ((forall i_7 : int.
               ((((<=) (0) i_7) /\ ((<) i_7 (Uint64.to_int count))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_8
                (shift (downcast voidP_cs_8_tag_table cs unsigned_charP_tag)
                i_7))
                (select unsigned_charP_unsigned_charM_ct_9
                (shift (downcast voidP_ct_9_tag_table ct unsigned_charP_tag)
                i_7))))) ->
              (#"/home/work/workspace/self/verker-gh/memcmp.c" 37 15 27#
              "expl:Ensures clause"
              (Int32.(=) result (#"whole_program.jc" 534 32 44#
              "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_memscan

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memscan
  (addr : (pointer voidP)) 
   (c_12 : Int32.t) 
    (size_2 : Uint64.t) 
     (voidP_addr_10_alloc_table : (alloc_table voidP)) 
      (voidP_addr_10_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_addr_10 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_addr_10_alloc_table result) ->
            ((instanceof voidP_addr_10_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_addr_10_alloc_table result) i) /\
              ((<) i (offset_max voidP_addr_10_alloc_table result))) ->
              (instanceof voidP_addr_10_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_9 : int.
             ((((<=) (0) i_9) /\ ((<) i_9 (Uint64.to_int size_2))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_9)))
              (Int32.to_int c_12)))) ->
            (#"/home/work/workspace/self/verker-gh/memscan.h" 29 15 37#
            "expl:Ensures clause"
            ((=) result (shift addr (Uint64.to_int size_2)))))
          /\
          (((exists i_10 : int.
             (((<=) (0) i_10) /\
             (((<) i_10 (Uint64.to_int size_2)) /\
             ((=)
             (Uint8.to_int
             (select unsigned_charP_unsigned_charM_addr_10
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_10)))
             (Int32.to_int c_12))))) ->
            (#"/home/work/workspace/self/verker-gh/memscan.h" 23 15 199#
            "expl:Ensures clause"
            (exists i_11 : int.
             (((<=) (0) i_11) /\
             (((<) i_11 (Uint64.to_int size_2)) /\
             ((forall j_2 : int.
               ((((<=) (0) j_2) /\ ((<) j_2 i_11)) ->
                ((<>)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_addr_10
                (shift
                (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
                j_2))) (Int32.to_int c_12))))
             /\
             (((=)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12))
             /\ ((=) result (shift addr i_11)))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
           "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
           "expl:Ensures clause"
           (same_block result (shift addr (Uint64.to_int size_2))))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
          "expl:Ensures clause"
          ((<=) (sub_pointer result (shift addr (Uint64.to_int size_2))) (0)))))))))))))))
          }
  
end

module Function_memscan_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memscan
  (addr : (pointer voidP)) 
   (c_12 : Int32.t) 
    (size_2 : Uint64.t) 
     (voidP_addr_10_alloc_table : (alloc_table voidP)) 
      (voidP_addr_10_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_addr_10 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 655 12 781# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 16 13 41#
           "expl:Requires clause"
           (instanceof voidP_addr_10_tag_table addr unsigned_charP_tag))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 17 13 43#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
           (((<=)
            (offset_min voidP_addr_10_alloc_table
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_addr_10_alloc_table
            (downcast voidP_addr_10_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int size_2) (1)))
           /\
           (forall __framac_tmp7 : int.
            ((((<=) (0) __framac_tmp7) /\
             ((<=) __framac_tmp7 (Int.(-) (Uint64.to_int size_2) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        ensures {
          (((allocated voidP_addr_10_alloc_table result) ->
            ((instanceof voidP_addr_10_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_addr_10_alloc_table result) i) /\
              ((<) i (offset_max voidP_addr_10_alloc_table result))) ->
              (instanceof voidP_addr_10_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_9 : int.
             ((((<=) (0) i_9) /\ ((<) i_9 (Uint64.to_int size_2))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_9)))
              (Int32.to_int c_12)))) ->
            (#"/home/work/workspace/self/verker-gh/memscan.h" 29 15 37#
            "expl:Ensures clause"
            ((=) result (shift addr (Uint64.to_int size_2)))))
          /\
          (((exists i_10 : int.
             (((<=) (0) i_10) /\
             (((<) i_10 (Uint64.to_int size_2)) /\
             ((=)
             (Uint8.to_int
             (select unsigned_charP_unsigned_charM_addr_10
             (shift
             (downcast voidP_addr_10_tag_table addr unsigned_charP_tag) i_10)))
             (Int32.to_int c_12))))) ->
            (#"/home/work/workspace/self/verker-gh/memscan.h" 23 15 199#
            "expl:Ensures clause"
            (exists i_11 : int.
             (((<=) (0) i_11) /\
             (((<) i_11 (Uint64.to_int size_2)) /\
             ((forall j_2 : int.
               ((((<=) (0) j_2) /\ ((<) j_2 i_11)) ->
                ((<>)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_addr_10
                (shift
                (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
                j_2))) (Int32.to_int c_12))))
             /\
             (((=)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_10
              (shift
              (downcast voidP_addr_10_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12))
             /\ ((=) result (shift addr i_11)))))))))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 12 27#
           "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
           "expl:Ensures clause"
           (same_block result (shift addr (Uint64.to_int size_2))))
          /\
          (#"/home/work/workspace/self/verker-gh/memscan.h" 20 20 42#
          "expl:Ensures clause"
          ((<=) (sub_pointer result (shift addr (Uint64.to_int size_2))) (0)))))))))))))))
          }
  
end

module Function_isalnum_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalnum_0
  (c_2_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 77 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalnum (Int8.to_int c_2_0)))) }
  
end

module Function_isalnum_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalnum_0
  (c_2_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 77 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalnum (Int8.to_int c_2_0)))) }
  
end

module Function_isalpha_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalpha_0
  (c_3_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 79 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalpha (Int8.to_int c_3_0)))) }
  
end

module Function_isalpha_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalpha_0
  (c_3_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 79 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalpha (Int8.to_int c_3_0)))) }
  
end

module Function_islower_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val islower_0
  (c_6_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 83 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (islower (Int8.to_int c_6_0)))) }
  
end

module Function_islower_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val islower_0
  (c_6_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 83 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (islower (Int8.to_int c_6_0)))) }
  
end

module Function_isupper_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isupper_0
  (c_9 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 89 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <-> (isupper (Int8.to_int c_9))))
     }
  
end

module Function_isupper_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isupper_0
  (c_9 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 89 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <-> (isupper (Int8.to_int c_9))))
     }
  
end

module Function_isascii

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val isascii
  (c_4_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 94 12 40#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     ((Int8.(<=) (#"whole_program.jc" 990 24 35# "expl:Integer cast"
      (Int8.of_int (0))) c_4_0)
     /\
     (Int8.(<=) c_4_0 (#"whole_program.jc" 991 41 54# "expl:Integer cast"
     (Int8.of_int (127))))))) }
  
end

module Function_isascii_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val isascii
  (c_4_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 94 12 40#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     ((Int8.(<=) (#"whole_program.jc" 990 24 35# "expl:Integer cast"
      (Int8.of_int (0))) c_4_0)
     /\
     (Int8.(<=) c_4_0 (#"whole_program.jc" 991 41 54# "expl:Integer cast"
     (Int8.of_int (127))))))) }
  
end

module Function_isdigit_0

  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isdigit_0
  (c_5_0 : Int32.t) : Int32.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 99 12 35#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isdigit (Int32.to_int c_5_0)))) }
  
end

module Function_isdigit_0_safe

  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isdigit_0
  (c_5_0 : Int32.t) : Int32.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 99 12 35#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isdigit (Int32.to_int c_5_0)))) }
  
end

module Function___tolower

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __tolower
  (c_13 : Uint8.t) : Uint8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 102 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (tolower (Uint8.to_int c_13)))) }
  
end

module Function___tolower_safe

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __tolower
  (c_13 : Uint8.t) : Uint8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 102 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (tolower (Uint8.to_int c_13)))) }
  
end

module Function___toupper

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __toupper
  (c_0_0 : Uint8.t) : Uint8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 105 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (toupper (Uint8.to_int c_0_0)))) }
  
end

module Function___toupper_safe

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __toupper
  (c_0_0 : Uint8.t) : Uint8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 105 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (toupper (Uint8.to_int c_0_0)))) }
  
end

module Function_toupper_0

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val toupper_0
  (c_19 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 114 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (toupper (Int8.to_int c_19)))) }
  
end

module Function_toupper_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val toupper_0
  (c_19 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 114 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (toupper (Int8.to_int c_19)))) }
  
end

module Function_isodigit_0

  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isodigit_0
  (c_7_0 : Int8.t) : Int32.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 126 12 36#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isodigit (Int8.to_int c_7_0)))) }
  
end

module Function_isodigit_0_safe

  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isodigit_0
  (c_7_0 : Int8.t) : Int32.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker-gh/ctype.h" 126 12 36#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isodigit (Int8.to_int c_7_0)))) }
  
end

module Function_skip_spaces_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val skip_spaces_0
  (str_0 : (pointer voidP)) 
   (voidP_str_16_alloc_table : (alloc_table voidP)) 
    (voidP_str_16_tag_table : (tag_table voidP)) 
     (charP_charM_str_16 : (memory voidP Int8.t)) : (pointer voidP)
      requires { true }
      ensures {
        (((allocated voidP_str_16_alloc_table result) ->
          (((=) (typeof voidP_str_16_tag_table result) charP_tag) /\
          (forall i : int.
           ((((<=) (offset_min voidP_str_16_alloc_table result) i) /\
            ((<) i (offset_max voidP_str_16_alloc_table result))) ->
            ((=) (typeof voidP_str_16_tag_table (shift result i)) charP_tag)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
         "expl:Ensures clause" ((=) result (skip_spaces str_0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 55 12 50#
         "expl:Ensures clause" (same_block result str_0))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" (same_block str_0 result))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         (same_block result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16))))
         (0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 57 12 30#
         "expl:Ensures clause"
         (not (isspace (Int8.to_int (select charP_charM_str_16 result)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 58 12 63#
         "expl:Ensures clause"
         (forall p_3_0 : (pointer voidP).
          (((same_block str_0 p_3_0) /\
           (((<=) (sub_pointer str_0 p_3_0) (0)) /\
           ((same_block p_3_0 result) /\
           ((<) (sub_pointer p_3_0 result) (0))))) ->
           (isspace (Int8.to_int (select charP_charM_str_16 p_3_0))))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 59 12 30#
        "expl:Ensures clause"
        (valid_str result voidP_str_16_alloc_table charP_charM_str_16))))))))))))))))))))
        }
  
end

module Function_skip_spaces_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val skip_spaces_0
  (str_0 : (pointer voidP)) 
   (voidP_str_16_alloc_table : (alloc_table voidP)) 
    (voidP_str_16_tag_table : (tag_table voidP)) 
     (charP_charM_str_16 : (memory voidP Int8.t)) : (pointer voidP)
      requires {
        ("expl:Internal"
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 52 13 27#
        "expl:Requires clause"
        (valid_str str_0 voidP_str_16_alloc_table charP_charM_str_16))) }
      ensures {
        (((allocated voidP_str_16_alloc_table result) ->
          (((=) (typeof voidP_str_16_tag_table result) charP_tag) /\
          (forall i : int.
           ((((<=) (offset_min voidP_str_16_alloc_table result) i) /\
            ((<) i (offset_max voidP_str_16_alloc_table result))) ->
            ((=) (typeof voidP_str_16_tag_table (shift result i)) charP_tag)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
         "expl:Ensures clause" ((=) result (skip_spaces str_0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 55 12 50#
         "expl:Ensures clause" (same_block result str_0))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" (same_block str_0 result))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         (same_block result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_16))))
         (0)))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 57 12 30#
         "expl:Ensures clause"
         (not (isspace (Int8.to_int (select charP_charM_str_16 result)))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker-gh/skip_spaces.h" 58 12 63#
         "expl:Ensures clause"
         (forall p_3_0 : (pointer voidP).
          (((same_block str_0 p_3_0) /\
           (((<=) (sub_pointer str_0 p_3_0) (0)) /\
           ((same_block p_3_0 result) /\
           ((<) (sub_pointer p_3_0 result) (0))))) ->
           (isspace (Int8.to_int (select charP_charM_str_16 p_3_0))))))
        /\
        (#"/home/work/workspace/self/verker-gh/skip_spaces.h" 59 12 30#
        "expl:Ensures clause"
        (valid_str result voidP_str_16_alloc_table charP_charM_str_16))))))))))))))))))))
        }
  
end

module Function_strcasecmp

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val strcasecmp
  (s1 : (pointer voidP)) 
   (s2 : (pointer voidP)) 
    (voidP_s2_19_alloc_table : (alloc_table voidP)) 
     (voidP_s1_18_alloc_table : (alloc_table voidP)) 
      (voidP_s2_19_tag_table : (tag_table voidP)) 
       (voidP_s1_18_tag_table : (tag_table voidP)) 
        (charP_charM_s2_19 : (memory voidP Int8.t)) 
         (charP_charM_s1_18 : (memory voidP Int8.t)) : Int32.t
          requires { true }
          ensures {
            (((exists i_22 : int.
               (((<=) (0) i_22) /\
               (((<=) i_22 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
               ((<>)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_22))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_22))))))))
              ->
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
               "expl:Ensures clause"
               (Int32.(<>) result (#"whole_program.jc" 1285 43 55#
               "expl:Integer cast" (Int32.of_int (0)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 17 15 253#
              "expl:Ensures clause"
              (exists i_23 : int.
               (((<=) (0) i_23) /\
               (((<=) i_23 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
               ((forall j_5 : int.
                 ((((<=) (0) j_5) /\ ((<) j_5 i_23)) ->
                  ((=)
                  (tolower
                  (Int8.to_int (select charP_charM_s1_18 (shift s1 j_5))))
                  (tolower
                  (Int8.to_int (select charP_charM_s2_19 (shift s2 j_5)))))))
               /\
               (((<>)
                (tolower
                (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
                (tolower
                (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23)))))
               /\
               ((=) (Int32.to_int result)
               (Int.(-)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23))))))))))))))))
            /\
            ((forall i_24 : int.
              ((((<=) (0) i_24) /\
               ((<=) i_24 (Uint64.to_int (strlen s1 charP_charM_s1_18)))) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_24))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_24)))))))
             ->
             (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 13 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 1279 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcasecmp_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val strcasecmp
  (s1 : (pointer voidP)) 
   (s2 : (pointer voidP)) 
    (voidP_s2_19_alloc_table : (alloc_table voidP)) 
     (voidP_s1_18_alloc_table : (alloc_table voidP)) 
      (voidP_s2_19_tag_table : (tag_table voidP)) 
       (voidP_s1_18_tag_table : (tag_table voidP)) 
        (charP_charM_s2_19 : (memory voidP Int8.t)) 
         (charP_charM_s1_18 : (memory voidP Int8.t)) : Int32.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 1270 12 76# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 8 13 26#
             "expl:Requires clause"
             (valid_str s1 voidP_s1_18_alloc_table charP_charM_s1_18))
            /\
            (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 9 13 26#
            "expl:Requires clause"
            (valid_str s2 voidP_s2_19_alloc_table charP_charM_s2_19))))) }
          ensures {
            (((exists i_22 : int.
               (((<=) (0) i_22) /\
               (((<=) i_22 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
               ((<>)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_22))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_22))))))))
              ->
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strcasecmp.h" 16 15 27#
               "expl:Ensures clause"
               (Int32.(<>) result (#"whole_program.jc" 1285 43 55#
               "expl:Integer cast" (Int32.of_int (0)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 17 15 253#
              "expl:Ensures clause"
              (exists i_23 : int.
               (((<=) (0) i_23) /\
               (((<=) i_23 (Uint64.to_int (strlen s1 charP_charM_s1_18))) /\
               ((forall j_5 : int.
                 ((((<=) (0) j_5) /\ ((<) j_5 i_23)) ->
                  ((=)
                  (tolower
                  (Int8.to_int (select charP_charM_s1_18 (shift s1 j_5))))
                  (tolower
                  (Int8.to_int (select charP_charM_s2_19 (shift s2 j_5)))))))
               /\
               (((<>)
                (tolower
                (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
                (tolower
                (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23)))))
               /\
               ((=) (Int32.to_int result)
               (Int.(-)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_23))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_23))))))))))))))))
            /\
            ((forall i_24 : int.
              ((((<=) (0) i_24) /\
               ((<=) i_24 (Uint64.to_int (strlen s1 charP_charM_s1_18)))) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_18 (shift s1 i_24))))
               (tolower
               (Int8.to_int (select charP_charM_s2_19 (shift s2 i_24)))))))
             ->
             (#"/home/work/workspace/self/verker-gh/strcasecmp.h" 13 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 1279 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcat

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcat
  (dest_8 : (pointer voidP)) 
   (src_5 : (pointer voidP)) 
    (charP_charM_dest_8_20 : ref (memory voidP Int8.t)) 
     (voidP_src_5_21_alloc_table : (alloc_table voidP)) 
      (voidP_dest_8_20_alloc_table : (alloc_table voidP)) 
       (voidP_src_5_21_tag_table : (tag_table voidP)) 
        (voidP_dest_8_20_tag_table : (tag_table voidP)) 
         (charP_charM_src_5_21 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true } reads { charP_charM_dest_8_20 } writes {
          charP_charM_dest_8_20 }
          ensures {
            (((allocated voidP_dest_8_20_alloc_table result) ->
              (((=) (typeof voidP_dest_8_20_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_8_20_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_8_20_alloc_table result))) ->
                ((=) (typeof voidP_dest_8_20_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 1469 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_8_20_alloc_table
             voidP_dest_8_20_alloc_table (old !charP_charM_dest_8_20)
             !charP_charM_dest_8_20
             (pset_range (pset_singleton dest_8)
             (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
             (Int.(+)
             (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_8))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 18 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_8_20_alloc_table
             !charP_charM_dest_8_20))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 19 12 107#
             "expl:Ensures clause"
             (forall i_27 : int.
              ((((<=) (0) i_27) /\
               ((<) i_27
               (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))))
               ->
               (Int8.(=)
               (select (old !charP_charM_dest_8_20) (shift dest_8 i_27))
               (select !charP_charM_dest_8_20 (shift result i_27))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 21 12 156#
            "expl:Ensures clause"
            (forall i_28 : int.
             ((((<=)
               (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
               i_28)
              /\
              ((<) i_28
              (Int.(+)
              (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
              (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
              (Int8.(=)
              (select charP_charM_src_5_21
              (shift src_5
              (Int.(-) i_28
              (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20))))))
              (select !charP_charM_dest_8_20 (shift result i_28)))))))))))))))
            }
  
end

module Function_strcat_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcat
  (dest_8 : (pointer voidP)) 
   (src_5 : (pointer voidP)) 
    (charP_charM_dest_8_20 : ref (memory voidP Int8.t)) 
     (voidP_src_5_21_alloc_table : (alloc_table voidP)) 
      (voidP_dest_8_20_alloc_table : (alloc_table voidP)) 
       (voidP_src_5_21_tag_table : (tag_table voidP)) 
        (voidP_dest_8_20_tag_table : (tag_table voidP)) 
         (charP_charM_src_5_21 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 1449 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 12 13 27#
             "expl:Requires clause"
             (valid_str src_5 voidP_src_5_21_alloc_table
             charP_charM_src_5_21))
            /\
            (#"whole_program.jc" 1449 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 13 13 28#
             "expl:Requires clause"
             (valid_str dest_8 voidP_dest_8_20_alloc_table
             !charP_charM_dest_8_20))
            /\
            (#"whole_program.jc" 1449 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 14 13 63#
             "expl:Requires clause"
             ((<=)
             (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))
             (18446744073709551615)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 15 13 55#
            "expl:Requires clause"
            (if
             ((<=) (0)
             (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_21)))) then
             (((<=) (offset_min voidP_dest_8_20_alloc_table dest_8) (0)) /\
             (((>=) (offset_max voidP_dest_8_20_alloc_table dest_8)
              (Int.(+) (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
              (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))
             /\
             (forall __framac_tmp12 : int.
              ((((<=) (0) __framac_tmp12) /\
               ((<=) __framac_tmp12
               (Int.(+)
               (Uint64.to_int (strlen dest_8 !charP_charM_dest_8_20))
               (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
               ((=) true true))))) else ((=) true true)))))))))) }
          reads { charP_charM_dest_8_20 } writes { charP_charM_dest_8_20 }
          ensures {
            (((allocated voidP_dest_8_20_alloc_table result) ->
              (((=) (typeof voidP_dest_8_20_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_8_20_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_8_20_alloc_table result))) ->
                ((=) (typeof voidP_dest_8_20_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 1469 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_8_20_alloc_table
             voidP_dest_8_20_alloc_table (old !charP_charM_dest_8_20)
             !charP_charM_dest_8_20
             (pset_range (pset_singleton dest_8)
             (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
             (Int.(+)
             (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_8))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 18 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_8_20_alloc_table
             !charP_charM_dest_8_20))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 17 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcat.h" 19 12 107#
             "expl:Ensures clause"
             (forall i_27 : int.
              ((((<=) (0) i_27) /\
               ((<) i_27
               (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))))
               ->
               (Int8.(=)
               (select (old !charP_charM_dest_8_20) (shift dest_8 i_27))
               (select !charP_charM_dest_8_20 (shift result i_27))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcat.h" 21 12 156#
            "expl:Ensures clause"
            (forall i_28 : int.
             ((((<=)
               (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
               i_28)
              /\
              ((<) i_28
              (Int.(+)
              (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20)))
              (Uint64.to_int (strlen src_5 charP_charM_src_5_21))))) ->
              (Int8.(=)
              (select charP_charM_src_5_21
              (shift src_5
              (Int.(-) i_28
              (Uint64.to_int (strlen dest_8 (old !charP_charM_dest_8_20))))))
              (select !charP_charM_dest_8_20 (shift result i_28)))))))))))))))
            }
  
end

module Function_strchr_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  val strchr_0
  (s_3 : (pointer voidP)) 
   (c_14 : Int32.t) 
    (voidP_s_3_25_alloc_table : (alloc_table voidP)) 
     (voidP_s_3_25_tag_table : (tag_table voidP)) 
      (charP_charM_s_3_25 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_3_25_alloc_table result) ->
           (((=) (typeof voidP_s_3_25_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_3_25_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_3_25_alloc_table result))) ->
             ((=) (typeof voidP_s_3_25_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists p_5 : (pointer voidP).
            ((same_block s_3 p_5) /\
            (((<=) (sub_pointer s_3 p_5) (0)) /\
            ((same_block p_5
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
            /\
            (((<=)
             (sub_pointer p_5
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_3_25 p_5)
            (#"whole_program.jc" 1776 28 43# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))) ->
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
            "expl:Ensures clause" (same_block s_3 result))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_3 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
            "expl:Ensures clause"
            (same_block result
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 62 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_3_25 result)
            (#"whole_program.jc" 1787 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 63 15 69#
           "expl:Ensures clause"
           (forall p_6 : (pointer voidP).
            (((same_block s_3 p_6) /\
             (((<=) (sub_pointer s_3 p_6) (0)) /\
             ((same_block p_6 result) /\ ((<) (sub_pointer p_6 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_3_25 p_6)
             (#"whole_program.jc" 1795 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))))))))))
         /\
         (((forall p_7 : (pointer voidP).
            (((same_block s_3 p_7) /\
             (((<=) (sub_pointer s_3 p_7) (0)) /\
             ((same_block p_7
              (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             /\
             ((<=)
             (sub_pointer p_7
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_25 p_7)
             (#"whole_program.jc" 1768 28 43# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))) ->
           (#"/home/work/workspace/self/verker-gh/strchr.h" 58 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchr.h" 55 12 44#
         "expl:Ensures clause"
         ((=) result
         (strchr s_3 (#"whole_program.jc" 1761 49 73# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))))) }
  
end

module Function_strchr_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  val strchr_0
  (s_3 : (pointer voidP)) 
   (c_14 : Int32.t) 
    (voidP_s_3_25_alloc_table : (alloc_table voidP)) 
     (voidP_s_3_25_tag_table : (tag_table voidP)) 
      (charP_charM_s_3_25 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker-gh/strchr.h" 53 13 25#
         "expl:Requires clause"
         (valid_str s_3 voidP_s_3_25_alloc_table charP_charM_s_3_25))) }
       ensures {
         (((allocated voidP_s_3_25_alloc_table result) ->
           (((=) (typeof voidP_s_3_25_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_3_25_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_3_25_alloc_table result))) ->
             ((=) (typeof voidP_s_3_25_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists p_5 : (pointer voidP).
            ((same_block s_3 p_5) /\
            (((<=) (sub_pointer s_3 p_5) (0)) /\
            ((same_block p_5
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
            /\
            (((<=)
             (sub_pointer p_5
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_3_25 p_5)
            (#"whole_program.jc" 1776 28 43# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))) ->
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
            "expl:Ensures clause" (same_block s_3 result))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_3 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
            "expl:Ensures clause"
            (same_block result
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 61 20 44#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25)))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchr.h" 62 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_3_25 result)
            (#"whole_program.jc" 1787 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchr.h" 63 15 69#
           "expl:Ensures clause"
           (forall p_6 : (pointer voidP).
            (((same_block s_3 p_6) /\
             (((<=) (sub_pointer s_3 p_6) (0)) /\
             ((same_block p_6 result) /\ ((<) (sub_pointer p_6 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_3_25 p_6)
             (#"whole_program.jc" 1795 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))))))))))
         /\
         (((forall p_7 : (pointer voidP).
            (((same_block s_3 p_7) /\
             (((<=) (sub_pointer s_3 p_7) (0)) /\
             ((same_block p_7
              (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             /\
             ((<=)
             (sub_pointer p_7
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_3_25))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_25 p_7)
             (#"whole_program.jc" 1768 28 43# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))) ->
           (#"/home/work/workspace/self/verker-gh/strchr.h" 58 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchr.h" 55 12 44#
         "expl:Ensures clause"
         ((=) result
         (strchr s_3 (#"whole_program.jc" 1761 49 73# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_25)))))) }
  
end

module Function_strchrnul

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnull 
  
  use why3.Bool.Bool 
  
  val strchrnul
  (s_4 : (pointer voidP)) 
   (c_15 : Int32.t) 
    (voidP_s_4_29_alloc_table : (alloc_table voidP)) 
     (voidP_s_4_29_tag_table : (tag_table voidP)) 
      (charP_charM_s_4_29 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_4_29_alloc_table result) ->
           (((=) (typeof voidP_s_4_29_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_4_29_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_4_29_alloc_table result))) ->
             ((=) (typeof voidP_s_4_29_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists i_33 : int.
            (((<=) (0) i_33) /\
            (((<) i_33 (Uint64.to_int (strlen s_4 charP_charM_s_4_29))) /\
            (Bit_int8.(=) (select charP_charM_s_4_29 (shift s_4 i_33))
            (#"whole_program.jc" 2032 37 52# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15)))))) ->
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_4_29 result)
            (#"whole_program.jc" 2033 49 73# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 66 15 69#
           "expl:Ensures clause"
           (forall p_9 : (pointer voidP).
            (((same_block s_4 p_9) /\
             (((<=) (sub_pointer s_4 p_9) (0)) /\
             ((same_block p_9 result) /\ ((<) (sub_pointer p_9 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 p_9)
             (#"whole_program.jc" 2041 50 74# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))))
         /\
         (((forall i_34 : int.
            ((((<=) (0) i_34) /\
             ((<) i_34 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 (shift s_4 i_34))
             (#"whole_program.jc" 2024 37 52# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))) ->
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
            "expl:Ensures clause"
            ((=) result
            (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 62 15 31#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_4_29 result)
           (#"whole_program.jc" 2028 50 61# "expl:Integer cast"
           (Bit_int8.of_int_const 0))))))))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
          "expl:Ensures clause" (same_block result s_4))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 57 12 48#
          "expl:Ensures clause"
          ((=) result
          (strchrnull s_4 (#"whole_program.jc" 2010 52 76#
          "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
          charP_charM_s_4_29)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
          "expl:Ensures clause" (same_block s_4 result))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
          "expl:Ensures clause" ((<=) (sub_pointer s_4 result) (0)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
          "expl:Ensures clause"
          (same_block result
          (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) (0)))))))))))))))))
         }
  
end

module Function_strchrnul_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnull 
  
  use why3.Bool.Bool 
  
  val strchrnul
  (s_4 : (pointer voidP)) 
   (c_15 : Int32.t) 
    (voidP_s_4_29_alloc_table : (alloc_table voidP)) 
     (voidP_s_4_29_tag_table : (tag_table voidP)) 
      (charP_charM_s_4_29 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 54 13 25#
         "expl:Requires clause"
         (valid_str s_4 voidP_s_4_29_alloc_table charP_charM_s_4_29))) }
       ensures {
         (((allocated voidP_s_4_29_alloc_table result) ->
           (((=) (typeof voidP_s_4_29_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_4_29_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_4_29_alloc_table result))) ->
             ((=) (typeof voidP_s_4_29_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists i_33 : int.
            (((<=) (0) i_33) /\
            (((<) i_33 (Uint64.to_int (strlen s_4 charP_charM_s_4_29))) /\
            (Bit_int8.(=) (select charP_charM_s_4_29 (shift s_4 i_33))
            (#"whole_program.jc" 2032 37 52# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15)))))) ->
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 65 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_4_29 result)
            (#"whole_program.jc" 2033 49 73# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 66 15 69#
           "expl:Ensures clause"
           (forall p_9 : (pointer voidP).
            (((same_block s_4 p_9) /\
             (((<=) (sub_pointer s_4 p_9) (0)) /\
             ((same_block p_9 result) /\ ((<) (sub_pointer p_9 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 p_9)
             (#"whole_program.jc" 2041 50 74# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))))
         /\
         (((forall i_34 : int.
            ((((<=) (0) i_34) /\
             ((<) i_34 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_29 (shift s_4 i_34))
             (#"whole_program.jc" 2024 37 52# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))) ->
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 61 15 39#
            "expl:Ensures clause"
            ((=) result
            (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strchrnul.h" 62 15 31#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_4_29 result)
           (#"whole_program.jc" 2028 50 61# "expl:Integer cast"
           (Bit_int8.of_int_const 0))))))))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
          "expl:Ensures clause" (same_block result s_4))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 57 12 48#
          "expl:Ensures clause"
          ((=) result
          (strchrnull s_4 (#"whole_program.jc" 2010 52 76#
          "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
          charP_charM_s_4_29)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
          "expl:Ensures clause" (same_block s_4 result))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 12 24#
          "expl:Ensures clause" ((<=) (sub_pointer s_4 result) (0)))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
          "expl:Ensures clause"
          (same_block result
          (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))))
         /\
         (#"/home/work/workspace/self/verker-gh/strchrnul.h" 58 17 41#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_29)))) (0)))))))))))))))))
         }
  
end

module Function_strcmp

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcmp
  (cs_0 : (pointer voidP)) 
   (ct_0 : (pointer voidP)) 
    (voidP_ct_0_32_alloc_table : (alloc_table voidP)) 
     (voidP_cs_0_31_alloc_table : (alloc_table voidP)) 
      (voidP_ct_0_32_tag_table : (tag_table voidP)) 
       (voidP_cs_0_31_tag_table : (tag_table voidP)) 
        (charP_charM_ct_0_32 : (memory voidP Int8.t)) 
         (charP_charM_cs_0_31 : (memory voidP Int8.t)) : Int32.t
          requires { true }
          ensures {
            (((exists i_37 : int.
               (((<=) (0) i_37) /\
               (((<=) i_37 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31)))
               /\
               (Bit_uint8.(<>) (#"whole_program.jc" 2145 15 46#
               "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_cs_0_31 (shift cs_0 i_37))))
               (#"whole_program.jc" 2146 16 47# "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_ct_0_32 (shift ct_0 i_37)))))))) ->
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 2147 44 60#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1)))))
               \/
               (Int32.(=) result (#"whole_program.jc" 2148 45 57#
               "expl:Integer cast" (Int32.of_int (1))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 67 15 235#
              "expl:Ensures clause"
              (exists i_38 : int.
               (((<=) (0) i_38) /\
               (((<=) i_38 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31)))
               /\
               ((forall j_9 : int.
                 ((((<=) (0) j_9) /\ ((<) j_9 i_38)) ->
                  (Bit_int8.(=) (select charP_charM_cs_0_31 (shift cs_0 j_9))
                  (select charP_charM_ct_0_32 (shift ct_0 j_9)))))
               /\
               ((Bit_int8.(<>) (select charP_charM_cs_0_31 (shift cs_0 i_38))
                (select charP_charM_ct_0_32 (shift ct_0 i_38)))
               /\
               (if
                (Bit_uint8.(<) (#"whole_program.jc" 2159 41 81#
                "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_cs_0_31 (shift cs_0 i_38))))
                (#"whole_program.jc" 2160 42 82# "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_ct_0_32 (shift ct_0 i_38))))) then
                (Int32.(=) result (#"whole_program.jc" 2162 38 54#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1))))) else
                (Int32.(=) result (#"whole_program.jc" 2163 63 75#
                "expl:Integer cast" (Int32.of_int (1)))))))))))))))
            /\
            ((forall i_39 : int.
              ((((<=) (0) i_39) /\
               ((<=) i_39 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31))))
               ->
               (Bit_uint8.(=) (#"whole_program.jc" 2139 15 46#
               "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_cs_0_31 (shift cs_0 i_39))))
               (#"whole_program.jc" 2140 16 47# "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_ct_0_32 (shift ct_0 i_39))))))) ->
             (#"/home/work/workspace/self/verker-gh/strcmp.h" 63 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 2141 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcmp_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcmp
  (cs_0 : (pointer voidP)) 
   (ct_0 : (pointer voidP)) 
    (voidP_ct_0_32_alloc_table : (alloc_table voidP)) 
     (voidP_cs_0_31_alloc_table : (alloc_table voidP)) 
      (voidP_ct_0_32_tag_table : (tag_table voidP)) 
       (voidP_cs_0_31_tag_table : (tag_table voidP)) 
        (charP_charM_ct_0_32 : (memory voidP Int8.t)) 
         (charP_charM_cs_0_31 : (memory voidP Int8.t)) : Int32.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 2131 12 93# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcmp.h" 57 13 26#
             "expl:Requires clause"
             (valid_str cs_0 voidP_cs_0_31_alloc_table charP_charM_cs_0_31))
            /\
            (#"/home/work/workspace/self/verker-gh/strcmp.h" 58 13 26#
            "expl:Requires clause"
            (valid_str ct_0 voidP_ct_0_32_alloc_table charP_charM_ct_0_32)))))
            }
          ensures {
            (((exists i_37 : int.
               (((<=) (0) i_37) /\
               (((<=) i_37 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31)))
               /\
               (Bit_uint8.(<>) (#"whole_program.jc" 2145 15 46#
               "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_cs_0_31 (shift cs_0 i_37))))
               (#"whole_program.jc" 2146 16 47# "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_ct_0_32 (shift ct_0 i_37)))))))) ->
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strcmp.h" 66 15 44#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 2147 44 60#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1)))))
               \/
               (Int32.(=) result (#"whole_program.jc" 2148 45 57#
               "expl:Integer cast" (Int32.of_int (1))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strcmp.h" 67 15 235#
              "expl:Ensures clause"
              (exists i_38 : int.
               (((<=) (0) i_38) /\
               (((<=) i_38 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31)))
               /\
               ((forall j_9 : int.
                 ((((<=) (0) j_9) /\ ((<) j_9 i_38)) ->
                  (Bit_int8.(=) (select charP_charM_cs_0_31 (shift cs_0 j_9))
                  (select charP_charM_ct_0_32 (shift ct_0 j_9)))))
               /\
               ((Bit_int8.(<>) (select charP_charM_cs_0_31 (shift cs_0 i_38))
                (select charP_charM_ct_0_32 (shift ct_0 i_38)))
               /\
               (if
                (Bit_uint8.(<) (#"whole_program.jc" 2159 41 81#
                "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_cs_0_31 (shift cs_0 i_38))))
                (#"whole_program.jc" 2160 42 82# "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_ct_0_32 (shift ct_0 i_38))))) then
                (Int32.(=) result (#"whole_program.jc" 2162 38 54#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1))))) else
                (Int32.(=) result (#"whole_program.jc" 2163 63 75#
                "expl:Integer cast" (Int32.of_int (1)))))))))))))))
            /\
            ((forall i_39 : int.
              ((((<=) (0) i_39) /\
               ((<=) i_39 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_31))))
               ->
               (Bit_uint8.(=) (#"whole_program.jc" 2139 15 46#
               "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_cs_0_31 (shift cs_0 i_39))))
               (#"whole_program.jc" 2140 16 47# "expl:Integer cast"
               (Bit_uint8_of_Bit_int8.cast_modulo
               (select charP_charM_ct_0_32 (shift ct_0 i_39))))))) ->
             (#"/home/work/workspace/self/verker-gh/strcmp.h" 63 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 2141 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcpy
  (dest_9 : (pointer voidP)) 
   (src_6 : (pointer voidP)) 
    (charP_charM_dest_9_33 : ref (memory voidP Int8.t)) 
     (voidP_src_6_34_alloc_table : (alloc_table voidP)) 
      (voidP_dest_9_33_alloc_table : (alloc_table voidP)) 
       (voidP_src_6_34_tag_table : (tag_table voidP)) 
        (voidP_dest_9_33_tag_table : (tag_table voidP)) 
         (charP_charM_src_6_34 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true } reads { charP_charM_dest_9_33 } writes {
          charP_charM_dest_9_33 }
          ensures {
            (((allocated voidP_dest_9_33_alloc_table result) ->
              (((=) (typeof voidP_dest_9_33_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_9_33_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_9_33_alloc_table result))) ->
                ((=) (typeof voidP_dest_9_33_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 2349 10 63# "expl:Assigns clause"
             (not_assigns voidP_dest_9_33_alloc_table
             voidP_dest_9_33_alloc_table (old !charP_charM_dest_9_33)
             !charP_charM_dest_9_33
             (pset_range (pset_singleton dest_9) (0)
             (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_9_33_alloc_table
             !charP_charM_dest_9_33))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_9))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 18 12 77#
            "expl:Ensures clause"
            (forall i_41 : int.
             ((((<=) (0) i_41) /\
              ((<=) i_41 (Uint64.to_int (strlen src_6 charP_charM_src_6_34))))
              ->
              (Int8.(=) (select !charP_charM_dest_9_33 (shift result i_41))
              (select charP_charM_src_6_34 (shift src_6 i_41))))))))))))) }
  
end

module Function_strcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcpy
  (dest_9 : (pointer voidP)) 
   (src_6 : (pointer voidP)) 
    (charP_charM_dest_9_33 : ref (memory voidP Int8.t)) 
     (voidP_src_6_34_alloc_table : (alloc_table voidP)) 
      (voidP_dest_9_33_alloc_table : (alloc_table voidP)) 
       (voidP_src_6_34_tag_table : (tag_table voidP)) 
        (voidP_dest_9_33_tag_table : (tag_table voidP)) 
         (charP_charM_src_6_34 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 2336 12 773# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 12 13 27#
             "expl:Requires clause"
             (valid_str src_6 voidP_src_6_34_alloc_table
             charP_charM_src_6_34))
            /\
            (#"whole_program.jc" 2336 12 773# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 13 13 42#
             "expl:Requires clause"
             (if
              ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))
              then
              (((<=) (offset_min voidP_dest_9_33_alloc_table dest_9) (0)) /\
              (((>=) (offset_max voidP_dest_9_33_alloc_table dest_9)
               (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))
              /\
              (forall __framac_tmp16 : int.
               ((((<=) (0) __framac_tmp16) /\
                ((<=) __framac_tmp16
                (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))) ->
                ((=) true true))))) else ((=) true true)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 14 13 48#
            "expl:Requires clause" (not (same_block dest_9 src_6)))))))) }
          reads { charP_charM_dest_9_33 } writes { charP_charM_dest_9_33 }
          ensures {
            (((allocated voidP_dest_9_33_alloc_table result) ->
              (((=) (typeof voidP_dest_9_33_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_9_33_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_9_33_alloc_table result))) ->
                ((=) (typeof voidP_dest_9_33_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 2349 10 63# "expl:Assigns clause"
             (not_assigns voidP_dest_9_33_alloc_table
             voidP_dest_9_33_alloc_table (old !charP_charM_dest_9_33)
             !charP_charM_dest_9_33
             (pset_range (pset_singleton dest_9) (0)
             (Uint64.to_int (strlen src_6 charP_charM_src_6_34)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_9_33_alloc_table
             !charP_charM_dest_9_33))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcpy.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_9))
            /\
            (#"/home/work/workspace/self/verker-gh/strcpy.h" 18 12 77#
            "expl:Ensures clause"
            (forall i_41 : int.
             ((((<=) (0) i_41) /\
              ((<=) i_41 (Uint64.to_int (strlen src_6 charP_charM_src_6_34))))
              ->
              (Int8.(=) (select !charP_charM_dest_9_33 (shift result i_41))
              (select charP_charM_src_6_34 (shift src_6 i_41))))))))))))) }
  
end

module Function_strcspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_5 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_42_alloc_table : (alloc_table voidP)) 
     (voidP_s_5_41_alloc_table : (alloc_table voidP)) 
      (voidP_reject_42_tag_table : (tag_table voidP)) 
       (voidP_s_5_41_tag_table : (tag_table voidP)) 
        (charP_charM_reject_42 : (memory voidP Int8.t)) 
         (charP_charM_s_5_41 : (memory voidP Int8.t)) : Uint64.t
          requires { true }
          ensures {
            (((forall p_11 : (pointer voidP).
               (forall t_0 : (pointer voidP).
                (((same_block s_5 p_11) /\
                 (((<=) (sub_pointer s_5 p_11) (0)) /\
                 ((same_block p_11
                  (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                 /\
                 (((<)
                  (sub_pointer p_11
                  (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                  (0))
                 /\
                 ((same_block reject_0 t_0) /\
                 (((<=) (sub_pointer reject_0 t_0) (0)) /\
                 ((same_block t_0
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 /\
                 ((<)
                 (sub_pointer t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_41 p_11)
                 (select charP_charM_reject_42 t_0))))) ->
              (#"/home/work/workspace/self/verker-gh/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_5 charP_charM_s_5_41))))
            /\
            (((exists p_12 : (pointer voidP).
               (exists t_1 : (pointer voidP).
                ((same_block s_5 p_12) /\
                (((<=) (sub_pointer s_5 p_12) (0)) /\
                ((same_block p_12
                 (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                /\
                (((<)
                 (sub_pointer p_12
                 (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                 (0))
                /\
                ((same_block reject_0 t_1) /\
                (((<=) (sub_pointer reject_0 t_1) (0)) /\
                ((same_block t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                /\
                (((<)
                 (sub_pointer t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_5_41 p_12)
                (select charP_charM_reject_42 t_1)))))))))))) ->
              (#"/home/work/workspace/self/verker-gh/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_2 : (pointer voidP).
               ((same_block reject_0 t_2) /\
               (((<=) (sub_pointer reject_0 t_2) (0)) /\
               ((same_block t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
               /\
               (((<)
                (sub_pointer t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_5_41 (shift s_5 (Uint64.to_int result)))
               (select charP_charM_reject_42 t_2)))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_5 reject_0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 2580 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_5 charP_charM_s_5_41)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_13 : (pointer voidP).
             (forall t_3 : (pointer voidP).
              (((same_block s_5 p_13) /\
               (((<=) (sub_pointer s_5 p_13) (0)) /\
               ((same_block p_13 (shift s_5 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_13 (shift s_5 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_3) /\
               (((<=) (sub_pointer reject_0 t_3) (0)) /\
               ((same_block t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
               /\
               ((<)
               (sub_pointer t_3
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_5_41 p_13)
               (select charP_charM_reject_42 t_3))))))))))))))) }
  
end

module Function_strcspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_5 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_42_alloc_table : (alloc_table voidP)) 
     (voidP_s_5_41_alloc_table : (alloc_table voidP)) 
      (voidP_reject_42_tag_table : (tag_table voidP)) 
       (voidP_s_5_41_tag_table : (tag_table voidP)) 
        (charP_charM_reject_42 : (memory voidP Int8.t)) 
         (charP_charM_s_5_41 : (memory voidP Int8.t)) : Uint64.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 2574 12 94# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 46 13 25#
             "expl:Requires clause"
             (valid_str s_5 voidP_s_5_41_alloc_table charP_charM_s_5_41))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 47 13 30#
            "expl:Requires clause"
            (valid_str reject_0 voidP_reject_42_alloc_table
            charP_charM_reject_42))))) }
          ensures {
            (((forall p_11 : (pointer voidP).
               (forall t_0 : (pointer voidP).
                (((same_block s_5 p_11) /\
                 (((<=) (sub_pointer s_5 p_11) (0)) /\
                 ((same_block p_11
                  (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                 /\
                 (((<)
                  (sub_pointer p_11
                  (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                  (0))
                 /\
                 ((same_block reject_0 t_0) /\
                 (((<=) (sub_pointer reject_0 t_0) (0)) /\
                 ((same_block t_0
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 /\
                 ((<)
                 (sub_pointer t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_41 p_11)
                 (select charP_charM_reject_42 t_0))))) ->
              (#"/home/work/workspace/self/verker-gh/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_5 charP_charM_s_5_41))))
            /\
            (((exists p_12 : (pointer voidP).
               (exists t_1 : (pointer voidP).
                ((same_block s_5 p_12) /\
                (((<=) (sub_pointer s_5 p_12) (0)) /\
                ((same_block p_12
                 (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                /\
                (((<)
                 (sub_pointer p_12
                 (shift s_5 (Uint64.to_int (strlen s_5 charP_charM_s_5_41))))
                 (0))
                /\
                ((same_block reject_0 t_1) /\
                (((<=) (sub_pointer reject_0 t_1) (0)) /\
                ((same_block t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                /\
                (((<)
                 (sub_pointer t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_5_41 p_12)
                (select charP_charM_reject_42 t_1)))))))))))) ->
              (#"/home/work/workspace/self/verker-gh/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_2 : (pointer voidP).
               ((same_block reject_0 t_2) /\
               (((<=) (sub_pointer reject_0 t_2) (0)) /\
               ((same_block t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
               /\
               (((<)
                (sub_pointer t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_5_41 (shift s_5 (Uint64.to_int result)))
               (select charP_charM_reject_42 t_2)))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_5 reject_0)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 2580 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_5 charP_charM_s_5_41)))
            /\
            (#"/home/work/workspace/self/verker-gh/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_13 : (pointer voidP).
             (forall t_3 : (pointer voidP).
              (((same_block s_5 p_13) /\
               (((<=) (sub_pointer s_5 p_13) (0)) /\
               ((same_block p_13 (shift s_5 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_13 (shift s_5 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_3) /\
               (((<=) (sub_pointer reject_0 t_3) (0)) /\
               ((same_block t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_42))))
               /\
               ((<)
               (sub_pointer t_3
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_42)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_5_41 p_13)
               (select charP_charM_reject_42 t_3))))))))))))))) }
  
end

module Function_strnchr

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_7 : (pointer voidP)) 
   (count_3 : Uint64.t) 
    (c_16 : Int32.t) 
     (voidP_s_7_46_alloc_table : (alloc_table voidP)) 
      (voidP_s_7_46_tag_table : (tag_table voidP)) 
       (charP_charM_s_7_46 : (memory voidP Int8.t)) : (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_s_7_46_alloc_table result) ->
            (((=) (typeof voidP_s_7_46_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_7_46_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_7_46_alloc_table result))) ->
              ((=) (typeof voidP_s_7_46_tag_table (shift result i))
              charP_tag)))))
          /\
          (((forall p_15 : (pointer voidP).
             (((same_block s_7 p_15) /\
              (((<=) (sub_pointer s_7 p_15) (0)) /\
              ((same_block p_15
               (shift s_7
               (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
              /\
              ((<)
              (sub_pointer p_15
              (shift s_7
              (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_7_46 p_15)
              (#"whole_program.jc" 3124 29 44# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_16))))) ->
            (#"/home/work/workspace/self/verker-gh/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_16 : (pointer voidP).
            ((same_block s_7 p_16) /\
            (((<=) (sub_pointer s_7 p_16) (0)) /\
            ((same_block p_16
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
            /\
            (((<)
             (sub_pointer p_16
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_7_46 p_16)
            (#"whole_program.jc" 3092 29 44# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) ->
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_7 result))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_7_46 result)
            (#"whole_program.jc" 3105 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_17 : (pointer voidP).
            (((same_block s_7 p_17) /\
             (((<=) (sub_pointer s_7 p_17) (0)) /\
             ((same_block p_17 result) /\
             ((<) (sub_pointer p_17 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_7_46 p_17)
             (#"whole_program.jc" 3114 40 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))))) }
  
end

module Function_strnchr_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_7 : (pointer voidP)) 
   (count_3 : Uint64.t) 
    (c_16 : Int32.t) 
     (voidP_s_7_46_alloc_table : (alloc_table voidP)) 
      (voidP_s_7_46_tag_table : (tag_table voidP)) 
       (charP_charM_s_7_46 : (memory voidP Int8.t)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"/home/work/workspace/self/verker-gh/strnchr.h" 14 13 33#
          "expl:Requires clause"
          (valid_strn s_7 count_3 voidP_s_7_46_alloc_table
          charP_charM_s_7_46))) }
        ensures {
          (((allocated voidP_s_7_46_alloc_table result) ->
            (((=) (typeof voidP_s_7_46_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_7_46_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_7_46_alloc_table result))) ->
              ((=) (typeof voidP_s_7_46_tag_table (shift result i))
              charP_tag)))))
          /\
          (((forall p_15 : (pointer voidP).
             (((same_block s_7 p_15) /\
              (((<=) (sub_pointer s_7 p_15) (0)) /\
              ((same_block p_15
               (shift s_7
               (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
              /\
              ((<)
              (sub_pointer p_15
              (shift s_7
              (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_7_46 p_15)
              (#"whole_program.jc" 3124 29 44# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_16))))) ->
            (#"/home/work/workspace/self/verker-gh/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_16 : (pointer voidP).
            ((same_block s_7 p_16) /\
            (((<=) (sub_pointer s_7 p_16) (0)) /\
            ((same_block p_16
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46))))
            /\
            (((<)
             (sub_pointer p_16
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_7_46 p_16)
            (#"whole_program.jc" 3092 29 44# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) ->
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_7 result))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_46)))) (0)))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_7_46 result)
            (#"whole_program.jc" 3105 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_17 : (pointer voidP).
            (((same_block s_7 p_17) /\
             (((<=) (sub_pointer s_7 p_17) (0)) /\
             ((same_block p_17 result) /\
             ((<) (sub_pointer p_17 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_7_46 p_17)
             (#"whole_program.jc" 3114 40 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))))) }
  
end

module Function_strnlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_8 : (pointer voidP)) 
   (count_4 : Uint64.t) 
    (voidP_s_8_48_alloc_table : (alloc_table voidP)) 
     (voidP_s_8_48_tag_table : (tag_table voidP)) 
      (charP_charM_s_8_48 : (memory voidP Int8.t)) : Uint64.t
       requires { true }
       ensures {
         (((forall i_50 : int.
            ((((<=) (0) i_50) /\ ((<=) i_50 (Uint64.to_int count_4))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_50))
             (#"whole_program.jc" 3273 37 48# "expl:Integer cast"
             (Int8.of_int (0)))))) ->
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 105 15 31#
           "expl:Ensures clause" (Uint64.(=) result count_4)))
         /\
         (((exists i_51 : int.
            (((<=) (0) i_51) /\
            (((<=) i_51 (Uint64.to_int count_4)) /\
            (Int8.(=) (select charP_charM_s_8_48 (shift s_8 i_51))
            (#"whole_program.jc" 3262 37 48# "expl:Integer cast" (Int8.of_int
            (0))))))) ->
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
            "expl:Ensures clause"
            (Int8.(=)
            (select charP_charM_s_8_48 (shift s_8 (Uint64.to_int result)))
            (#"whole_program.jc" 3264 33 44# "expl:Integer cast" (Int8.of_int
            (0)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 102 15 67#
           "expl:Ensures clause"
           (forall i_52 : int.
            ((((<=) (0) i_52) /\ ((<) i_52 (Uint64.to_int result))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_52))
             (#"whole_program.jc" 3269 38 49# "expl:Integer cast"
             (Int8.of_int (0)))))))))))
         /\
         (#"/home/work/workspace/self/verker-gh/strnlen.h" 98 12 40#
         "expl:Ensures clause"
         (Uint64.(=) result (strnlen s_8 count_4 charP_charM_s_8_48))))) }
  
end

module Function_strnlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_8 : (pointer voidP)) 
   (count_4 : Uint64.t) 
    (voidP_s_8_48_alloc_table : (alloc_table voidP)) 
     (voidP_s_8_48_tag_table : (tag_table voidP)) 
      (charP_charM_s_8_48 : (memory voidP Int8.t)) : Uint64.t
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker-gh/strnlen.h" 96 13 33#
         "expl:Requires clause"
         (valid_strn s_8 count_4 voidP_s_8_48_alloc_table charP_charM_s_8_48)))
         }
       ensures {
         (((forall i_50 : int.
            ((((<=) (0) i_50) /\ ((<=) i_50 (Uint64.to_int count_4))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_50))
             (#"whole_program.jc" 3273 37 48# "expl:Integer cast"
             (Int8.of_int (0)))))) ->
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 105 15 31#
           "expl:Ensures clause" (Uint64.(=) result count_4)))
         /\
         (((exists i_51 : int.
            (((<=) (0) i_51) /\
            (((<=) i_51 (Uint64.to_int count_4)) /\
            (Int8.(=) (select charP_charM_s_8_48 (shift s_8 i_51))
            (#"whole_program.jc" 3262 37 48# "expl:Integer cast" (Int8.of_int
            (0))))))) ->
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/strnlen.h" 101 15 33#
            "expl:Ensures clause"
            (Int8.(=)
            (select charP_charM_s_8_48 (shift s_8 (Uint64.to_int result)))
            (#"whole_program.jc" 3264 33 44# "expl:Integer cast" (Int8.of_int
            (0)))))
           /\
           (#"/home/work/workspace/self/verker-gh/strnlen.h" 102 15 67#
           "expl:Ensures clause"
           (forall i_52 : int.
            ((((<=) (0) i_52) /\ ((<) i_52 (Uint64.to_int result))) ->
             (Int8.(<>) (select charP_charM_s_8_48 (shift s_8 i_52))
             (#"whole_program.jc" 3269 38 49# "expl:Integer cast"
             (Int8.of_int (0)))))))))))
         /\
         (#"/home/work/workspace/self/verker-gh/strnlen.h" 98 12 40#
         "expl:Ensures clause"
         (Uint64.(=) result (strnlen s_8 count_4 charP_charM_s_8_48))))) }
  
end

module Function_strrchr

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strrchr
  (s_9 : (pointer voidP)) 
   (c_17 : Int32.t) 
    (voidP_s_9_55_alloc_table : (alloc_table voidP)) 
     (voidP_s_9_55_tag_table : (tag_table voidP)) 
      (charP_charM_s_9_55 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_9_55_alloc_table result) ->
           (((=) (typeof voidP_s_9_55_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_9_55_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_9_55_alloc_table result))) ->
             ((=) (typeof voidP_s_9_55_tag_table (shift result i)) charP_tag)))))
         /\
         (((forall p_29 : (pointer voidP).
            (((same_block s_9 p_29) /\
             (((<=) (sub_pointer s_9 p_29) (0)) /\
             ((same_block p_29
              (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
             /\
             ((<=)
             (sub_pointer p_29
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_9_55 p_29)
             (#"whole_program.jc" 3891 29 44# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))) ->
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 30 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         ((exists p_30 : (pointer voidP).
           ((same_block s_9 p_30) /\
           (((<=) (sub_pointer s_9 p_30) (0)) /\
           ((same_block p_30
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
           /\
           (((<=)
            (sub_pointer p_30
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_55 p_30)
           (#"whole_program.jc" 3858 29 44# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
           "expl:Ensures clause" (same_block s_9 result))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
           "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
           "expl:Ensures clause"
           (same_block result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
           "expl:Ensures clause"
           ((<=)
           (sub_pointer result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 25 15 36#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_9_55 result)
           (#"whole_program.jc" 3869 51 75# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17))))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 26 15 95#
          "expl:Ensures clause"
          (forall p_31 : (pointer voidP).
           (((same_block result p_31) /\
            (((<) (sub_pointer result p_31) (0)) /\
            ((same_block p_31
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
            /\
            ((<=)
            (sub_pointer p_31
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))))
            ->
            (Bit_int8.(<>) (select charP_charM_s_9_55 p_31)
            (#"whole_program.jc" 3883 40 64# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))))) }
  
end

module Function_strrchr_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strrchr
  (s_9 : (pointer voidP)) 
   (c_17 : Int32.t) 
    (voidP_s_9_55_alloc_table : (alloc_table voidP)) 
     (voidP_s_9_55_tag_table : (tag_table voidP)) 
      (charP_charM_s_9_55 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker-gh/strrchr.c" 20 13 25#
         "expl:Requires clause"
         (valid_str s_9 voidP_s_9_55_alloc_table charP_charM_s_9_55))) }
       ensures {
         (((allocated voidP_s_9_55_alloc_table result) ->
           (((=) (typeof voidP_s_9_55_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_9_55_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_9_55_alloc_table result))) ->
             ((=) (typeof voidP_s_9_55_tag_table (shift result i)) charP_tag)))))
         /\
         (((forall p_29 : (pointer voidP).
            (((same_block s_9 p_29) /\
             (((<=) (sub_pointer s_9 p_29) (0)) /\
             ((same_block p_29
              (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
             /\
             ((<=)
             (sub_pointer p_29
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_9_55 p_29)
             (#"whole_program.jc" 3891 29 44# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))) ->
           (#"/home/work/workspace/self/verker-gh/strrchr.c" 30 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         ((exists p_30 : (pointer voidP).
           ((same_block s_9 p_30) /\
           (((<=) (sub_pointer s_9 p_30) (0)) /\
           ((same_block p_30
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
           /\
           (((<=)
            (sub_pointer p_30
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_55 p_30)
           (#"whole_program.jc" 3858 29 44# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
           "expl:Ensures clause" (same_block s_9 result))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 27#
           "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
           "expl:Ensures clause"
           (same_block result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 24 20 44#
           "expl:Ensures clause"
           ((<=)
           (sub_pointer result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 24 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/strrchr.c" 25 15 36#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_9_55 result)
           (#"whole_program.jc" 3869 51 75# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17))))
          /\
          (#"/home/work/workspace/self/verker-gh/strrchr.c" 26 15 95#
          "expl:Ensures clause"
          (forall p_31 : (pointer voidP).
           (((same_block result p_31) /\
            (((<) (sub_pointer result p_31) (0)) /\
            ((same_block p_31
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55))))
            /\
            ((<=)
            (sub_pointer p_31
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_55)))) (0)))))
            ->
            (Bit_int8.(<>) (select charP_charM_s_9_55 p_31)
            (#"whole_program.jc" 3883 40 64# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))))) }
  
end

module Function_strsep

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strsep
  (s_10 : (pointer char_xP)) 
   (ct_2 : (pointer voidP)) 
    (char_xP_char_xM_s_10_57 : ref (memory char_xP (pointer voidP))) 
     (charP_charM_result_59 : ref (memory voidP Int8.t)) 
      (voidP_result_59_alloc_table : (alloc_table voidP)) 
       (voidP_ct_2_58_alloc_table : (alloc_table voidP)) 
        (char_xP_s_10_57_alloc_table : (alloc_table char_xP)) 
         (voidP_result_59_tag_table : (tag_table voidP)) 
          (voidP_ct_2_58_tag_table : (tag_table voidP)) 
           (charP_charM_ct_2_58 : (memory voidP Int8.t)) : (pointer voidP)
            requires { true } reads { charP_charM_result_59,
            char_xP_char_xM_s_10_57 } writes { charP_charM_result_59,
            char_xP_char_xM_s_10_57 }
            ensures {
              (((allocated voidP_result_59_alloc_table result) ->
                (((=) (typeof voidP_result_59_tag_table result) charP_tag) /\
                (forall i : int.
                 ((((<=) (offset_min voidP_result_59_alloc_table result) i)
                  /\ ((<) i (offset_max voidP_result_59_alloc_table result)))
                  ->
                  ((=) (typeof voidP_result_59_tag_table (shift result i))
                  charP_tag)))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_57) s_10)
                 voidP_result_59_alloc_table (old !charP_charM_result_59))
                /\
                ((<>)
                (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
                  (not_assigns voidP_result_59_alloc_table
                  voidP_result_59_alloc_table (old !charP_charM_result_59)
                  !charP_charM_result_59
                  (pset_singleton
                  (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))))
                 /\
                 (#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_57_alloc_table
                 char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                 !char_xP_char_xM_s_10_57 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 38 15 46#
                 "expl:Ensures clause"
                 ((=) (select !char_xP_char_xM_s_10_57 s_10)
                 (shift
                 (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                 (1))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 39 15 45#
                 "expl:Ensures clause"
                 (Int8.(=)
                 (select !charP_charM_result_59
                 (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))
                 (#"whole_program.jc" 4102 37 48# "expl:Integer cast"
                 (Int8.of_int (0)))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 40 15 33#
                "expl:Ensures clause"
                (valid_str result voidP_result_59_alloc_table
                !charP_charM_result_59)))))))))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_57) s_10)
                 voidP_result_59_alloc_table (old !charP_charM_result_59))
                /\
                ((=)
                (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
                  (not_assigns voidP_result_59_alloc_table
                  voidP_result_59_alloc_table (old !charP_charM_result_59)
                  !charP_charM_result_59 pset_empty))
                 /\
                 (#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_57_alloc_table
                 char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                 !char_xP_char_xM_s_10_57 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 31 15 26#
                "expl:Ensures clause"
                ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))))))
              /\
              (((=) (select (old !char_xP_char_xM_s_10_57) s_10) null) ->
               (((#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
                 (not_assigns voidP_result_59_alloc_table
                 voidP_result_59_alloc_table (old !charP_charM_result_59)
                 !charP_charM_result_59 pset_empty))
                /\
                (#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
                (not_assigns char_xP_s_10_57_alloc_table
                char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                !char_xP_char_xM_s_10_57 pset_empty)))
               /\
               (#"/home/work/workspace/self/verker-gh/strsep.h" 25 15 31#
               "expl:Ensures clause" ((=) result null))))))) }
  
end

module Function_strsep_safe

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strsep
  (s_10 : (pointer char_xP)) 
   (ct_2 : (pointer voidP)) 
    (char_xP_char_xM_s_10_57 : ref (memory char_xP (pointer voidP))) 
     (charP_charM_result_59 : ref (memory voidP Int8.t)) 
      (voidP_result_59_alloc_table : (alloc_table voidP)) 
       (voidP_ct_2_58_alloc_table : (alloc_table voidP)) 
        (char_xP_s_10_57_alloc_table : (alloc_table char_xP)) 
         (voidP_result_59_tag_table : (tag_table voidP)) 
          (voidP_ct_2_58_tag_table : (tag_table voidP)) 
           (charP_charM_ct_2_58 : (memory voidP Int8.t)) : (pointer voidP)
            requires {
              ("expl:Internal"
              (#"whole_program.jc" 4070 12 491# "expl:Requires clause"
              ((#"/home/work/workspace/self/verker-gh/strsep.h" 19 13 26#
               "expl:Requires clause"
               (valid_str ct_2 voidP_ct_2_58_alloc_table charP_charM_ct_2_58))
              /\
              (#"whole_program.jc" 4070 12 491# "expl:Requires clause"
              ((#"/home/work/workspace/self/verker-gh/strsep.h" 20 13 22#
               "expl:Requires clause"
               (#"whole_program.jc" 4070 12 491# "expl:Requires clause"
               ((#"whole_program.jc" 4070 12 491# "expl:Requires clause"
                ((<=) (offset_min char_xP_s_10_57_alloc_table s_10) (0)))
               /\
               (#"whole_program.jc" 4070 12 491# "expl:Requires clause"
               ((#"whole_program.jc" 4070 12 491# "expl:Requires clause"
                ((>=) (offset_max char_xP_s_10_57_alloc_table s_10) (0)))
               /\
               (#"whole_program.jc" 4070 12 491# "expl:Requires clause"
               ((=) true true)))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strsep.h" 21 13 41#
              "expl:Requires clause"
              (((valid_str (select !char_xP_char_xM_s_10_57 s_10)
                voidP_result_59_alloc_table !charP_charM_result_59)
               /\ (not ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))
              \/
              (((=) (select !char_xP_char_xM_s_10_57 s_10) null) /\
              (not
              (valid_str (select !char_xP_char_xM_s_10_57 s_10)
              voidP_result_59_alloc_table !charP_charM_result_59)))))))))) }
            reads { charP_charM_result_59, char_xP_char_xM_s_10_57 } writes {
            charP_charM_result_59, char_xP_char_xM_s_10_57 }
            ensures {
              (((allocated voidP_result_59_alloc_table result) ->
                (((=) (typeof voidP_result_59_tag_table result) charP_tag) /\
                (forall i : int.
                 ((((<=) (offset_min voidP_result_59_alloc_table result) i)
                  /\ ((<) i (offset_max voidP_result_59_alloc_table result)))
                  ->
                  ((=) (typeof voidP_result_59_tag_table (shift result i))
                  charP_tag)))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_57) s_10)
                 voidP_result_59_alloc_table (old !charP_charM_result_59))
                /\
                ((<>)
                (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
                  (not_assigns voidP_result_59_alloc_table
                  voidP_result_59_alloc_table (old !charP_charM_result_59)
                  !charP_charM_result_59
                  (pset_singleton
                  (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))))
                 /\
                 (#"whole_program.jc" 4093 10 68# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_57_alloc_table
                 char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                 !char_xP_char_xM_s_10_57 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 38 15 46#
                 "expl:Ensures clause"
                 ((=) (select !char_xP_char_xM_s_10_57 s_10)
                 (shift
                 (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                 (1))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 39 15 45#
                 "expl:Ensures clause"
                 (Int8.(=)
                 (select !charP_charM_result_59
                 (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2))
                 (#"whole_program.jc" 4102 37 48# "expl:Integer cast"
                 (Int8.of_int (0)))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 40 15 33#
                "expl:Ensures clause"
                (valid_str result voidP_result_59_alloc_table
                !charP_charM_result_59)))))))))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_57) s_10)
                 voidP_result_59_alloc_table (old !charP_charM_result_59))
                /\
                ((=)
                (strpbrk (select (old !char_xP_char_xM_s_10_57) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
                  (not_assigns voidP_result_59_alloc_table
                  voidP_result_59_alloc_table (old !charP_charM_result_59)
                  !charP_charM_result_59 pset_empty))
                 /\
                 (#"whole_program.jc" 4087 10 22# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_57_alloc_table
                 char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                 !char_xP_char_xM_s_10_57 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker-gh/strsep.h" 30 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_57) s_10)))
                /\
                (#"/home/work/workspace/self/verker-gh/strsep.h" 31 15 26#
                "expl:Ensures clause"
                ((=) (select !char_xP_char_xM_s_10_57 s_10) null)))))))
              /\
              (((=) (select (old !char_xP_char_xM_s_10_57) s_10) null) ->
               (((#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
                 (not_assigns voidP_result_59_alloc_table
                 voidP_result_59_alloc_table (old !charP_charM_result_59)
                 !charP_charM_result_59 pset_empty))
                /\
                (#"whole_program.jc" 4082 10 18# "expl:Assigns clause"
                (not_assigns char_xP_s_10_57_alloc_table
                char_xP_s_10_57_alloc_table (old !char_xP_char_xM_s_10_57)
                !char_xP_char_xM_s_10_57 pset_empty)))
               /\
               (#"/home/work/workspace/self/verker-gh/strsep.h" 25 15 31#
               "expl:Ensures clause" ((=) result null))))))) }
  
end

module Function_strspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_11_0 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_61_alloc_table : (alloc_table voidP)) 
     (voidP_s_11_60_alloc_table : (alloc_table voidP)) 
      (voidP_accept_61_tag_table : (tag_table voidP)) 
       (voidP_s_11_60_tag_table : (tag_table voidP)) 
        (charP_charM_accept_61 : (memory voidP Int8.t)) 
         (charP_charM_s_11_60 : (memory voidP Int8.t)) : Uint64.t
          requires { true }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 4164 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_11_0 charP_charM_s_11_60)))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 64 12 87#
             "expl:Ensures clause"
             (forall t_15 : (pointer voidP).
              (((same_block accept_0 t_15) /\
               (((<=) (sub_pointer accept_0 t_15) (0)) /\
               ((same_block t_15
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
               /\
               ((<)
               (sub_pointer t_15
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))) (0)))))
               ->
               (Int8.(<>)
               (select charP_charM_s_11_60
               (shift s_11_0 (Uint64.to_int result)))
               (select charP_charM_accept_61 t_15)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 65 12 134#
             "expl:Ensures clause"
             (forall p_32 : (pointer voidP).
              (((same_block s_11_0 p_32) /\
               (((<=) (sub_pointer s_11_0 p_32) (0)) /\
               ((same_block p_32 (shift s_11_0 (Uint64.to_int result))) /\
               ((<) (sub_pointer p_32 (shift s_11_0 (Uint64.to_int result)))
               (0))))) ->
               (exists t_16 : (pointer voidP).
                ((same_block accept_0 t_16) /\
                (((<=) (sub_pointer accept_0 t_16) (0)) /\
                ((same_block t_16
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                /\
                (((<)
                 (sub_pointer t_16
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_60 p_32)
                (select charP_charM_accept_61 t_16))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 67 12 40#
            "expl:Ensures clause"
            ((=) (Uint64.to_int result) (strspn s_11_0 accept_0)))))))))))) }
  
end

module Function_strspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_11_0 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_61_alloc_table : (alloc_table voidP)) 
     (voidP_s_11_60_alloc_table : (alloc_table voidP)) 
      (voidP_accept_61_tag_table : (tag_table voidP)) 
       (voidP_s_11_60_tag_table : (tag_table voidP)) 
        (charP_charM_accept_61 : (memory voidP Int8.t)) 
         (charP_charM_s_11_60 : (memory voidP Int8.t)) : Uint64.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 4160 12 97# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 60 13 25#
             "expl:Requires clause"
             (valid_str s_11_0 voidP_s_11_60_alloc_table charP_charM_s_11_60))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 61 13 30#
            "expl:Requires clause"
            (valid_str accept_0 voidP_accept_61_alloc_table
            charP_charM_accept_61))))) }
          ensures {
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 4164 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 63 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_11_0 charP_charM_s_11_60)))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 64 12 87#
             "expl:Ensures clause"
             (forall t_15 : (pointer voidP).
              (((same_block accept_0 t_15) /\
               (((<=) (sub_pointer accept_0 t_15) (0)) /\
               ((same_block t_15
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
               /\
               ((<)
               (sub_pointer t_15
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_61)))) (0)))))
               ->
               (Int8.(<>)
               (select charP_charM_s_11_60
               (shift s_11_0 (Uint64.to_int result)))
               (select charP_charM_accept_61 t_15)))))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker-gh/strspn.h" 65 12 134#
             "expl:Ensures clause"
             (forall p_32 : (pointer voidP).
              (((same_block s_11_0 p_32) /\
               (((<=) (sub_pointer s_11_0 p_32) (0)) /\
               ((same_block p_32 (shift s_11_0 (Uint64.to_int result))) /\
               ((<) (sub_pointer p_32 (shift s_11_0 (Uint64.to_int result)))
               (0))))) ->
               (exists t_16 : (pointer voidP).
                ((same_block accept_0 t_16) /\
                (((<=) (sub_pointer accept_0 t_16) (0)) /\
                ((same_block t_16
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                /\
                (((<)
                 (sub_pointer t_16
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_61))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_60 p_32)
                (select charP_charM_accept_61 t_16))))))))))
            /\
            (#"/home/work/workspace/self/verker-gh/strspn.h" 67 12 40#
            "expl:Ensures clause"
            ((=) (Uint64.to_int result) (strspn s_11_0 accept_0)))))))))))) }
  
end

module Function_strlcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlcpy
  (dest_10 : (pointer voidP)) 
   (src_7 : (pointer voidP)) 
    (size_3 : Uint64.t) 
     (charP_charM_dest_10_69 : ref (memory voidP Int8.t)) 
      (voidP_src_7_70_alloc_table : (alloc_table voidP)) 
       (voidP_dest_10_69_alloc_table : (alloc_table voidP)) 
        (voidP_src_7_70_tag_table : (tag_table voidP)) 
         (voidP_dest_10_69_tag_table : (tag_table voidP)) 
          (charP_charM_src_7_70 : (memory voidP Int8.t)) : Uint64.t
           requires { true } reads { charP_charM_dest_10_69 } writes {
           charP_charM_dest_10_69 }
           ensures {
             (((Uint64.(=) size_3 (#"whole_program.jc" 4494 21 34#
               "expl:Integer cast" (Uint64.of_int (0)))) ->
               (#"whole_program.jc" 4495 10 18# "expl:Assigns clause"
               (not_assigns voidP_dest_10_69_alloc_table
               voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
               !charP_charM_dest_10_69 pset_empty)))
             /\
             (((Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)) ->
               ((#"whole_program.jc" 4485 10 64# "expl:Assigns clause"
                (not_assigns voidP_dest_10_69_alloc_table
                voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
                !charP_charM_dest_10_69
                (pset_range (pset_singleton dest_10) (0)
                (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
               /\
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
                "expl:Ensures clause"
                (forall i_54 : int.
                 ((((<=) (0) i_54) /\
                  ((<) i_54
                  (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
                  (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_54))
                  (select !charP_charM_dest_10_69 (shift dest_10 i_54))))))
               /\
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 32 15 30#
               "expl:Ensures clause"
               (valid_str dest_10 voidP_dest_10_69_alloc_table
               !charP_charM_dest_10_69)))))))
             /\
             (((Uint64.(<) (#"whole_program.jc" 4474 12 25#
               "expl:Integer cast" (Uint64.of_int (0))) size_3)
              /\ (Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70))) ->
              ((#"whole_program.jc" 4475 10 58# "expl:Assigns clause"
               (not_assigns voidP_dest_10_69_alloc_table
               voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
               !charP_charM_dest_10_69
               (pset_range (pset_singleton dest_10) (0)
               (Int.(-) (Uint64.to_int size_3) (1)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
               "expl:Ensures clause"
               (forall i_55 : int.
                ((((<=) (0) i_55) /\
                 ((<) i_55 (Int.(-) (Uint64.to_int size_3) (1)))) ->
                 (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_55))
                 (select !charP_charM_dest_10_69 (shift dest_10 i_55))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 27 15 30#
              "expl:Ensures clause"
              (valid_str dest_10 voidP_dest_10_69_alloc_table
              !charP_charM_dest_10_69))))))))) }
  
end

module Function_strlcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlcpy
  (dest_10 : (pointer voidP)) 
   (src_7 : (pointer voidP)) 
    (size_3 : Uint64.t) 
     (charP_charM_dest_10_69 : ref (memory voidP Int8.t)) 
      (voidP_src_7_70_alloc_table : (alloc_table voidP)) 
       (voidP_dest_10_69_alloc_table : (alloc_table voidP)) 
        (voidP_src_7_70_tag_table : (tag_table voidP)) 
         (voidP_dest_10_69_tag_table : (tag_table voidP)) 
          (charP_charM_src_7_70 : (memory voidP Int8.t)) : Uint64.t
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 4459 12 788# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 20 13 39#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int size_3) (1))) then
               (((<=) (offset_min voidP_dest_10_69_alloc_table dest_10) (0))
               /\
               (((>=) (offset_max voidP_dest_10_69_alloc_table dest_10)
                (Int.(-) (Uint64.to_int size_3) (1)))
               /\
               (forall __framac_tmp30 : int.
                ((((<=) (0) __framac_tmp30) /\
                 ((<=) __framac_tmp30 (Int.(-) (Uint64.to_int size_3) (1))))
                 -> ((=) true true))))) else ((=) true true)))
             /\
             (#"whole_program.jc" 4459 12 788# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 21 13 27#
              "expl:Requires clause"
              (valid_str src_7 voidP_src_7_70_alloc_table
              charP_charM_src_7_70))
             /\
             (#"/home/work/workspace/self/verker-gh/strlcpy.h" 22 13 48#
             "expl:Requires clause" (not (same_block dest_10 src_7)))))))) }
           reads { charP_charM_dest_10_69 } writes { charP_charM_dest_10_69 }
           ensures {
             (((Uint64.(=) size_3 (#"whole_program.jc" 4494 21 34#
               "expl:Integer cast" (Uint64.of_int (0)))) ->
               (#"whole_program.jc" 4495 10 18# "expl:Assigns clause"
               (not_assigns voidP_dest_10_69_alloc_table
               voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
               !charP_charM_dest_10_69 pset_empty)))
             /\
             (((Uint64.(>) size_3 (strlen src_7 charP_charM_src_7_70)) ->
               ((#"whole_program.jc" 4485 10 64# "expl:Assigns clause"
                (not_assigns voidP_dest_10_69_alloc_table
                voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
                !charP_charM_dest_10_69
                (pset_range (pset_singleton dest_10) (0)
                (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
               /\
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 31 15 76#
                "expl:Ensures clause"
                (forall i_54 : int.
                 ((((<=) (0) i_54) /\
                  ((<) i_54
                  (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
                  (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_54))
                  (select !charP_charM_dest_10_69 (shift dest_10 i_54))))))
               /\
               (#"/home/work/workspace/self/verker-gh/strlcpy.h" 32 15 30#
               "expl:Ensures clause"
               (valid_str dest_10 voidP_dest_10_69_alloc_table
               !charP_charM_dest_10_69)))))))
             /\
             (((Uint64.(<) (#"whole_program.jc" 4474 12 25#
               "expl:Integer cast" (Uint64.of_int (0))) size_3)
              /\ (Uint64.(<=) size_3 (strlen src_7 charP_charM_src_7_70))) ->
              ((#"whole_program.jc" 4475 10 58# "expl:Assigns clause"
               (not_assigns voidP_dest_10_69_alloc_table
               voidP_dest_10_69_alloc_table (old !charP_charM_dest_10_69)
               !charP_charM_dest_10_69
               (pset_range (pset_singleton dest_10) (0)
               (Int.(-) (Uint64.to_int size_3) (1)))))
              /\
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker-gh/strlcpy.h" 26 15 73#
               "expl:Ensures clause"
               (forall i_55 : int.
                ((((<=) (0) i_55) /\
                 ((<) i_55 (Int.(-) (Uint64.to_int size_3) (1)))) ->
                 (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_55))
                 (select !charP_charM_dest_10_69 (shift dest_10 i_55))))))
              /\
              (#"/home/work/workspace/self/verker-gh/strlcpy.h" 27 15 30#
              "expl:Ensures clause"
              (valid_str dest_10 voidP_dest_10_69_alloc_table
              !charP_charM_dest_10_69))))))))) }
  
end

module Function_memmove

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_5 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count_1 : Uint64.t) 
     (charP_charM_dest_5_71 : ref (memory voidP Int8.t)) 
      (voidP_dest_5_71_alloc_table : (alloc_table voidP)) 
       (voidP_dest_5_71_tag_table : (tag_table voidP)) : (pointer voidP)
        requires { true } reads { charP_charM_dest_5_71 } writes {
        charP_charM_dest_5_71 }
        ensures {
          (((allocated voidP_dest_5_71_alloc_table result) ->
            ((instanceof voidP_dest_5_71_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_5_71_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_5_71_alloc_table result))) ->
              (instanceof voidP_dest_5_71_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_5 src_3)) ->
            (#"/home/work/workspace/self/verker-gh/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i_60 : int.
             ((((<=) (0) i_60) /\ ((<) i_60 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              i_60))
              (select (old !charP_charM_dest_5_71)
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              i_60)))))))
          /\
          (((same_block dest_5 src_3) ->
            (#"/home/work/workspace/self/verker-gh/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_61 : int.
             ((((<=) (0) i_61) /\ ((<) i_61 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              i_61))
              (select (old !charP_charM_dest_5_71)
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              i_61)))))))
          /\
          (#"whole_program.jc" 4591 10 73# "expl:Assigns clause"
          (not_assigns voidP_dest_5_71_alloc_table
          voidP_dest_5_71_alloc_table (old !charP_charM_dest_5_71)
          !charP_charM_dest_5_71
          (pset_range
          (pset_singleton
          (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count_1) (1)))))))) }
  
end

module Function_memmove_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_5 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count_1 : Uint64.t) 
     (charP_charM_dest_5_71 : ref (memory voidP Int8.t)) 
      (voidP_dest_5_71_alloc_table : (alloc_table voidP)) 
       (voidP_dest_5_71_tag_table : (tag_table voidP)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 4560 12 2059# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memmove.h" 15 13 43#
           "expl:Requires clause"
           (instanceof voidP_dest_5_71_tag_table dest_5 charP_tag))
          /\
          (#"whole_program.jc" 4560 12 2059# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memmove.h" 16 13 42#
           "expl:Requires clause"
           (instanceof voidP_dest_5_71_tag_table src_3 charP_tag))
          /\
          (#"whole_program.jc" 4560 12 2059# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memmove.h" 17 13 46#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count_1) (1))) then
            (((<=)
             (offset_min voidP_dest_5_71_alloc_table
             (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_5_71_alloc_table
             (downcast voidP_dest_5_71_tag_table dest_5 charP_tag))
             (Int.(-) (Uint64.to_int count_1) (1)))
            /\
            (forall __framac_tmp31 : int.
             ((((<=) (0) __framac_tmp31) /\
              ((<=) __framac_tmp31 (Int.(-) (Uint64.to_int count_1) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"whole_program.jc" 4560 12 2059# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memmove.h" 18 13 45#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count_1) (1))) then
            (((<=)
             (offset_min voidP_dest_5_71_alloc_table
             (downcast voidP_dest_5_71_tag_table src_3 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_5_71_alloc_table
             (downcast voidP_dest_5_71_tag_table src_3 charP_tag))
             (Int.(-) (Uint64.to_int count_1) (1)))
            /\
            (forall __framac_tmp32 : int.
             ((((<=) (0) __framac_tmp32) /\
              ((<=) __framac_tmp32 (Int.(-) (Uint64.to_int count_1) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"/home/work/workspace/self/verker-gh/memmove.h" 19 13 100#
          "expl:Requires clause"
          (((same_block dest_5 src_3) /\
           (not (not (same_block dest_5 src_3))))
          \/
          ((not (same_block dest_5 src_3)) /\
          (not (same_block dest_5 src_3)))))))))))))) }
        reads { charP_charM_dest_5_71 } writes { charP_charM_dest_5_71 }
        ensures {
          (((allocated voidP_dest_5_71_alloc_table result) ->
            ((instanceof voidP_dest_5_71_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_5_71_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_5_71_alloc_table result))) ->
              (instanceof voidP_dest_5_71_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_5 src_3)) ->
            (#"/home/work/workspace/self/verker-gh/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i_60 : int.
             ((((<=) (0) i_60) /\ ((<) i_60 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              i_60))
              (select (old !charP_charM_dest_5_71)
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              i_60)))))))
          /\
          (((same_block dest_5 src_3) ->
            (#"/home/work/workspace/self/verker-gh/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_61 : int.
             ((((<=) (0) i_61) /\ ((<) i_61 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_5_71
              (shift (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)
              i_61))
              (select (old !charP_charM_dest_5_71)
              (shift (downcast voidP_dest_5_71_tag_table src_3 charP_tag)
              i_61)))))))
          /\
          (#"whole_program.jc" 4591 10 73# "expl:Assigns clause"
          (not_assigns voidP_dest_5_71_alloc_table
          voidP_dest_5_71_alloc_table (old !charP_charM_dest_5_71)
          !charP_charM_dest_5_71
          (pset_range
          (pset_singleton
          (downcast voidP_dest_5_71_tag_table dest_5 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count_1) (1)))))))) }
  
end

module Function_memcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcpy
  (dest_2 : (pointer voidP)) 
   (src_0 : (pointer voidP)) 
    (count_0 : Uint64.t) 
     (charP_charM_dest_2_74 : ref (memory voidP Int8.t)) 
      (voidP_src_0_75_alloc_table : (alloc_table voidP)) 
       (voidP_dest_2_74_alloc_table : (alloc_table voidP)) 
        (voidP_src_0_75_tag_table : (tag_table voidP)) 
         (voidP_dest_2_74_tag_table : (tag_table voidP)) 
          (charP_charM_src_0_75 : (memory voidP Int8.t)) : (pointer voidP)
           requires { true } reads { charP_charM_dest_2_74 } writes {
           charP_charM_dest_2_74 }
           ensures {
             (((allocated voidP_dest_2_74_alloc_table result) ->
               ((instanceof voidP_dest_2_74_tag_table result voidP_tag) /\
               (forall i : int.
                ((((<=) (offset_min voidP_dest_2_74_alloc_table result) i) /\
                 ((<) i (offset_max voidP_dest_2_74_alloc_table result))) ->
                 (instanceof voidP_dest_2_74_tag_table (shift result i)
                 voidP_tag)))))
             /\
             ((#"whole_program.jc" 4837 10 73# "expl:Assigns clause"
              (not_assigns voidP_dest_2_74_alloc_table
              voidP_dest_2_74_alloc_table (old !charP_charM_dest_2_74)
              !charP_charM_dest_2_74
              (pset_range
              (pset_singleton
              (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0)
              (Int.(-) (Uint64.to_int count_0) (1)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcpy.h" 21 12 99#
             "expl:Ensures clause"
             (forall i_63 : int.
              ((((<=) (0) i_63) /\ ((<) i_63 (Uint64.to_int count_0))) ->
               (Int8.(=)
               (select !charP_charM_dest_2_74
               (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               i_63))
               (select charP_charM_src_0_75
               (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
               i_63)))))))) }
  
end

module Function_memcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcpy
  (dest_2 : (pointer voidP)) 
   (src_0 : (pointer voidP)) 
    (count_0 : Uint64.t) 
     (charP_charM_dest_2_74 : ref (memory voidP Int8.t)) 
      (voidP_src_0_75_alloc_table : (alloc_table voidP)) 
       (voidP_dest_2_74_alloc_table : (alloc_table voidP)) 
        (voidP_src_0_75_tag_table : (tag_table voidP)) 
         (voidP_dest_2_74_tag_table : (tag_table voidP)) 
          (charP_charM_src_0_75 : (memory voidP Int8.t)) : (pointer voidP)
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 4812 12 1638# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcpy.h" 16 13 42#
              "expl:Requires clause"
              (instanceof voidP_src_0_75_tag_table src_0 charP_tag))
             /\
             (#"whole_program.jc" 4812 12 1638# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcpy.h" 17 13 43#
              "expl:Requires clause"
              (instanceof voidP_dest_2_74_tag_table dest_2 charP_tag))
             /\
             (#"whole_program.jc" 4812 12 1638# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker-gh/memcpy.h" 18 13 45#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count_0) (1))) then
               (((<=)
                (offset_min voidP_src_0_75_alloc_table
                (downcast voidP_src_0_75_tag_table src_0 charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_src_0_75_alloc_table
                (downcast voidP_src_0_75_tag_table src_0 charP_tag))
                (Int.(-) (Uint64.to_int count_0) (1)))
               /\
               (forall __framac_tmp33 : int.
                ((((<=) (0) __framac_tmp33) /\
                 ((<=) __framac_tmp33 (Int.(-) (Uint64.to_int count_0) (1))))
                 -> ((=) true true))))) else ((=) true true)))
             /\
             (#"/home/work/workspace/self/verker-gh/memcpy.h" 19 13 46#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) (Uint64.to_int count_0) (1))) then
              (((<=)
               (offset_min voidP_dest_2_74_alloc_table
               (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0))
              /\
              (((>=)
               (offset_max voidP_dest_2_74_alloc_table
               (downcast voidP_dest_2_74_tag_table dest_2 charP_tag))
               (Int.(-) (Uint64.to_int count_0) (1)))
              /\
              (forall __framac_tmp34 : int.
               ((((<=) (0) __framac_tmp34) /\
                ((<=) __framac_tmp34 (Int.(-) (Uint64.to_int count_0) (1))))
                -> ((=) true true))))) else ((=) true true)))))))))) }
           reads { charP_charM_dest_2_74 } writes { charP_charM_dest_2_74 }
           ensures {
             (((allocated voidP_dest_2_74_alloc_table result) ->
               ((instanceof voidP_dest_2_74_tag_table result voidP_tag) /\
               (forall i : int.
                ((((<=) (offset_min voidP_dest_2_74_alloc_table result) i) /\
                 ((<) i (offset_max voidP_dest_2_74_alloc_table result))) ->
                 (instanceof voidP_dest_2_74_tag_table (shift result i)
                 voidP_tag)))))
             /\
             ((#"whole_program.jc" 4837 10 73# "expl:Assigns clause"
              (not_assigns voidP_dest_2_74_alloc_table
              voidP_dest_2_74_alloc_table (old !charP_charM_dest_2_74)
              !charP_charM_dest_2_74
              (pset_range
              (pset_singleton
              (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)) (0)
              (Int.(-) (Uint64.to_int count_0) (1)))))
             /\
             (#"/home/work/workspace/self/verker-gh/memcpy.h" 21 12 99#
             "expl:Ensures clause"
             (forall i_63 : int.
              ((((<=) (0) i_63) /\ ((<) i_63 (Uint64.to_int count_0))) ->
               (Int8.(=)
               (select !charP_charM_dest_2_74
               (shift (downcast voidP_dest_2_74_tag_table dest_2 charP_tag)
               i_63))
               (select charP_charM_src_0_75
               (shift (downcast voidP_src_0_75_tag_table src_0 charP_tag)
               i_63)))))))) }
  
end

module Function_memset

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val memset
  (s_2_0 : (pointer voidP)) 
   (c_13_1 : Int32.t) 
    (count_2 : Uint64.t) 
     (charP_charM_s_2_77 : ref (memory voidP Int8.t)) 
      (voidP_s_2_77_alloc_table : (alloc_table voidP)) 
       (voidP_s_2_77_tag_table : (tag_table voidP)) : (pointer voidP)
        requires { true } reads { charP_charM_s_2_77 } writes {
        charP_charM_s_2_77 }
        ensures {
          (((allocated voidP_s_2_77_alloc_table result) ->
            ((instanceof voidP_s_2_77_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_2_77_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_2_77_alloc_table result))) ->
              (instanceof voidP_s_2_77_tag_table (shift result i) voidP_tag)))))
          /\
          ((#"whole_program.jc" 4949 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_77_alloc_table voidP_s_2_77_alloc_table
           (old !charP_charM_s_2_77) !charP_charM_s_2_77
           (pset_range
           (pset_singleton (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
           (0) (Int.(-) (Uint64.to_int count_2) (1)))))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
           "expl:Ensures clause"
           (forall p_34 : (pointer voidP).
            (((same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_34)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_34) (0))
             /\
             ((same_block p_34
              (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              (Uint64.to_int count_2)))
             /\
             ((<)
             (sub_pointer p_34
             (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
             (Uint64.to_int count_2))) (0))))) ->
             (Bit_int8.(=) (select !charP_charM_s_2_77 p_34)
             (#"whole_program.jc" 4962 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13_1))))))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.h" 20 12 24#
          "expl:Ensures clause" ((=) result s_2_0))))))) }
  
end

module Function_memset_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val memset
  (s_2_0 : (pointer voidP)) 
   (c_13_1 : Int32.t) 
    (count_2 : Uint64.t) 
     (charP_charM_s_2_77 : ref (memory voidP Int8.t)) 
      (voidP_s_2_77_alloc_table : (alloc_table voidP)) 
       (voidP_s_2_77_tag_table : (tag_table voidP)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 4936 12 769# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker-gh/memset.h" 15 13 40#
           "expl:Requires clause"
           (instanceof voidP_s_2_77_tag_table s_2_0 charP_tag))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.h" 16 13 43#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int count_2) (1))) then
           (((<=)
            (offset_min voidP_s_2_77_alloc_table
            (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_s_2_77_alloc_table
            (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
            (Int.(-) (Uint64.to_int count_2) (1)))
           /\
           (forall __framac_tmp35 : int.
            ((((<=) (0) __framac_tmp35) /\
             ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int count_2) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        reads { charP_charM_s_2_77 } writes { charP_charM_s_2_77 }
        ensures {
          (((allocated voidP_s_2_77_alloc_table result) ->
            ((instanceof voidP_s_2_77_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_2_77_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_2_77_alloc_table result))) ->
              (instanceof voidP_s_2_77_tag_table (shift result i) voidP_tag)))))
          /\
          ((#"whole_program.jc" 4949 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_77_alloc_table voidP_s_2_77_alloc_table
           (old !charP_charM_s_2_77) !charP_charM_s_2_77
           (pset_range
           (pset_singleton (downcast voidP_s_2_77_tag_table s_2_0 charP_tag))
           (0) (Int.(-) (Uint64.to_int count_2) (1)))))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker-gh/memset.h" 18 12 95#
           "expl:Ensures clause"
           (forall p_34 : (pointer voidP).
            (((same_block (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_34)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              p_34) (0))
             /\
             ((same_block p_34
              (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
              (Uint64.to_int count_2)))
             /\
             ((<)
             (sub_pointer p_34
             (shift (downcast voidP_s_2_77_tag_table s_2_0 charP_tag)
             (Uint64.to_int count_2))) (0))))) ->
             (Bit_int8.(=) (select !charP_charM_s_2_77 p_34)
             (#"whole_program.jc" 4962 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13_1))))))
          /\
          (#"/home/work/workspace/self/verker-gh/memset.h" 20 12 24#
          "expl:Ensures clause" ((=) result s_2_0))))))) }
  
end

module Function_kstrtobool

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_0 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_83 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_0_82_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_83_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_0_82_tag_table : (tag_table voidP)) 
        (charP_charM_s_0_82 : (memory voidP Int8.t)) : Int32.t
         requires { true } reads { _BoolP__BoolM_res_83 } writes {
         _BoolP__BoolM_res_83 }
         ensures {
           (((((<>) s_0 null) /\ (kstrtobool_fmt s_0 charP_charM_s_0_82)) ->
             ((#"whole_program.jc" 5072 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_83_alloc_table
              _BoolP_res_83_alloc_table (old !_BoolP__BoolM_res_83)
              !_BoolP__BoolM_res_83 (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_0 charP_charM_s_0_82) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
               (#"whole_program.jc" 5074 59 71# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_0 charP_charM_s_0_82) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
               (#"whole_program.jc" 5076 61 73# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 5077 48 60#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_0 null) \/
             (not (kstrtobool_fmt s_0 charP_charM_s_0_82))) ->
             ((#"whole_program.jc" 5068 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_83_alloc_table
              _BoolP_res_83_alloc_table (old !_BoolP__BoolM_res_83)
              !_BoolP__BoolM_res_83 pset_empty))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 5069 33 50#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"whole_program.jc" 5062 46 58#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"whole_program.jc" 5063 47 64#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"whole_program.jc" 5064 47 64#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))) ->
            ((=) res res)))))))) }
  
end

module Function_kstrtobool_safe

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_0 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_83 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_0_82_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_83_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_0_82_tag_table : (tag_table voidP)) 
        (charP_charM_s_0_82 : (memory voidP Int8.t)) : Int32.t
         requires {
           ("expl:Internal"
           (#"whole_program.jc" 5054 12 455# "expl:Requires clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 33 13 43#
            "expl:Requires clause"
            (((=) s_0 null) \/
            (((<=) (offset_min voidP_s_0_82_alloc_table s_0) (0)) /\
            (((>=) (offset_max voidP_s_0_82_alloc_table s_0) (1)) /\
            (((=) true true) /\ ((=) true true))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 34 13 24#
           "expl:Requires clause"
           (#"whole_program.jc" 5054 12 455# "expl:Requires clause"
           ((#"whole_program.jc" 5054 12 455# "expl:Requires clause"
            ((<=) (offset_min _BoolP_res_83_alloc_table res) (0)))
           /\
           (#"whole_program.jc" 5054 12 455# "expl:Requires clause"
           ((#"whole_program.jc" 5054 12 455# "expl:Requires clause"
            ((>=) (offset_max _BoolP_res_83_alloc_table res) (0)))
           /\
           (#"whole_program.jc" 5054 12 455# "expl:Requires clause"
           ((=) true true)))))))))) }
         reads { _BoolP__BoolM_res_83 } writes { _BoolP__BoolM_res_83 }
         ensures {
           (((((<>) s_0 null) /\ (kstrtobool_fmt s_0 charP_charM_s_0_82)) ->
             ((#"whole_program.jc" 5072 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_83_alloc_table
              _BoolP_res_83_alloc_table (old !_BoolP__BoolM_res_83)
              !_BoolP__BoolM_res_83 (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_0 charP_charM_s_0_82) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
               (#"whole_program.jc" 5074 59 71# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_0 charP_charM_s_0_82) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_83 res)
               (#"whole_program.jc" 5076 61 73# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 5077 48 60#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_0 null) \/
             (not (kstrtobool_fmt s_0 charP_charM_s_0_82))) ->
             ((#"whole_program.jc" 5068 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_83_alloc_table
              _BoolP_res_83_alloc_table (old !_BoolP__BoolM_res_83)
              !_BoolP__BoolM_res_83 pset_empty))
             /\
             (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 5069 33 50#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker-gh/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"whole_program.jc" 5062 46 58#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"whole_program.jc" 5063 47 64#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker-gh/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"whole_program.jc" 5064 47 64#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))) ->
            ((=) res res)))))))) }
  
end

module Function__parse_integer_fixup_radix

  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _parse_integer_fixup_radix
  (s_12 : (pointer voidP)) 
   (base : (pointer unsigned_intP)) 
    (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
     Uint32.t)) 
     (voidP_s_87_alloc_table : (alloc_table voidP)) 
      (unsigned_intP_base_88_alloc_table : (alloc_table unsigned_intP)) 
       (voidP_s_87_tag_table : (tag_table voidP)) 
        (charP_charM_s_87 : (memory voidP Int8.t)) : (pointer voidP)
         requires { true } reads { unsigned_intP_unsigned_intM_base_88 }
         writes { unsigned_intP_unsigned_intM_base_88 }
         ensures {
           (((allocated voidP_s_87_alloc_table result) ->
             (((=) (typeof voidP_s_87_tag_table result) charP_tag) /\
             (forall i : int.
              ((((<=) (offset_min voidP_s_87_alloc_table result) i) /\
               ((<) i (offset_max voidP_s_87_alloc_table result))) ->
               ((=) (typeof voidP_s_87_tag_table (shift result i)) charP_tag)))))
           /\
           ((((Uint32.(=)
              (select (old !unsigned_intP_unsigned_intM_base_88) base)
              (#"whole_program.jc" 5197 35 49# "expl:Integer cast"
              (Uint32.of_int (16))))
             /\
             ((Int8.(=) (select charP_charM_s_87 (shift s_12 (0)))
              (#"whole_program.jc" 5198 31 43# "expl:Integer cast"
              (Int8.of_int (48))))
             /\
             ((=)
             (tolower
             (Int8.to_int (select charP_charM_s_87 (shift s_12 (1)))))
             (Int8.to_int (#"whole_program.jc" 5200 15 28#
             "expl:Integer cast" (Int8.of_int (120))))))) ->
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 26 15 37#
             "expl:Ensures clause" ((=) result (shift s_12 (2)))))
           /\
           (((Uint32.(=)
             (select (old !unsigned_intP_unsigned_intM_base_88) base)
             (#"whole_program.jc" 5181 33 46# "expl:Integer cast"
             (Uint32.of_int (0)))) ->
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
              "expl:Ensures clause"
              ((is_hex s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5184 37 51# "expl:Integer cast"
               (Uint32.of_int (16))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 20 15 39#
              "expl:Ensures clause"
              ((is_oct s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5187 39 52# "expl:Integer cast"
               (Uint32.of_int (8))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 21 15 40#
              "expl:Ensures clause"
              ((is_dec s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5190 41 55# "expl:Integer cast"
               (Uint32.of_int (10))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 22 15 45#
              "expl:Ensures clause"
              ((is_hex s_12 charP_charM_s_87) ->
               ((=) result (shift s_12 (2)))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 23 15 54#
             "expl:Ensures clause"
             (((is_oct s_12 charP_charM_s_87) \/
              (is_dec s_12 charP_charM_s_87)) -> ((=) result s_12)))))))))))))
           /\
           ((#"whole_program.jc" 5177 10 28# "expl:Assigns clause"
            (not_assigns unsigned_intP_base_88_alloc_table
            unsigned_intP_base_88_alloc_table (old
            !unsigned_intP_unsigned_intM_base_88)
            !unsigned_intP_unsigned_intM_base_88 (pset_singleton base)))
           /\
           (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 16 12 44#
           "expl:Ensures clause"
           (((=) result s_12) \/ ((=) result (shift s_12 (2))))))))) }
  
end

module Function__parse_integer_fixup_radix_safe

  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _parse_integer_fixup_radix
  (s_12 : (pointer voidP)) 
   (base : (pointer unsigned_intP)) 
    (unsigned_intP_unsigned_intM_base_88 : ref (memory unsigned_intP
     Uint32.t)) 
     (voidP_s_87_alloc_table : (alloc_table voidP)) 
      (unsigned_intP_base_88_alloc_table : (alloc_table unsigned_intP)) 
       (voidP_s_87_tag_table : (tag_table voidP)) 
        (charP_charM_s_87 : (memory voidP Int8.t)) : (pointer voidP)
         requires {
           ("expl:Internal"
           (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
           ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 13 13 29#
            "expl:Requires clause"
            (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
             ((<=) (offset_min voidP_s_87_alloc_table s_12) (0)))
            /\
            (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
             ((>=) (offset_max voidP_s_87_alloc_table s_12) (2)))
            /\
            (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
             ((=) true true))
            /\
            (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
             ((=) true true))
            /\
            (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((=) true true)))))))))))
           /\
           (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 14 13 25#
           "expl:Requires clause"
           (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
           ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((<=) (offset_min unsigned_intP_base_88_alloc_table base) (0)))
           /\
           (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
           ((#"whole_program.jc" 5170 12 415# "expl:Requires clause"
            ((>=) (offset_max unsigned_intP_base_88_alloc_table base) (0)))
           /\
           (#"whole_program.jc" 5170 12 415# "expl:Requires clause"
           ((=) true true)))))))))) }
         reads { unsigned_intP_unsigned_intM_base_88 } writes {
         unsigned_intP_unsigned_intM_base_88 }
         ensures {
           (((allocated voidP_s_87_alloc_table result) ->
             (((=) (typeof voidP_s_87_tag_table result) charP_tag) /\
             (forall i : int.
              ((((<=) (offset_min voidP_s_87_alloc_table result) i) /\
               ((<) i (offset_max voidP_s_87_alloc_table result))) ->
               ((=) (typeof voidP_s_87_tag_table (shift result i)) charP_tag)))))
           /\
           ((((Uint32.(=)
              (select (old !unsigned_intP_unsigned_intM_base_88) base)
              (#"whole_program.jc" 5197 35 49# "expl:Integer cast"
              (Uint32.of_int (16))))
             /\
             ((Int8.(=) (select charP_charM_s_87 (shift s_12 (0)))
              (#"whole_program.jc" 5198 31 43# "expl:Integer cast"
              (Int8.of_int (48))))
             /\
             ((=)
             (tolower
             (Int8.to_int (select charP_charM_s_87 (shift s_12 (1)))))
             (Int8.to_int (#"whole_program.jc" 5200 15 28#
             "expl:Integer cast" (Int8.of_int (120))))))) ->
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 26 15 37#
             "expl:Ensures clause" ((=) result (shift s_12 (2)))))
           /\
           (((Uint32.(=)
             (select (old !unsigned_intP_unsigned_intM_base_88) base)
             (#"whole_program.jc" 5181 33 46# "expl:Integer cast"
             (Uint32.of_int (0)))) ->
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
              "expl:Ensures clause"
              ((is_hex s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5184 37 51# "expl:Integer cast"
               (Uint32.of_int (16))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 20 15 39#
              "expl:Ensures clause"
              ((is_oct s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5187 39 52# "expl:Integer cast"
               (Uint32.of_int (8))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 21 15 40#
              "expl:Ensures clause"
              ((is_dec s_12 charP_charM_s_87) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_88 base)
               (#"whole_program.jc" 5190 41 55# "expl:Integer cast"
               (Uint32.of_int (10))))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 22 15 45#
              "expl:Ensures clause"
              ((is_hex s_12 charP_charM_s_87) ->
               ((=) result (shift s_12 (2)))))
             /\
             (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 23 15 54#
             "expl:Ensures clause"
             (((is_oct s_12 charP_charM_s_87) \/
              (is_dec s_12 charP_charM_s_87)) -> ((=) result s_12)))))))))))))
           /\
           ((#"whole_program.jc" 5177 10 28# "expl:Assigns clause"
            (not_assigns unsigned_intP_base_88_alloc_table
            unsigned_intP_base_88_alloc_table (old
            !unsigned_intP_unsigned_intM_base_88)
            !unsigned_intP_unsigned_intM_base_88 (pset_singleton base)))
           /\
           (#"/home/work/workspace/self/verker-gh/_parse_integer_fixup_radix.h" 16 12 44#
           "expl:Ensures clause"
           (((=) result s_12) \/ ((=) result (shift s_12 (2))))))))) }
  
end
